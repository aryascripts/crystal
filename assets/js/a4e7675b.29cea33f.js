"use strict";(self.webpackChunk_localrepo_postgraphile_website=self.webpackChunk_localrepo_postgraphile_website||[]).push([[1328],{30876:(e,n,r)=>{r.d(n,{Zo:()=>u,kt:()=>m});var t=r(2784);function i(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function a(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function l(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?a(Object(r),!0).forEach((function(n){i(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function s(e,n){if(null==e)return{};var r,t,i=function(e,n){if(null==e)return{};var r,t,i={},a=Object.keys(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||(i[r]=e[r]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var o=t.createContext({}),d=function(e){var n=t.useContext(o),r=n;return e&&(r="function"==typeof e?e(n):l(l({},n),e)),r},u=function(e){var n=d(e.components);return t.createElement(o.Provider,{value:n},e.children)},c="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},g=t.forwardRef((function(e,n){var r=e.components,i=e.mdxType,a=e.originalType,o=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),c=d(r),g=i,m=c["".concat(o,".").concat(g)]||c[g]||p[g]||a;return r?t.createElement(m,l(l({ref:n},u),{},{components:r})):t.createElement(m,l({ref:n},u))}));function m(e,n){var r=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=r.length,l=new Array(a);l[0]=g;var s={};for(var o in n)hasOwnProperty.call(n,o)&&(s[o]=n[o]);s.originalType=e,s[c]="string"==typeof e?e:i,l[1]=s;for(var d=2;d<a;d++)l[d]=r[d];return t.createElement.apply(null,l)}return t.createElement.apply(null,r)}g.displayName="MDXCreateElement"},18785:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>p,frontMatter:()=>a,metadata:()=>s,toc:()=>d});var t=r(7896),i=(r(2784),r(30876));const a={title:"makeAddPgTableOrderByPlugin"},l="makeAddPgTableOrderByPlugin",s={unversionedId:"migrating-from-v4/make-add-pg-table-order-by-plugin",id:"migrating-from-v4/make-add-pg-table-order-by-plugin",title:"makeAddPgTableOrderByPlugin",description:"Some of the types are unchanged between V4 and V5:",source:"@site/postgraphile/migrating-from-v4/make-add-pg-table-order-by-plugin.md",sourceDirName:"migrating-from-v4",slug:"/migrating-from-v4/make-add-pg-table-order-by-plugin",permalink:"/postgraphile/next/migrating-from-v4/make-add-pg-table-order-by-plugin",draft:!1,editUrl:"https://github.com/graphile/crystal/tree/main/postgraphile/website/postgraphile/migrating-from-v4/make-add-pg-table-order-by-plugin.md",tags:[],version:"current",frontMatter:{title:"makeAddPgTableOrderByPlugin"},sidebar:"docs",previous:{title:"makeAddPgTableConditionPlugin",permalink:"/postgraphile/next/migrating-from-v4/make-add-pg-table-condition-plugin"},next:{title:"Custom plugins",permalink:"/postgraphile/next/migrating-from-v4/migrating-custom-plugins"}},o={},d=[{value:"Example 1",id:"example-1",level:2},{value:"Example 2",id:"example-2",level:2}],u={toc:d},c="wrapper";function p(e){let{components:n,...r}=e;return(0,i.kt)(c,(0,t.Z)({},u,r,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"makeaddpgtableorderbyplugin"},"makeAddPgTableOrderByPlugin"),(0,i.kt)("p",null,"Some of the types are unchanged between V4 and V5:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'export interface OrderByAscDescOptions {\n  unique?: boolean;\n  nulls?: NullsSortMethod;\n}\n\nexport type NullsSortMethod =\n  | "first"\n  | "last"\n  | "first-iff-ascending"\n  | "last-iff-ascending"\n  | undefined;\n')),(0,i.kt)("p",null,"The remaining (simplified) signatures for ",(0,i.kt)("inlineCode",{parentName:"p"},"makeAddPgTableOrderByPlugin")," in V4 were:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"// V4 signature\nfunction makeAddPgTableOrderByPlugin(\n  schemaName: string,\n  tableName: string,\n  ordersGenerator: (build: Build) => MakeAddPgTableOrderByPluginOrders,\n  hint?: string,\n): Plugin;\n\nexport interface MakeAddPgTableOrderByPluginOrders {\n  [orderByEnumValue: string]: {\n    value: {\n      alias?: string;\n      specs: Array<OrderSpec>;\n      unique: boolean;\n    };\n  };\n}\n\ntype OrderSpec =\n  | [OrderBySpecIdentity, boolean]\n  | [OrderBySpecIdentity, boolean, boolean];\n\ntype OrderBySpecIdentity =\n  | string\n  | SQL\n  | ((options: { queryBuilder: QueryBuilder }) => SQL);\n\nexport function orderByAscDesc(\n  baseName: string,\n  columnOrSqlFragment: OrderBySpecIdentity,\n  uniqueOrOptions: boolean | OrderByAscDescOptions = false,\n): MakeAddPgTableOrderByPluginOrders;\n")),(0,i.kt)("p",null,"In V5, the signature has changed a little."),(0,i.kt)("p",null,'The first change is trivial: we\'ve combined the first two arguments into a\n"match" object which also optionally accepts the ',(0,i.kt)("inlineCode",{parentName:"p"},"serviceName"),"."),(0,i.kt)("p",null,"The second change, however, is much more significant - order generation now\noperates based on the Gra",(0,i.kt)("em",{parentName:"p"},"fast"),' plan system (which operates based on "steps"\nwhich represent all possible values) rather than V4\'s lookahead engine (which\ndeals in concrete runtime values).'),(0,i.kt)("p",null,"The (simplified) new signatures are:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'export function makeAddPgTableOrderByPlugin(\n  match: {\n    serviceName?: string;\n    schemaName: string;\n    tableName: string;\n  },\n  ordersGenerator: (\n    build: GraphileBuild.Build,\n  ) => MakeAddPgTableOrderByPluginOrders,\n  hint?: string,\n): GraphileConfig.Plugin;\n\nexport interface MakeAddPgTableOrderByPluginOrders {\n  [orderByEnumValue: string]: {\n    extensions: {\n      grafast: {\n        applyPlan($select: PgSelectStep): void;\n      };\n    };\n  };\n}\n\ntype OrderBySpecIdentity =\n  | string // Column name\n  | Omit<PgOrderSpec, "direction"> // Expression\n  | (($select: PgSelectStep) => Omit<PgOrderSpec, "direction">); // Callback, allows for joins/etc\n\nexport function orderByAscDesc(\n  baseName: string,\n  columnOrSqlFragment: OrderBySpecIdentity,\n  uniqueOrOptions: boolean | OrderByAscDescOptions = false,\n): MakeAddPgTableOrderByPluginOrders;\n')),(0,i.kt)("h2",{id:"example-1"},"Example 1"),(0,i.kt)("p",null,"V4:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'const OrderByAveragePetIdPlugin = makeAddPgTableOrderByPlugin(\n  "graphile_utils",\n  "users",\n  (build) => {\n    const { pgSql: sql } = build;\n    const sqlIdentifier = sql.identifier(Symbol("pet"));\n\n    const customOrderBy = orderByAscDesc(\n      "PET_ID_AVERAGE", // this is a ridiculous and unrealistic column but it will serve for testing purposes\n      (helpers) => {\n        const { queryBuilder } = helpers;\n\n        const orderByFrag = sql.fragment`(\n          select avg(${sqlIdentifier}.id)\n          from graphile_utils.pets as ${sqlIdentifier}\n          where ${sqlIdentifier}.user_id = ${queryBuilder.getTableAlias()}.id\n        )`;\n\n        return orderByFrag;\n      },\n      { nulls: "last-iff-ascending" },\n    );\n\n    return customOrderBy;\n  },\n);\n')),(0,i.kt)("p",null,"V5:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'const OrderByAveragePetIdPlugin = makeAddPgTableOrderByPlugin(\n  { schemaName: "graphile_utils", tableName: "users" },\n  (build) => {\n    const { sql } = build;\n    const sqlIdentifier = sql.identifier(Symbol("pet"));\n\n    const customOrderBy = orderByAscDesc(\n      "PET_ID_AVERAGE", // this is a ridiculous and unrealistic column but it will serve for testing purposes\n      ($select) => {\n        const orderByFrag = sql`(\n            select avg(${sqlIdentifier}.id)\n            from graphile_utils.pets as ${sqlIdentifier}\n            where ${sqlIdentifier}.user_id = ${$select.alias}.id\n          )`;\n\n        return { fragment: orderByFrag, codec: TYPES.int };\n      },\n      { nulls: "last-iff-ascending" },\n    );\n\n    return customOrderBy;\n  },\n);\n')),(0,i.kt)("h2",{id:"example-2"},"Example 2"),(0,i.kt)("p",null,"V4:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'const OrderByMemberNamePlugin = makeAddPgTableOrderByPlugin(\n  "app_public",\n  "organization_memberships",\n  ({ pgSql: sql }) => {\n    const sqlIdentifier = sql.identifier(Symbol("member"));\n    return orderByAscDesc(\n      "MEMBER_NAME",\n      // Order fragment callback:\n      ({ queryBuilder }) => {\n        return sql.fragment`(\n          select ${sqlIdentifier}.name\n          from app_public.users as ${sqlIdentifier}\n          where ${sqlIdentifier}.id = ${queryBuilder.getTableAlias()}.user_id\n          limit 1\n        )`;\n      },\n    );\n  },\n);\n')),(0,i.kt)("p",null,"V5:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'const OrderByMemberNamePlugin = makeAddPgTableOrderByPlugin(\n  { schemaName: "app_public", tableName: "organization_memberships" },\n  ({ sql }) => {\n    const sqlIdentifier = sql.identifier(Symbol("member"));\n    return orderByAscDesc(\n      "MEMBER_NAME",\n      // Order spec callback:\n      ($organizationMemberships) => {\n        const fragment = sql.fragment`(\n          select ${sqlIdentifier}.name\n          from app_public.users as ${sqlIdentifier}\n          where ${sqlIdentifier}.id = ${$organizationMemberships.alias}.user_id\n          limit 1\n        )`;\n        return {\n          fragment,\n          codec: TYPES.text,\n        };\n      },\n    );\n  },\n);\n')),(0,i.kt)("p",null,"V5 (alternative solution, using joins which were not possible in V4):"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'const OrderByMemberNamePlugin = makeAddPgTableOrderByPlugin(\n  { schemaName: "app_public", tableName: "organization_memberships" },\n  (build) => {\n    const {\n      sql,\n      input: {\n        pgRegistry: { pgResources },\n      },\n    } = build;\n    const usersSource = pgResources.find((s) => s.name === "users");\n    if (!usersSource) throw new Error(`Couldn\'t find users source`);\n    const sqlIdentifier = sql.identifier(Symbol("member"));\n    return orderByAscDesc(\n      "MEMBER_NAME",\n      // Order spec callback:\n      ($organizationMemberships) => {\n        $organizationMemberships.join({\n          type: "inner",\n          source: usersSource.source as SQL,\n          alias: sqlIdentifier,\n          conditions: [\n            sql`${sqlIdentifier}.id = ${$organizationMemberships.alias}.user_id`,\n          ],\n        });\n        return {\n          fragment: sql`${sqlIdentifier}.name`,\n          codec: usersSource.codec.columns["name"].codec,\n        };\n      },\n    );\n  },\n);\n')))}p.isMDXComponent=!0}}]);