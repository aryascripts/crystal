"use strict";(self.webpackChunk_localrepo_postgraphile_website=self.webpackChunk_localrepo_postgraphile_website||[]).push([[309],{30876:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>d});var n=a(2784);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),p=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},u=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),m=p(a),h=r,d=m["".concat(s,".").concat(h)]||m[h]||c[h]||o;return a?n.createElement(d,i(i({ref:t},u),{},{components:a})):n.createElement(d,i({ref:t},u))}));function d(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,i=new Array(o);i[0]=h;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[m]="string"==typeof e?e:r,i[1]=l;for(var p=2;p<o;p++)i[p]=a[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}h.displayName="MDXCreateElement"},30107:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var n=a(7896),r=(a(2784),a(30876));const o={title:"Introduction"},i="PostGraphile Introduction",l={unversionedId:"index",id:"index",title:"Introduction",description:"This software is in beta, please be sure to use the @beta tag when installing any of the related modules, for example:",source:"@site/postgraphile/index.md",sourceDirName:".",slug:"/",permalink:"/postgraphile/next/",draft:!1,editUrl:"https://github.com/graphile/crystal/tree/main/postgraphile/website/postgraphile/index.md",tags:[],version:"current",frontMatter:{title:"Introduction"},sidebar:"docs",next:{title:"Usage",permalink:"/postgraphile/next/usage"}},s={},p=[],u={toc:p},m="wrapper";function c(e){let{components:t,...a}=e;return(0,r.kt)(m,(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"postgraphile-introduction"},"PostGraphile Introduction"),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"This software is in beta, please be sure to use the ",(0,r.kt)("inlineCode",{parentName:"p"},"@beta")," tag when installing any of the related modules, for example:"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"yarn add postgraphile-plugin-connection-filter@beta\n"))),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"Coming from PostGraphile Version 4? Check out the\n",(0,r.kt)("a",{parentName:"p",href:"/postgraphile/next/migrating-from-v4/"},"migration guide"),"!")),(0,r.kt)("p",null,"If you already use PostgreSQL then you understand the value that a strongly\ntyped and well defined schema can bring to application development; GraphQL is\nthe perfect match for this technology when it comes to making your data layer\naccessible to your frontend application developers (or even API clients)."),(0,r.kt)("p",null,"PostGraphile uses automation and intelligent defaults to eradicate the time\nconsuming and repetitive parts of building a best practices GraphQL API, whilst\ngiving you the tools you need to customize and extend your schema to be exactly\nwhat you need. And because it's powered by ",(0,r.kt)("a",{parentName:"p",href:"https://grafast.org"},"Gra",(0,r.kt)("em",{parentName:"a"},"fast"))," it's\nextremely unlikely that you'd be able to build a GraphQL API using traditional\nGraphQL/DataLoader patterns that's anywhere near as fast as a PostGraphile API -\nit truly runs rings around traditional API development practices."),(0,r.kt)("p",null,"Built on a ",(0,r.kt)("a",{parentName:"p",href:"./extending"},"plugin system"),", you can easily pick and choose the\nfeatures that you want in your API (and even develop your own or mix in features\n",(0,r.kt)("a",{parentName:"p",href:"./community-plugins"},"from the community"),"). Using the\n",(0,r.kt)("a",{parentName:"p",href:"./smart-tags"},"smart tags system")," you can easily tweak which entities appear,\nand how they're exposed. If you ultimately decide an auto-generated GraphQL API\nmay not be for you, PostGraphile has an ",(0,r.kt)("a",{parentName:"p",href:"./exporting-schema"},"'export' feature"),"\nso your generated API can be exported as executable JavaScript code which you\ncan then maintain yourself \u2500 there's no lock-in."),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"PostGraphile doesn't have to be (and ",(0,r.kt)("em",{parentName:"p"},"generally"),' should not be) a "1-to-1 map"\nof your database.'),(0,r.kt)("p",{parentName:"admonition"},"Via schema extensions you can add any types/fields/args that you need to, which\ncan communicate with any data source that Node itself can communicate with. You\ncan also use the plugin interface to wrap ",(0,r.kt)("em",{parentName:"p"},"plan resolvers")," with your own logic,\nwhich gives huge control over authorization, presentation, filtering, and\nvarious other topics."),(0,r.kt)("p",{parentName:"admonition"},"PostGraphile will automatically reflect the permissions in your\ndatabase and only expose the tables, columns, functions and mutations that are\ngranted to it; but you should use ",(0,r.kt)("a",{parentName:"p",href:"./smart-tags"},"smart tags")," and similar\ntechniques to hone the GraphQL API to your needs."),(0,r.kt)("p",{parentName:"admonition"},"By exporting the executable schema you can see the plan resolvers/types/fields\nthat PostGraphile has generated for you and, should you choose to, you can take\nthis code and make it your own - either for the entire schema, or for specific\nportions of it. This can be used to enable you to evolve your database tables\nwithout breaking your GraphQL schema."),(0,r.kt)("p",{parentName:"admonition"},'We strongly advise that you start with as small a GraphQL API as you can, and\nthen add features to it as you need them, rather than going for a "kitchen sink"\napproach!')),(0,r.kt)("p",null,"If your company needs a GraphQL API and the data the API serves comes mostly\n(but not exclusively!) from PostgreSQL databases then PostGraphile can help you\ncraft your perfect GraphQL API in a matter of days, if not hours; saving you\nweeks if not months of development time."),(0,r.kt)("p",null,"For databases that already use\n",(0,r.kt)("a",{parentName:"p",href:"https://learn.graphile.org/docs/PostgreSQL_Row_Level_Security_Infosheet.pdf"},"row-level security"),"\nyou might be able to build a secure, performant and extensible GraphQL API in\nmere minutes. "," We still recommend that you take some time to hone your API though!"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"If you are new to GraphQL we recommend you read through the official\nintroduction to GraphQL ",(0,r.kt)("a",{parentName:"em",href:"https://graphql.org/learn/"},"here")," before continuing\nthrough the PostGraphile documentation.")),(0,r.kt)("p",null,"Some of the features we offer:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Incredible performance - even for your custom logic!"),(0,r.kt)("li",{parentName:"ul"},"Full GraphQL feature-set, including advanced topics such as:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/postgraphile/next/polymorphism"},"polymorphism")," (interfaces and unions)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/postgraphile/next/realtime"},"Real-time")," features (subscriptions and soon: live queries)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"@stream")," / ",(0,r.kt)("inlineCode",{parentName:"li"},"@defer")," support"))),(0,r.kt)("li",{parentName:"ul"},"Excellent Relay support via our ",(0,r.kt)("inlineCode",{parentName:"li"},"postgraphile/presets/relay")," preset:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Global object identification"),(0,r.kt)("li",{parentName:"ul"},"Cursor pagination"),(0,r.kt)("li",{parentName:"ul"},"Mutation input objects and payloads"))),(0,r.kt)("li",{parentName:"ul"},"Massively reduced load on your database without the complexity of caching/cache invalidation"),(0,r.kt)("li",{parentName:"ul"},"Integrates with any authentication middleware available in Node"),(0,r.kt)("li",{parentName:"ul"},"Easily add fields and mutations via ",(0,r.kt)("a",{parentName:"li",href:"./extending/"},"JS/TS plugins")," or\n",(0,r.kt)("a",{parentName:"li",href:"./functions"},"database functions")),(0,r.kt)("li",{parentName:"ul"},"Written in pure TypeScript - no binary modules!"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/postgraphile/next/exporting-schema"},"Export")," your schema as executable JavaScript code"),(0,r.kt)("li",{parentName:"ul"},"Very fast startup in serverless"),(0,r.kt)("li",{parentName:"ul"},"Bring your own PostgreSQL driver/adaptor (integrate with almost any Postgres client library)"),(0,r.kt)("li",{parentName:"ul"},"Run as a CLI, as a Node.js middleware, or a standalone GraphQL schema"),(0,r.kt)("li",{parentName:"ul"},"Easy customization via ",(0,r.kt)("a",{parentName:"li",href:"./smart-tags"},"smart tags")),(0,r.kt)("li",{parentName:"ul"},"Explain your operations via ",(0,r.kt)("a",{parentName:"li",href:"https://grafast.org/ruru/"},"Ruru")," (our Gra",(0,r.kt)("em",{parentName:"li"},"fast"),"-enhanced Graph",(0,r.kt)("em",{parentName:"li"},"i"),"QL IDE)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"./relations/"},"Auto-discovered relations")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"./crud-mutations/"},"Automatic CRUD mutations")," e.g. ",(0,r.kt)("inlineCode",{parentName:"li"},"updatePost")),(0,r.kt)("li",{parentName:"ul"},"Almost all features are optional, and most can be customised on a per-table, per-column or per-constraint basis (as appropriate)"),(0,r.kt)("li",{parentName:"ul"},"Incredible versatility via a wide array of plugins:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Aggregates"),(0,r.kt)("li",{parentName:"ul"},"Powerful filtering"),(0,r.kt)("li",{parentName:"ul"},"Soft deletion"),(0,r.kt)("li",{parentName:"ul"},"Upsert"),(0,r.kt)("li",{parentName:"ul"},"Many-to-many navigation"),(0,r.kt)("li",{parentName:"ul"},"Ordering by related tables"),(0,r.kt)("li",{parentName:"ul"},"Multi-tenancy"),(0,r.kt)("li",{parentName:"ul"},"PostGIS"),(0,r.kt)("li",{parentName:"ul"},"And many many more...")))),(0,r.kt)("p",null,"The easiest way to get started is with the ",(0,r.kt)("a",{parentName:"p",href:"./usage-cli/"},"CLI interface"),"; if you\nhave ",(0,r.kt)("inlineCode",{parentName:"p"},"npx")," installed you can try it out with:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"npx pgl@beta -P pgl/amber -e -c 'postgres:///mydb'\n")),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"(Replace the connection string with a PostgreSQL connection string to your\ndatabase. If your data is not located in the ",(0,r.kt)("inlineCode",{parentName:"em"},"public")," schema of your database\nyou can specify a comma-separated list of database schemas with ",(0,r.kt)("inlineCode",{parentName:"em"},"-s a,b,c"),".)")))}c.isMDXComponent=!0}}]);