"use strict";(self.webpackChunk_localrepo_postgraphile_website=self.webpackChunk_localrepo_postgraphile_website||[]).push([[3880],{30876:(e,n,t)=>{t.d(n,{Zo:()=>s,kt:()=>h});var i=t(2784);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function r(e,n){if(null==e)return{};var t,i,a=function(e,n){if(null==e)return{};var t,i,a={},o=Object.keys(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var p=i.createContext({}),d=function(e){var n=i.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},s=function(e){var n=d(e.components);return i.createElement(p.Provider,{value:n},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},m=i.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,s=r(e,["components","mdxType","originalType","parentName"]),u=d(t),m=a,h=u["".concat(p,".").concat(m)]||u[m]||c[m]||o;return t?i.createElement(h,l(l({ref:n},s),{},{components:t})):i.createElement(h,l({ref:n},s))}));function h(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,l=new Array(o);l[0]=m;var r={};for(var p in n)hasOwnProperty.call(n,p)&&(r[p]=n[p]);r.originalType=e,r[u]="string"==typeof e?e:a,l[1]=r;for(var d=2;d<o;d++)l[d]=t[d];return i.createElement.apply(null,l)}return i.createElement.apply(null,t)}m.displayName="MDXCreateElement"},65027:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>l,default:()=>c,frontMatter:()=>o,metadata:()=>r,toc:()=>d});var i=t(7896),a=(t(2784),t(30876));const o={layout:"page",path:"/postgraphile/make-add-pg-table-condition-plugin/",title:"makeAddPgTableConditionPlugin"},l=void 0,r={unversionedId:"make-add-pg-table-condition-plugin",id:"make-add-pg-table-condition-plugin",title:"makeAddPgTableConditionPlugin",description:"PostGraphile adds condition arguments to various of the table collection",source:"@site/postgraphile/make-add-pg-table-condition-plugin.md",sourceDirName:".",slug:"/make-add-pg-table-condition-plugin",permalink:"/postgraphile/next/make-add-pg-table-condition-plugin",draft:!1,editUrl:"https://github.com/graphile/crystal/tree/main/postgraphile/website/postgraphile/make-add-pg-table-condition-plugin.md",tags:[],version:"current",frontMatter:{layout:"page",path:"/postgraphile/make-add-pg-table-condition-plugin/",title:"makeAddPgTableConditionPlugin"},sidebar:"docs",previous:{title:"makeWrapPlansPlugin",permalink:"/postgraphile/next/make-wrap-plans-plugin"},next:{title:"makeAddPgTableOrderByPlugin",permalink:"/postgraphile/next/make-add-pg-table-order-by-plugin"}},p={},d=[{value:"Example 1",id:"example-1",level:2},{value:"Example 2",id:"example-2",level:2},{value:"Function signature",id:"function-signature",level:2},{value:"<code>makeAddPgTableConditionPlugin</code>",id:"makeaddpgtableconditionplugin",level:3}],s={toc:d},u="wrapper";function c(e){let{components:n,...t}=e;return(0,a.kt)(u,(0,i.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"PostGraphile adds ",(0,a.kt)("inlineCode",{parentName:"p"},"condition")," arguments to various of the table collection\nfields it builds so that you can filter the result set down to just the records\nyou're interested in. By default we add the table's indexed columns to the\ncondition input, where you can specify their value, or ",(0,a.kt)("inlineCode",{parentName:"p"},"null")," if you only want\nthe records where that column ",(0,a.kt)("inlineCode",{parentName:"p"},"IS NULL"),"."),(0,a.kt)("p",null,"Many GraphQL experts would opine that GraphQL filters should not be overly\ncomplicated, and should not reveal too much of the underlying data store. This\nis why we don't have advanced filtering built in by default; however, should you\ndesire that, please check out the filter plugin\n",(0,a.kt)("a",{parentName:"p",href:"./filtering/"},"documented on our Filtering page"),"."),(0,a.kt)("p",null,"Here's an example of filtering forums to those created by a particular user:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-graphql"},"query ForumsCreatedByUser1 {\n  allForums(condition: { creatorId: 1 }) {\n    nodes {\n      id\n      name\n    }\n  }\n}\n")),(0,a.kt)("p",null,"Sometimes, however, you want to filter by something a little more complex than\nthe fields on that table; maybe you want to filter by a field on a related\ntable, or by a computation, or something else."),(0,a.kt)("p",null,"This plugin generator helps you build new ",(0,a.kt)("inlineCode",{parentName:"p"},"condition")," values so that you can\nfilter more flexibly. Let's make this clearer with an example:"),(0,a.kt)("h2",{id:"example-1"},"Example 1"),(0,a.kt)("p",null,"To return a list of forums which match a list of primary keys:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'import { makeAddPgTableConditionPlugin } from "postgraphile/utils";\nimport { TYPES, listOfCodec } from "postgraphile/@dataplan/pg";\n\n/* TODO: test this plugin works! */\nexport default makeAddPgTableConditionPlugin(\n  { schemaName: "app_public", tableName: "forums" },\n  "idIn",\n  (build) => {\n    const { GraphQLList, GraphQLNonNull, GraphQLInt } = build.graphql;\n    return {\n      description: "Filters to records matching one of these ids",\n      // This is graphql-js for `[Int!]`; assumes you\'re using\n      // an integer primary key.\n      type: new GraphQLList(new GraphQLNonNull(GraphQLInt)),\n      applyPlan(\n        $condition /* : PgConditionStep<PgSelectStep<any>> */,\n        value /* : FieldArgs */,\n      ) {\n        const $ids = value.get();\n        $condition.where(\n          sql`${$condition.alias}.id = ANY(${$condition.placeholder(\n            $ids,\n            listOfCodec(TYPES.int),\n          )})`,\n        );\n      },\n    };\n  },\n);\n')),(0,a.kt)("h2",{id:"example-2"},"Example 2"),(0,a.kt)("p",null,"To filter a list of forums (stored in the table ",(0,a.kt)("inlineCode",{parentName:"p"},"app_public.forums"),") to just\nthose where a particular user has posted in (posts are stored in\n",(0,a.kt)("inlineCode",{parentName:"p"},"app_public.posts"),") you might create a plugin like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'import { makeAddPgTableConditionPlugin } from "postgraphile/utils";\n\n/* TODO: test this plugin works! */\nexport default makeAddPgTableConditionPlugin(\n  { schemaName: "app_public", tableName: "forums" },\n  "containsPostsByUserId",\n  (build) => {\n    const { sql } = build;\n    return {\n      description:\n        "Filters the list of forums to only those which " +\n        "contain posts written by the specified user.",\n      type: build.graphql.GraphQLInt,\n      applyPlan(\n        $condition /* : PgConditionStep<PgSelectStep<any>> */,\n        value /* : FieldArgs */,\n      ) {\n        const sqlIdentifier = sql.identifier(Symbol("postsByUser"));\n        $condition.where(sql`exists(\n          select 1\n          from app_public.posts as ${sqlIdentifier}\n          where ${sqlIdentifier}.forum_id = ${$condition.alias}.id\n          and ${sqlIdentifier}.user_id = ${$condition.placeholder(\n            value,\n            TYPES.int,\n          )}\n        )`);\n      },\n    };\n  },\n);\n')),(0,a.kt)("p",null,"The above plugin adds the ",(0,a.kt)("inlineCode",{parentName:"p"},"containsPostsByUserId")," condition to collection fields\nfor the ",(0,a.kt)("inlineCode",{parentName:"p"},"app_public.forums")," table. You might use it like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-graphql"},"query ForumsContainingPostsByUser1 {\n  allForums(condition: { containsPostsByUserId: 1 }) {\n    nodes {\n      id\n      name\n    }\n  }\n}\n")),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},(0,a.kt)("inlineCode",{parentName:"p"},"$condition.alias")," represents the ",(0,a.kt)("inlineCode",{parentName:"p"},"app_public.forums")," table in the example\nabove (i.e. the schemaName.tableName table); if you don't use it in your\nimplementation then there's a good chance your plugin is incorrect.")),(0,a.kt)("h2",{id:"function-signature"},"Function signature"),(0,a.kt)("h3",{id:"makeaddpgtableconditionplugin"},(0,a.kt)("inlineCode",{parentName:"h3"},"makeAddPgTableConditionPlugin")),(0,a.kt)("p",null,"The signature of the ",(0,a.kt)("inlineCode",{parentName:"p"},"makeAddPgTableConditionPlugin")," function is:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"function makeAddPgTableConditionPlugin(\n  match: { serviceName?: string; schemaName: string; tableName: string },\n  conditionFieldName: string,\n  fieldSpecGenerator: (build: GraphileBuild.Build) => GraphileInputFieldConfig,\n): GraphileConfig.Plugin;\n")),(0,a.kt)("p",null,"The table to match is the table named ",(0,a.kt)("inlineCode",{parentName:"p"},"tableName")," in the schema named\n",(0,a.kt)("inlineCode",{parentName:"p"},"schemaName"),"."),(0,a.kt)("p",null,"A new condition is added, named ",(0,a.kt)("inlineCode",{parentName:"p"},"conditionFieldName"),", whose GraphQL\nrepresentation is specified by the result of ",(0,a.kt)("inlineCode",{parentName:"p"},"fieldSpecGenerator"),"."),(0,a.kt)("p",null,"Also inside ",(0,a.kt)("inlineCode",{parentName:"p"},"fieldSpecGenerator")," should be an ",(0,a.kt)("inlineCode",{parentName:"p"},"applyPlan"),", which indicates how\nthis condition should work. It is passed two arguments, the ",(0,a.kt)("inlineCode",{parentName:"p"},"$condition")," (which\nis a ",(0,a.kt)("inlineCode",{parentName:"p"},"PgConditionStep")," wrapping the ",(0,a.kt)("inlineCode",{parentName:"p"},"PgSelectStep")," that we're applying\nconditions to) and the ",(0,a.kt)("inlineCode",{parentName:"p"},"value")," (which is a ",(0,a.kt)("inlineCode",{parentName:"p"},"FieldArgs")," instance representing\nthe value of the field). The ",(0,a.kt)("inlineCode",{parentName:"p"},"applyPlan")," should use ",(0,a.kt)("inlineCode",{parentName:"p"},"$conditon.where(...)")," to\napply a condition to the fetch."),(0,a.kt)("p",null,"When the field named in ",(0,a.kt)("inlineCode",{parentName:"p"},"conditionFieldName")," is used in a query, the\n",(0,a.kt)("inlineCode",{parentName:"p"},"applyPlan")," is called during planning, which results in an additional ",(0,a.kt)("inlineCode",{parentName:"p"},"WHERE"),"\nclause on the generated SQL (combined using ",(0,a.kt)("inlineCode",{parentName:"p"},"AND"),")."))}c.isMDXComponent=!0}}]);