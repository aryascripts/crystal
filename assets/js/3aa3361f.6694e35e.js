"use strict";(self.webpackChunk_localrepo_grafast_website=self.webpackChunk_localrepo_grafast_website||[]).push([[5876],{30876:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var a=n(2784);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},f=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,l=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),d=p(n),f=r,m=d["".concat(l,".").concat(f)]||d[f]||u[f]||s;return n?a.createElement(m,i(i({ref:t},c),{},{components:n})):a.createElement(m,i({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,i=new Array(s);i[0]=f;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[d]="string"==typeof e?e:r,i[1]=o;for(var p=2;p<s;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}f.displayName="MDXCreateElement"},41021:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>s,metadata:()=>o,toc:()=>p});var a=n(7896),r=(n(2784),n(30876));const s={},i="sideEffect",o={unversionedId:"step-library/standard-steps/sideEffect",id:"step-library/standard-steps/sideEffect",title:"sideEffect",description:"Takes the input step (or array of steps, or nothing) as the first argument, a",source:"@site/grafast/step-library/standard-steps/sideEffect.md",sourceDirName:"step-library/standard-steps",slug:"/step-library/standard-steps/sideEffect",permalink:"/grafast/step-library/standard-steps/sideEffect",draft:!1,editUrl:"https://github.com/graphile/crystal/tree/main/grafast/website/grafast/step-library/standard-steps/sideEffect.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"setter",permalink:"/grafast/step-library/standard-steps/setter"},next:{title:"@dataplan/json",permalink:"/grafast/step-library/dataplan-json/"}},l={},p=[{value:"Single dependency version",id:"single-dependency-version",level:2},{value:"Example",id:"example",level:3},{value:"Dependency-free version",id:"dependency-free-version",level:2},{value:"Example",id:"example-1",level:3},{value:"Multiple dependencies version",id:"multiple-dependencies-version",level:2},{value:"Example",id:"example-2",level:3}],c={toc:p},d="wrapper";function u(e){let{components:t,...n}=e;return(0,r.kt)(d,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"sideeffect"},"sideEffect"),(0,r.kt)("p",null,"Takes the input step (or array of steps, or nothing) as the first argument, a\ncallback as the second argument, and returns a step that represents the result\nof feeding each value (or array of values, or nothing) through the given\ncallback."),(0,r.kt)("p",null,"The callback is expected to have a side effect (change data or state on the\nbackend), if your callback doesn't have any side effects then consider using\n",(0,r.kt)("a",{parentName:"p",href:"/grafast/step-library/standard-steps/lambda"},(0,r.kt)("inlineCode",{parentName:"a"},"lambda"))," instead, it has a very\nsimilar API."),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Side effects, according to the GraphQL spec, are only expected to occur in the\nroot selection set of a GraphQL mutation operation (i.e. on the fields of the\nmutation operation root type), similarly Gra",(0,r.kt)("em",{parentName:"p"},"fast")," only expects side effects\nhere and side effects in other locations in the plan may have unexpected\nrepercussions.")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sideEffect")," does not perform batching; it is only intended for performing\nmutations, and mutations rarely batch."),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"Almost any step can be made to be treated as having side effects by setting\n",(0,r.kt)("inlineCode",{parentName:"p"},"$step.hasSideEffects = true"),", so if you require batching in your mutations\nconsider using an alternative step, such as\n",(0,r.kt)("a",{parentName:"p",href:"/grafast/step-library/standard-steps/loadOne"},(0,r.kt)("inlineCode",{parentName:"a"},"loadOne()"))," and explicitly\nmarking it as having side effects:"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const $random = loadOne(list([$min, $max]), (tuples) =>\n  tuples.map(([min, max]) => min + Math.floor(Math.random() * (max - min + 1))),\n);\n$random.hasSideEffects = true;\n\nreturn $random;\n"))),(0,r.kt)("h2",{id:"single-dependency-version"},"Single dependency version"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"function sideEffect<T, R>(\n  $input: ExecutableStep<T>,\n  callback: (input: T) => R | Promise<R>,\n): ExecutableStep<R>;\n")),(0,r.kt)("h3",{id:"example"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'const $logout = context().get("logout");\nsideEffect($logout, (logout) => logout());\n')),(0,r.kt)("h2",{id:"dependency-free-version"},"Dependency-free version"),(0,r.kt)("p",null,"If your callback doesn't need any input then you can pass ",(0,r.kt)("inlineCode",{parentName:"p"},"null")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"undefined"),"\ninstead of a step."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"function sideEffect<R>(\n  $input: null | undefined,\n  callback: () => R | Promise<R>,\n): ExecutableStep<R>;\n")),(0,r.kt)("h3",{id:"example-1"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"sideEffect(null, () => console.log(new Date().toISOString()));\n")),(0,r.kt)("h2",{id:"multiple-dependencies-version"},"Multiple dependencies version"),(0,r.kt)("p",null,"If you need to pass multiple steps, you can use the\n",(0,r.kt)("a",{parentName:"p",href:"/grafast/step-library/standard-steps/list"},(0,r.kt)("inlineCode",{parentName:"a"},"list()"))," step to do so:\n",(0,r.kt)("inlineCode",{parentName:"p"},"sideEffect(list([$a, $b, $c]), ([a, b, c]) => doSomethingWith(a, b, c))"),"."),(0,r.kt)("p",null,"If you'd prefer to save a few characters you can pass the array of steps\ndirectly and we'll automatically wrap it in ",(0,r.kt)("inlineCode",{parentName:"p"},"list()")," for you:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"function sideEffect<Tuple extends [...any[]], R>(\n  // i.e. $input: ExecutableStep[],\n  $input: { [Index in keyof Tuple]: ExecutableStep<Tuple[Index]> },\n  callback: (input: Tuple) => R | Promise<R>,\n): ExecutableStep<R>;\n")),(0,r.kt)("h3",{id:"example-2"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"sideEffect([$login, $username, $password], ([login, username, password]) =>\n  login(username, password),\n);\n")))}u.isMDXComponent=!0}}]);