"use strict";(self.webpackChunk_localrepo_grafast_website=self.webpackChunk_localrepo_grafast_website||[]).push([[8132],{30876:(e,r,t)=>{t.d(r,{Zo:()=>c,kt:()=>f});var n=t(2784);function a(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function s(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function o(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?s(Object(t),!0).forEach((function(r){a(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function i(e,r){if(null==e)return{};var t,n,a=function(e,r){if(null==e)return{};var t,n,a={},s=Object.keys(e);for(n=0;n<s.length;n++)t=s[n],r.indexOf(t)>=0||(a[t]=e[t]);return a}(e,r);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)t=s[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=n.createContext({}),p=function(e){var r=n.useContext(l),t=r;return e&&(t="function"==typeof e?e(r):o(o({},r),e)),t},c=function(e){var r=p(e.components);return n.createElement(l.Provider,{value:r},e.children)},u="mdxType",h={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},d=n.forwardRef((function(e,r){var t=e.components,a=e.mdxType,s=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=p(t),d=a,f=u["".concat(l,".").concat(d)]||u[d]||h[d]||s;return t?n.createElement(f,o(o({ref:r},c),{},{components:t})):n.createElement(f,o({ref:r},c))}));function f(e,r){var t=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var s=t.length,o=new Array(s);o[0]=d;var i={};for(var l in r)hasOwnProperty.call(r,l)&&(i[l]=r[l]);i.originalType=e,i[u]="string"==typeof e?e:a,o[1]=i;for(var p=2;p<s;p++)o[p]=t[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,t)}d.displayName="MDXCreateElement"},73436:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>s,metadata:()=>i,toc:()=>p});var n=t(7896),a=(t(2784),t(30876));const s={sidebar_position:1},o="Grafserv Introduction",i={unversionedId:"index",id:"index",title:"Grafserv Introduction",description:"Grafserv - an incredibly fast GraphQL server for Node.js powered by",source:"@site/grafserv/index.md",sourceDirName:".",slug:"/",permalink:"/grafserv/",draft:!1,editUrl:"https://github.com/graphile/crystal/tree/main/grafast/website/grafserv/index.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",next:{title:"Servers",permalink:"/grafserv/servers/"}},l={},p=[{value:"Usage",id:"usage",level:2},{value:"serv.release()",id:"servrelease",level:3},{value:"serv.onRelease(cb)",id:"servonreleasecb",level:3},{value:"serv.setSchema(newSchema)",id:"servsetschemanewschema",level:3},{value:"serv.setPreset(newPreset)",id:"servsetpresetnewpreset",level:3},{value:"serv.getSchema()",id:"servgetschema",level:3},{value:"serv.getPreset()",id:"servgetpreset",level:3}],c={toc:p},u="wrapper";function h(e){let{components:r,...t}=e;return(0,a.kt)(u,(0,n.Z)({},c,t,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"grafserv-introduction"},"Grafserv Introduction"),(0,a.kt)("p",null,"Grafserv - an incredibly fast GraphQL server for Node.js powered by\n",(0,a.kt)("a",{parentName:"p",href:"/grafast/"},"Gra",(0,a.kt)("em",{parentName:"a"},"fast")),"."),(0,a.kt)("h2",{id:"usage"},"Usage"),(0,a.kt)("p",null,"Grafserv supports many different servers, and because each server is different\neach has their own entrypoint, e.g. ",(0,a.kt)("inlineCode",{parentName:"p"},"grafserv/node")," for the Node.js HTTP server\nor ",(0,a.kt)("inlineCode",{parentName:"p"},"grafserv/express/v4")," for Express v4. Generally you import the ",(0,a.kt)("inlineCode",{parentName:"p"},"grafserv"),"\nfunction from the relevant entrypoint for your server of choice and then create\nan instance:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const serv = grafserv({ schema, preset });\n")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"grafserv")," is passed the GraphQL schema to use (if it's available, otherwise\npassing either null or a promise is also acceptable) and a ",(0,a.kt)("inlineCode",{parentName:"p"},"graphile-config"),"\npreset - i.e. your configuration. The preset can be an empty object, but here's\na bigger (but not exhaustive) example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'const preset = {\n  grafserv: {\n    port: 5678,\n    host: "0.0.0.0",\n    dangerouslyAllowAllCORSRequests: false,\n    graphqlPath: "/graphql",\n    eventStreamPath: "/graphql/stream",\n    graphqlOverGET: true,\n    graphiql: true,\n    graphiqlPath: "/",\n    websockets: true,\n    maxRequestLength: 100000,\n  },\n};\n')),(0,a.kt)("p",null,"Calling ",(0,a.kt)("inlineCode",{parentName:"p"},"grafserv")," will return an instance; this instance will have a number of\nhelpers on it, including helpers specific to integrating it with your framework\nof choice. For servers that operate on a middleware basis this is typically\n",(0,a.kt)("inlineCode",{parentName:"p"},"serv.addTo(app)")," (which allows registering multiple route handlers), though\ndifferent servers may have different APIs, such as ",(0,a.kt)("inlineCode",{parentName:"p"},"serv.createGraphQLHandler()"),"\nfor Lambda and Next.js."),(0,a.kt)("p",null,"Note: There is little value in Grafserv reimplementing every non-GraphQL concern\nyour server may have, so instead it leans on the ecosystem of your chosen server\nto handle things like compression, rate limits, sessions, cookies, etc. For\nexample, to compress your responses you'd need to use a module like\n",(0,a.kt)("a",{parentName:"p",href:"https://expressjs.com/en/resources/middleware/compression.html"},(0,a.kt)("inlineCode",{parentName:"a"},"compression")),"\nfor Express, ",(0,a.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/koa-compress"},(0,a.kt)("inlineCode",{parentName:"a"},"koa-compress"))," for\nKoa, or ",(0,a.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/@fastify/compress"},(0,a.kt)("inlineCode",{parentName:"a"},"@fastify/compress")),"\nfor Fastify."),(0,a.kt)("h3",{id:"servrelease"},"serv.release()"),(0,a.kt)("p",null,"Releases any resources created by the instance; no further requests should be\nhandled (though currently active requests will be allowed to complete)."),(0,a.kt)("p",null,"// TODO: consider terminating subscriptions or other long-lived things."),(0,a.kt)("h3",{id:"servonreleasecb"},"serv.onRelease(cb)"),(0,a.kt)("p",null,"Adds ",(0,a.kt)("inlineCode",{parentName:"p"},"cb")," to the list of callbacks to be called when the server is released;\nuseful for releasing resources you created only for the server. Callbacks will\nbe called in reverse order that they were added."),(0,a.kt)("h3",{id:"servsetschemanewschema"},"serv.setSchema(newSchema)"),(0,a.kt)("p",null,'Replaces the schema to use for future requests (currently active requests are\nunaffected) - this is primarily used for "watch" mode.'),(0,a.kt)("h3",{id:"servsetpresetnewpreset"},"serv.setPreset(newPreset)"),(0,a.kt)("p",null,'Replaces the config to use for future requests (currently active requests are\nunaffected) - this is primarily used for "watch" mode. Note that certain\nconfiguration changes might not be reflected by certain servers until a restart.'),(0,a.kt)("h3",{id:"servgetschema"},"serv.getSchema()"),(0,a.kt)("p",null,"Returns either the GraphQL schema that is currently in use, or a promise to the\nsame."),(0,a.kt)("h3",{id:"servgetpreset"},"serv.getPreset()"),(0,a.kt)("p",null,"Returns the resolved ",(0,a.kt)("inlineCode",{parentName:"p"},"graphile-config")," preset that is currently in use."))}h.isMDXComponent=!0}}]);