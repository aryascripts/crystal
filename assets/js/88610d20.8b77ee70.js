"use strict";(self.webpackChunk_localrepo_postgraphile_website=self.webpackChunk_localrepo_postgraphile_website||[]).push([[799],{30876:(e,n,t)=>{t.d(n,{Zo:()=>s,kt:()=>g});var r=t(2784);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var p=r.createContext({}),c=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},s=function(e){var n=c(e.components);return r.createElement(p.Provider,{value:n},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,p=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),u=c(t),m=i,g=u["".concat(p,".").concat(m)]||u[m]||d[m]||a;return t?r.createElement(g,o(o({ref:n},s),{},{components:t})):r.createElement(g,o({ref:n},s))}));function g(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,o=new Array(a);o[0]=m;var l={};for(var p in n)hasOwnProperty.call(n,p)&&(l[p]=n[p]);l.originalType=e,l[u]="string"==typeof e?e:i,o[1]=l;for(var c=2;c<a;c++)o[c]=t[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},88718:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var r=t(7896),i=(t(2784),t(30876));const a={title:"makeAddInflectorsPlugin"},o="No makeAddInflectorsPlugin",l={unversionedId:"migrating-from-v4/make-add-inflectors-plugin",id:"migrating-from-v4/make-add-inflectors-plugin",title:"makeAddInflectorsPlugin",description:"makeAddInflectorsPlugin no longer exists; the new plugin system makes it a",source:"@site/postgraphile/migrating-from-v4/make-add-inflectors-plugin.md",sourceDirName:"migrating-from-v4",slug:"/migrating-from-v4/make-add-inflectors-plugin",permalink:"/postgraphile/next/migrating-from-v4/make-add-inflectors-plugin",draft:!1,editUrl:"https://github.com/graphile/crystal/tree/main/postgraphile/website/postgraphile/migrating-from-v4/make-add-inflectors-plugin.md",tags:[],version:"current",frontMatter:{title:"makeAddInflectorsPlugin"},sidebar:"docs",previous:{title:"makeWrapResolversPlugin",permalink:"/postgraphile/next/migrating-from-v4/make-wrap-resolvers-plugin"},next:{title:"makeExtendSchemaPlugin",permalink:"/postgraphile/next/migrating-from-v4/make-extend-schema-plugin"}},p={},c=[{value:"Replacing an inflector",id:"replacing-an-inflector",level:2},{value:"Adding a new inflector",id:"adding-a-new-inflector",level:2}],s={toc:c},u="wrapper";function d(e){let{components:n,...t}=e;return(0,i.kt)(u,(0,r.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"no-makeaddinflectorsplugin"},"No makeAddInflectorsPlugin"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"makeAddInflectorsPlugin")," no longer exists; the new plugin system makes it a\nlittle easier to write it yourself so the abstraction is no longer required."),(0,i.kt)("h2",{id:"replacing-an-inflector"},"Replacing an inflector"),(0,i.kt)("p",null,"Set ",(0,i.kt)("inlineCode",{parentName:"p"},"inflection.replace.inflectorName")," in a plugin to a new inflector function;\nthe function will be passed the previous inflector function as the first\nargument (",(0,i.kt)("inlineCode",{parentName:"p"},"null")," if there wasn't one), the resolved ",(0,i.kt)("inlineCode",{parentName:"p"},"GraphileConfig")," preset as the\nsecond argument, and any data passed to it as the remaining arguments."),(0,i.kt)("p",null,"This following plugin replaces the ",(0,i.kt)("inlineCode",{parentName:"p"},"builtin")," inflector with one that returns\n",(0,i.kt)("inlineCode",{parentName:"p"},"RootQuery")," instead of ",(0,i.kt)("inlineCode",{parentName:"p"},"Query")," for the root query type:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'// Import types for TypeScript, no need in JS\nimport "graphile-config";\nimport "graphile-build";\nimport "graphile-build-pg";\n\nexport const ReplaceInflectorPlugin: GraphileConfig.Plugin = {\n  // Unique name for your plugin:\n  name: "ReplaceInflectorPlugin",\n  version: "0.0.0",\n\n  inflection: {\n    replace: {\n      builtin(\n        // The previous version of this inflector, the one you\'re replacing\n        previous,\n\n        // The resolved configuration\n        preset,\n\n        // Everything from the 3rd paramater onward are the arguments to this inflector\n        text,\n      ) {\n        if (name === "Query") return "RootQuery";\n        return previous(text);\n      },\n    },\n  },\n};\n')),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"The first two arguments to your replace inflector definition are supplied by the\nGraphile Build system and hidden from calling code, so only arguments from the\nthird onward are supplied by the calling code. For example, a replacement for\nthe ",(0,i.kt)("inlineCode",{parentName:"p"},"builtin")," inflector could be defined as above, but calling code would only\nsupply the third argument:"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-js"},'const text = inflection.builtin("Query");\n'))),(0,i.kt)("h2",{id:"adding-a-new-inflector"},"Adding a new inflector"),(0,i.kt)("p",null,"New inflectors accept the current preset as the first argument and any number of\nadditional arguments after that."),(0,i.kt)("p",null,"In JS, adding a new inflector is straightforward:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'export const MyNewInflectorPlugin: GraphileConfig.Plugin = {\n  name: "MyNewInflectorPlugin",\n  version: "0.0.0",\n  inflection: {\n    add: {\n      myNewInflector(preset, columnName) {\n        return columnName + "Something";\n      },\n    },\n  },\n};\n')),(0,i.kt)("p",null,"In TypeScript, it's somewhat more verbose as we use ",(0,i.kt)("a",{parentName:"p",href:"https://www.typescriptlang.org/docs/handbook/declaration-merging.html"},"declaration merging")," to\nmake other plugins aware of the new inflector:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'// Import types for TypeScript, no need in JS\nimport "graphile-config";\nimport "graphile-build";\nimport "graphile-build-pg";\n\ndeclare global {\n  namespace GraphileBuild {\n    interface Inflection {\n      /**\n       * Add documentation for your inflector here.\n       */\n      enhanced(this: Inflection, columnName: string): string;\n    }\n  }\n}\n\nexport const MyNewInflectorPlugin: GraphileConfig.Plugin = {\n  name: "MyNewInflectorPlugin",\n  version: "0.0.0",\n\n  inflection: {\n    add: {\n      enhanced(preset, columnName) {\n        return columnName + "Enhanced";\n      },\n    },\n  },\n};\n')),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"The first argument to your add inflector definition is supplied by the Graphile\nBuild system and hidden from calling code, so only arguments from the second\nonward are supplied by the calling code. For example, the ",(0,i.kt)("inlineCode",{parentName:"p"},"enhanced")," inflector\ncould be defined as above, but calling code would only supply the second\nargument:"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-js"},'const text = inflection.enhanced("avatarUrl");\n'))))}d.isMDXComponent=!0}}]);