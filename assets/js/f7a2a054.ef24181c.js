"use strict";(self.webpackChunk_localrepo_postgraphile_website=self.webpackChunk_localrepo_postgraphile_website||[]).push([[3524],{30876:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var a=n(2784);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),l=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=l(e.components);return a.createElement(p.Provider,{value:t},e.children)},u="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,p=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),u=l(n),d=r,m=u["".concat(p,".").concat(d)]||u[d]||h[d]||s;return n?a.createElement(m,i(i({ref:t},c),{},{components:n})):a.createElement(m,i({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,i=new Array(s);i[0]=d;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o[u]="string"==typeof e?e:r,i[1]=o;for(var l=2;l<s;l++)i[l]=n[l];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},67036:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>h,frontMatter:()=>s,metadata:()=>o,toc:()=>l});var a=n(7896),r=(n(2784),n(30876));const s={layout:"page",path:"/postgraphile/jwk-verification/",title:"PostGraphile JWT/JWK Verification Quickstart"},i=void 0,o={unversionedId:"jwk-verification",id:"version-4.x/jwk-verification",title:"PostGraphile JWT/JWK Verification Quickstart",description:"This guide is an adaption of the official quickstart tutorial for Node (Express)",source:"@site/versioned_docs/version-4.x/jwk-verification.md",sourceDirName:".",slug:"/jwk-verification",permalink:"/postgraphile/current/jwk-verification",draft:!1,editUrl:"https://github.com/graphile/crystal/tree/main/postgraphile/website/versioned_docs/version-4.x/jwk-verification.md",tags:[],version:"4.x",frontMatter:{layout:"page",path:"/postgraphile/jwk-verification/",title:"PostGraphile JWT/JWK Verification Quickstart"},sidebar:"docs",previous:{title:"PostGraphile JWT Guide",permalink:"/postgraphile/current/jwt-guide"},next:{title:"Default Role",permalink:"/postgraphile/current/default-role"}},p={},l=[{value:"Dependencies",id:"dependencies",level:3},{value:"Prior Knowledge &amp; Context",id:"prior-knowledge--context",level:3},{value:"Getting Started",id:"getting-started",level:2},{value:"Basic Error Handling",id:"basic-error-handling",level:2}],c={toc:l},u="wrapper";function h(e){let{components:t,...n}=e;return(0,r.kt)(u,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"This guide is an adaption of the official quickstart tutorial for Node (Express)\nprovided by\n",(0,r.kt)("a",{parentName:"p",href:"https://auth0.com/docs/quickstart/backend/nodejs/01-authorization"},"Auth0"),". The\ncode illustrates how to intercept and verify a\n",(0,r.kt)("a",{parentName:"p",href:"https://auth0.com/docs/tokens/concepts/jwts"},"JWT Access Token")," via a\n",(0,r.kt)("a",{parentName:"p",href:"https://auth0.com/docs/jwks"},"JWKS (JSON Web Key Set)")," using\n",(0,r.kt)("a",{parentName:"p",href:"https://auth0.com/"},"Auth0"),"."),(0,r.kt)("p",null,"Although this code should work, we make no claims as to its validity or fit for\nproduction use. We disclaim all liability."),(0,r.kt)("h3",{id:"dependencies"},"Dependencies"),(0,r.kt)("p",null,"This guide uses the ",(0,r.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/express"},(0,r.kt)("inlineCode",{parentName:"a"},"express"))," HTTP\nframework and supporting Node packages authored and maintained by Auth0:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/auth0/express-jwt"},(0,r.kt)("inlineCode",{parentName:"a"},"express-jwt"))," - ",(0,r.kt)("em",{parentName:"li"},"Middleware that\nvalidates a JWT and copies its contents to ",(0,r.kt)("inlineCode",{parentName:"em"},"req.auth"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/auth0/node-jwks-rsa"},(0,r.kt)("inlineCode",{parentName:"a"},"jwks-rsa"))," - ",(0,r.kt)("em",{parentName:"li"},"A library to retrieve\nRSA public keys from a JWKS (JSON Web Key Set) endpoint"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"yarn add express express-jwt jwks-rsa\n# Or:\nnpm install --save express express-jwt jwks-rsa\n")),(0,r.kt)("h3",{id:"prior-knowledge--context"},"Prior Knowledge & Context"),(0,r.kt)("p",null,"As a developer, the three essential aspects of Auth0 are:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://auth0.com/docs/apis"},(0,r.kt)("em",{parentName:"a"},"APIs"))," and\n",(0,r.kt)("a",{parentName:"li",href:"https://auth0.com/docs/applications"},(0,r.kt)("em",{parentName:"a"},"Applications"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://auth0.com/docs/tokens"},(0,r.kt)("em",{parentName:"a"},"JWT types"))," (e.g. ",(0,r.kt)("em",{parentName:"li"},"ID Token")," vs. ",(0,r.kt)("em",{parentName:"li"},"Access\nToken"),")"),(0,r.kt)("li",{parentName:"ul"},"Authentication and Authorization ",(0,r.kt)("a",{parentName:"li",href:"https://auth0.com/docs/flows"},(0,r.kt)("em",{parentName:"a"},"Flows")))),(0,r.kt)("p",null,"To keep it simple, in this guide we will be dealing with an\n",(0,r.kt)("a",{parentName:"p",href:"https://auth0.com/docs/tokens/overview-access-tokens"},"Access Token")," granted by\nan API which we will need to verify."),(0,r.kt)("h2",{id:"getting-started"},"Getting Started"),(0,r.kt)("p",null,"You will need two values from your Auth0 configuration: The Auth0 ",(0,r.kt)("em",{parentName:"p"},"tenant domain\nname"),", and the API ",(0,r.kt)("em",{parentName:"p"},"identifier.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript",metastring:"{1-2,20,24-25}","{1-2,20,24-25}":!0},'const jwt = require("express-jwt");\nconst jwksRsa = require("jwks-rsa");\n\n// ...\n\n// Authentication middleware. When used, the\n// Access Token must exist and be verified against\n// the Auth0 JSON Web Key Set.\n// On successful verification, the payload of the\n// decrypted Access Token is appended to the\n// request (`req`) as a `user` parameter.\nconst checkJwt = jwt({\n  // Dynamically provide a signing key\n  // based on the `kid` in the header and\n  // the signing keys provided by the JWKS endpoint.\n  secret: jwksRsa.expressJwtSecret({\n    cache: true,\n    rateLimit: true,\n    jwksRequestsPerMinute: 5,\n    jwksUri: `https://YOUR_DOMAIN/.well-known/jwks.json`,\n  }),\n\n  // Validate the audience and the issuer.\n  audience: "YOUR_API_IDENTIFIER",\n  issuer: `https://YOUR_DOMAIN/`,\n  algorithms: ["RS256"],\n});\n')),(0,r.kt)("p",null,"(note: if we were processing an\n",(0,r.kt)("a",{parentName:"p",href:"https://auth0.com/docs/tokens/id-token"},"ID Token")," instead of an Access Token,\nthe ",(0,r.kt)("em",{parentName:"p"},"audience")," would be the ",(0,r.kt)("em",{parentName:"p"},"Client ID")," instead)"),(0,r.kt)("p",null,"Remember that a JWT has\n",(0,r.kt)("a",{parentName:"p",href:"https://jwt.io/introduction/"},"three ",(0,r.kt)("em",{parentName:"a"},"period-separated")," sections"),": header,\npayload, and signature. On successful verification, the payload will be\navailable for us to save inside the PostGraphile request via the\n",(0,r.kt)("a",{parentName:"p",href:"./usage-library/#exposing-http-request-data-to-postgresql"},(0,r.kt)("inlineCode",{parentName:"a"},"pgSettings")),"\nfunction."),(0,r.kt)("p",null,"Let's look at an example payload:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:"{8}","{8}":!0},'{\n  "iss": "https://YOUR_DOMAIN/",\n  "sub": "CLIENT_ID@clients",\n  "aud": "YOUR_API_IDENTIFIER",\n  "iat": 1555808706,\n  "exp": 1555895106,\n  "azp": "CLIENT_ID",\n  "scope": "read:schema", // scopes a.k.a. permissions\n  "gty": "client-credentials"\n}\n')),(0,r.kt)("p",null,"In this example payload, we can see that the only scope the API has made\navailable is ",(0,r.kt)("inlineCode",{parentName:"p"},"read:schema"),". Our user can perform no mutations, nor can they\nperform any queries, they are limited to fetching the schema. Not all tokens\nwill have such simple payloads, but, in this example, the only meaningful data\nis in the ",(0,r.kt)("inlineCode",{parentName:"p"},"scope")," value."),(0,r.kt)("p",null,"Now let's make use of the ",(0,r.kt)("inlineCode",{parentName:"p"},"checkJwt")," middleware function:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript",metastring:"{23-24,28-36}","{23-24,28-36}":!0},'const express = require("express");\nconst { postgraphile } = require("postgraphile");\n\nconst jwt = require("express-jwt");\nconst jwksRsa = require("jwks-rsa");\n\n// ...\n\nconst checkJwt = jwt({\n  secret: jwksRsa.expressJwtSecret({\n    cache: true,\n    rateLimit: true,\n    jwksRequestsPerMinute: 5,\n    jwksUri: `https://YOUR_DOMAIN/.well-known/jwks.json`,\n  }),\n  audience: "YOUR_API_IDENTIFIER",\n  issuer: `https://YOUR_DOMAIN/`,\n  algorithms: ["RS256"],\n});\n\nconst app = express();\n\n// Apply checkJwt to our graphql endpoint\napp.use("/graphql", checkJwt);\n\napp.use(\n  postgraphile(process.env.DATABASE_URL, process.env.DB_SCHEMA, {\n    pgSettings: (req) => {\n      const settings = {};\n      if (req.auth) {\n        settings["user.permissions"] = req.auth.scopes;\n      }\n      return settings;\n    },\n    // any other PostGraphile options go here\n  }),\n);\n')),(0,r.kt)("p",null,"PostGraphile applies everything returned by\n",(0,r.kt)("a",{parentName:"p",href:"./usage-library/#pgsettings-function"},"pgSettings")," to the\n",(0,r.kt)("a",{parentName:"p",href:"https://www.postgresql.org/docs/current/functions-admin.html#FUNCTIONS-ADMIN-SET"},"current session"),"\nwith ",(0,r.kt)("inlineCode",{parentName:"p"},"set_config($key, $value, true)"),". So inside Postgres we can read the\ncurrent value of ",(0,r.kt)("inlineCode",{parentName:"p"},"user.permissions")," by\n",(0,r.kt)("inlineCode",{parentName:"p"},"select current_setting('user.permissions', true)::text;"),"."),(0,r.kt)("h2",{id:"basic-error-handling"},"Basic Error Handling"),(0,r.kt)("p",null,"By default, if there is an error in the JWT verification process, the\n",(0,r.kt)("inlineCode",{parentName:"p"},"express-jwt")," package will send a 401 status with an HTML-formatted error\nmessage as a response. Instead, we want to follow the pattern of PostGraphile\nand return errors properly formatted in a\n",(0,r.kt)("a",{parentName:"p",href:"http://graphql.github.io/graphql-spec/June2018/#sec-Errors"},"GraphQL-compliant"),"\nJSON response."),(0,r.kt)("p",null,"Let's create a basic Express middleware for handling the errors which our\n",(0,r.kt)("inlineCode",{parentName:"p"},"checkJwt")," function will throw:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'const authErrors = (err, req, res, next) => {\n  if (err.name === "UnauthorizedError") {\n    console.log(err); // You will still want to log the error...\n    // but we don\'t want to send back internal operation details\n    // like a stack trace to the client!\n    res.status(err.status).json({ errors: [{ message: err.message }] });\n    res.end();\n  }\n};\n\n// Apply error handling to the graphql endpoint\napp.use("/graphql", authErrors);\n')),(0,r.kt)("p",null,"So, now, for example, if someone tries to connect to our GraphQL service without\nany token at all, we still get a 401 status, but with the appropriate and\nsuccinct response:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "errors": [\n    {\n      "message": "No authorization token was found"\n    }\n  ]\n}\n')),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"This article was written by ",(0,r.kt)("a",{parentName:"em",href:"http://gitlab.com/benjamin-rood"},"BR"),".")))}h.isMDXComponent=!0}}]);