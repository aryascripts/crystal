"use strict";(self.webpackChunk_localrepo_postgraphile_website=self.webpackChunk_localrepo_postgraphile_website||[]).push([[7613],{30876:(e,t,a)=>{a.d(t,{Zo:()=>m,kt:()=>d});var n=a(2784);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),p=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},m=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},h="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),h=p(a),c=r,d=h["".concat(l,".").concat(c)]||h[c]||u[c]||o;return a?n.createElement(d,i(i({ref:t},m),{},{components:a})):n.createElement(d,i({ref:t},m))}));function d(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,i=new Array(o);i[0]=c;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[h]="string"==typeof e?e:r,i[1]=s;for(var p=2;p<o;p++)i[p]=a[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}c.displayName="MDXCreateElement"},42132:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var n=a(7896),r=(a(2784),a(30876));const o={title:"PostGraphile V5 alpha is here!",description:"PostGraphile Version 5 is now ready to run in some production environments!",slug:"2023-04-26-version-5-alpha",authors:[{name:"Benjie",title:"Creator of PostGraphile",url:"https://github.com/Benjie",image_url:"https://github.com/Benjie.png"},{name:"Jem",title:"\u201cI wear many hats\u201d",url:"https://fosstodon.org/@jem",image_url:"https://github.com/jemgillam.png"}],tags:["Alpha"],hide_table_of_contents:!1},i=void 0,s={permalink:"/news/2023-04-26-version-5-alpha",source:"@site/news/2023-04-26-alpha-release.md",title:"PostGraphile V5 alpha is here!",description:"PostGraphile Version 5 is now ready to run in some production environments!",date:"2023-04-26T00:00:00.000Z",formattedDate:"April 26, 2023",tags:[{label:"Alpha",permalink:"/news/tags/alpha"}],readingTime:6.835,hasTruncateMarker:!0,authors:[{name:"Benjie",title:"Creator of PostGraphile",url:"https://github.com/Benjie",image_url:"https://github.com/Benjie.png",imageURL:"https://github.com/Benjie.png"},{name:"Jem",title:"\u201cI wear many hats\u201d",url:"https://fosstodon.org/@jem",image_url:"https://github.com/jemgillam.png",imageURL:"https://github.com/jemgillam.png"}],frontMatter:{title:"PostGraphile V5 alpha is here!",description:"PostGraphile Version 5 is now ready to run in some production environments!",slug:"2023-04-26-version-5-alpha",authors:[{name:"Benjie",title:"Creator of PostGraphile",url:"https://github.com/Benjie",image_url:"https://github.com/Benjie.png",imageURL:"https://github.com/Benjie.png"},{name:"Jem",title:"\u201cI wear many hats\u201d",url:"https://fosstodon.org/@jem",image_url:"https://github.com/jemgillam.png",imageURL:"https://github.com/jemgillam.png"}],tags:["Alpha"],hide_table_of_contents:!1},prevItem:{title:"PostGraphile V5 public beta \u2014 get involved!",permalink:"/news/2023-08-03-version-5-beta"}},l={authorsImageUrls:[void 0,void 0]},p=[{value:"Now production ready\u2026 for some environments",id:"now-production-ready-for-some-environments",level:3},{value:"What\u2019s new in Version 5?",id:"whats-new-in-version-5",level:3}],m={toc:p},h="wrapper";function u(e){let{components:t,...o}=e;return(0,r.kt)(h,(0,n.Z)({},m,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h3",{id:"now-production-ready-for-some-environments"},"Now production ready\u2026 for some environments"),(0,r.kt)("p",null,"January marked a big milestone for PostGraphile Version 5, when it began the prealpha stage - where early adopters could install the packages from npm (if they knew the secret \ud83d\ude09) and easily test V5 within their current stacks. Up until that point, it was only possible to run the project by cloning the repository and building it yourself - not ideal for serious testing!"),(0,r.kt)("p",null,"Throughout the prealpha phase we smoothed the edges, closed gaps, tidied APIs, discovered which pieces of terminology worked and which did not, and did a lot of API restructuring and stabilization."),(0,r.kt)("p",null,"With thanks to everyone in the V5 testing community - and a special shout out for the excellent and continued feedback from our sponsors dfg, hov, James, Josiah and the Netflix team, mattste, Simon, and Timo - we are in a much better shape three months on. We now have a ",(0,r.kt)("a",{parentName:"p",href:"/postgraphile/next/migrating-from-v4"},"detailed migration guide"),", ",(0,r.kt)("a",{parentName:"p",href:"/postgraphile/next"},"updated docs"),", an enhanced developer experience and much improved backwards compatibility!"),(0,r.kt)("h3",{id:"whats-new-in-version-5"},"What\u2019s new in Version 5?"),(0,r.kt)("p",null,"Our main aim in V5 was to replace the cumbersome lookahead system with something much more pleasant and powerful. To serve this need we iterated and iterated, and ultimately invented Gra",(0,r.kt)("em",{parentName:"p"},"fast"),": a new planning and execution engine for GraphQL (see our public video introduction ",(0,r.kt)("a",{parentName:"p",href:"https://youtu.be/H26uBe_lLag"},"on YouTube"),"). Gra",(0,r.kt)("em",{parentName:"p"},"fast")," uses a declarative planning system which brings with it a new, holistic approach to executing GraphQL queries. For you, this means simpler abstractions, better performance, and code which is easier to read and maintain."),(0,r.kt)("p",null,"Gra",(0,r.kt)("em",{parentName:"p"},"fast")," even generates a plan diagram showing what steps are necessary to execute your operation and how the data flows between each of the steps, which is a massive boon to debugging both for you, and for us!"),(0,r.kt)("figure",null,(0,r.kt)("p",null,(0,r.kt)("a",{target:"_blank",href:a(14181).Z},(0,r.kt)("img",{alt:"A Grafast plan diagram for an AllPosts query",src:a(31967).Z,width:"2024",height:"1832"}))),(0,r.kt)("figcaption",null,(0,r.kt)("p",null,"An autogenerated Gra",(0,r.kt)("em",{parentName:"p"},"fast")," plan diagram for the displayed GraphQL query. Plan diagrams detail the steps required to complete a GraphQL request and show how the data flows between them. See ",(0,r.kt)("a",{parentName:"p",href:"https://grafast.org/grafast/plan-diagrams"},'"Plan Diagrams"')," in the Gra",(0,r.kt)("em",{parentName:"p"},"fast")," documentation for more details."))))}u.isMDXComponent=!0},14181:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/files/2023-04-26-mermaid-diagram-24e7d632d46178a99b3c8063d64f5e54.png"},31967:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/2023-04-26-mermaid-diagram-24e7d632d46178a99b3c8063d64f5e54.png"}}]);