"use strict";(self.webpackChunk_localrepo_postgraphile_website=self.webpackChunk_localrepo_postgraphile_website||[]).push([[5483],{30876:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var r=n(2784);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},c="mdxType",g={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),c=p(n),m=o,h=c["".concat(l,".").concat(m)]||c[m]||g[m]||a;return n?r.createElement(h,i(i({ref:t},u),{},{components:n})):r.createElement(h,i({ref:t},u))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[c]="string"==typeof e?e:o,i[1]=s;for(var p=2;p<a;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},38369:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>g,frontMatter:()=>a,metadata:()=>s,toc:()=>p});var r=n(7896),o=(n(2784),n(30876));const a={layout:"page",path:"/postgraphile/plugins/",title:"Server plugins"},i=void 0,s={unversionedId:"plugins",id:"plugins",title:"Server plugins",description:"_NOTE: This page relates to changing how the PostGraphile HTTP server",source:"@site/postgraphile/plugins.md",sourceDirName:".",slug:"/plugins",permalink:"/postgraphile/next/plugins",draft:!1,editUrl:"https://github.com/graphile/crystal/tree/main/postgraphile/website/postgraphile/plugins.md",tags:[],version:"current",frontMatter:{layout:"page",path:"/postgraphile/plugins/",title:"Server plugins"},sidebar:"docs",previous:{title:"PostGraphile community plugins",permalink:"/postgraphile/next/community-plugins"},next:{title:"PostgreSQL schema design",permalink:"/postgraphile/next/postgresql-schema-design"}},l={},p=[{value:"Customizing Ruru&#39;s title:",id:"customizing-rurus-title",level:2},{value:"Manipulating the request body",id:"manipulating-the-request-body",level:2}],u={toc:p},c="wrapper";function g(e){let{components:t,...n}=e;return(0,o.kt)(c,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"NOTE: This page relates to changing how the PostGraphile HTTP server\n(Grafserv) and other non-schema concerns work. If you're instead looking to\nchange the generated GraphQL schema (e.g. to add fields or types), see ",(0,o.kt)("a",{parentName:"em",href:"./extending/"},"Schema\nPlugins"),".")),(0,o.kt)("p",null,"In addition to the ",(0,o.kt)("a",{parentName:"p",href:"./extending/"},"Graphile Build plugin system")," which builds\nthe GraphQL schema in PostGraphile, PostGraphile also has a plugin system for\nthe CLI and web layer. Thanks to ",(0,o.kt)("inlineCode",{parentName:"p"},"graphile-config"),", this now uses the same\nplugin system, just different scopes."),(0,o.kt)("p",null,"Currently these scopes are undocumented, so here's some examples"),(0,o.kt)("h2",{id:"customizing-rurus-title"},"Customizing Ruru's title:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'function makeRuruTitlePlugin(title: string): GraphileConfig.Plugin {\n  return {\n    name: "RuruTitlePlugin",\n    version: "0.0.0",\n\n    grafserv: {\n      hooks: {\n        ruruHTMLParts(_info, parts, extra) {\n          parts.titleTag = `<title>${escapeHTML(\n            title + " | " + extra.request.getHeader("host"),\n          )}</title>`;\n        },\n      },\n    },\n  };\n}\n')),(0,o.kt)("h2",{id:"manipulating-the-request-body"},"Manipulating the request body"),(0,o.kt)("p",null,"For example you might want to implement a plugin where you pass only the\noperation name (not the full document) and have the server populate the\ndocument by looking up the operation name."),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"This is purely for demonstration of the plugin API, you should not use this\nplugin! Instead, consider the ",(0,o.kt)("inlineCode",{parentName:"p"},"@grafserv/persisted")," module (which uses the same\nhook).")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'import { SafeError } from "grafast";\n\nconst documents = Object.assign(Object.create(null), {\n  QueryName: `query QueryName { __typename }`,\n  WhoAmI: `query WhoAmI { currentUser { name } }`,\n  CreatePost: `mutation CreatePost($input: CreatePostInput!) { createPost(input: $input) { post { id title } } }`,\n});\n\nexport const QueryByNamePlugin: GraphileConfig.Plugin = {\n  name: "QueryByNamePlugin",\n  description: "Only specify the query name and the query will be populated",\n  version,\n\n  grafserv: {\n    hooks: {\n      processGraphQLRequestBody(info, event) {\n        const { body } = event;\n        const document = documents[body.id];\n        if (!document) {\n          throw new SafeError(\n            `QueryByNamePlugin couldn\'t find query \'${body.id}\'`,\n            { statusCode: 400 },\n          );\n        } else {\n          body.query = document;\n        }\n      },\n    },\n  },\n};\n')),(0,o.kt)("p",null,"If you need help writing your own PostGraphile server plugins,\n",(0,o.kt)("a",{parentName:"p",href:"http://discord.gg/graphile"},"ask in #help-and-support in our Discord chat"),"."))}g.isMDXComponent=!0}}]);