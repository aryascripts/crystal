"use strict";(self.webpackChunk_localrepo_postgraphile_website=self.webpackChunk_localrepo_postgraphile_website||[]).push([[1388],{30876:(e,n,t)=>{t.d(n,{Zo:()=>s,kt:()=>f});var r=t(2784);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var p=r.createContext({}),c=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},s=function(e){var n=c(e.components);return r.createElement(p.Provider,{value:n},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,p=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),u=c(t),m=i,f=u["".concat(p,".").concat(m)]||u[m]||d[m]||a;return t?r.createElement(f,l(l({ref:n},s),{},{components:t})):r.createElement(f,l({ref:n},s))}));function f(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,l=new Array(a);l[0]=m;var o={};for(var p in n)hasOwnProperty.call(n,p)&&(o[p]=n[p]);o.originalType=e,o[u]="string"==typeof e?e:i,l[1]=o;for(var c=2;c<a;c++)l[c]=t[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},73357:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>l,default:()=>d,frontMatter:()=>a,metadata:()=>o,toc:()=>c});var r=t(7896),i=(t(2784),t(30876));const a={layout:"page",path:"/postgraphile/make-add-inflectors-plugin/",title:"Adding and replacing inflectors"},l=void 0,o={unversionedId:"make-add-inflectors-plugin",id:"make-add-inflectors-plugin",title:"Adding and replacing inflectors",description:"Inflection relates to naming things; please see the [inflection",source:"@site/postgraphile/make-add-inflectors-plugin.md",sourceDirName:".",slug:"/make-add-inflectors-plugin",permalink:"/postgraphile/next/make-add-inflectors-plugin",draft:!1,editUrl:"https://github.com/graphile/crystal/tree/main/postgraphile/website/postgraphile/make-add-inflectors-plugin.md",tags:[],version:"current",frontMatter:{layout:"page",path:"/postgraphile/make-add-inflectors-plugin/",title:"Adding and replacing inflectors"},sidebar:"docs",previous:{title:"GraphQL Schema Plugins",permalink:"/postgraphile/next/extending"},next:{title:"makeChangeNullabilityPlugin",permalink:"/postgraphile/next/make-change-nullability-plugin"}},p={},c=[{value:"Replacing an inflector",id:"replacing-an-inflector",level:2},{value:"Example 1",id:"example-1",level:3},{value:"Example 2",id:"example-2",level:3},{value:"Adding a new inflector",id:"adding-a-new-inflector",level:2}],s={toc:c},u="wrapper";function d(e){let{components:n,...t}=e;return(0,i.kt)(u,(0,r.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Inflection relates to naming things; please see the ",(0,i.kt)("a",{parentName:"p",href:"./inflection/"},"inflection\narticle")," for more information on inflection in PostGraphile."),(0,i.kt)("p",null,"In V4 of PostGraphile we had ",(0,i.kt)("inlineCode",{parentName:"p"},"makeAddInflectorsPlugin"),", but in V5 this is no\nlonger needed since inflection is now a first class feature of the plugin\nsystem. Writing a plugin to add or replace inflectors is relatively\nstraightforward:"),(0,i.kt)("h2",{id:"replacing-an-inflector"},"Replacing an inflector"),(0,i.kt)("p",null,"Replacing an inflector is slightly easier than adding a new one because there's\nno need to define the TypeScript types (you just use the existing types); so\nwe'll start there."),(0,i.kt)("p",null,"Replacement inflectors are added via a plugin, using the\n",(0,i.kt)("inlineCode",{parentName:"p"},"inflection.replace.<inflectorName>")," property, which should be set to a\nfunction. This function accepts three or more parameters:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"The previous version of the inflector, for delegation, or ",(0,i.kt)("inlineCode",{parentName:"li"},"null")," if there wasn't previously an inflector with this name"),(0,i.kt)("li",{parentName:"ol"},"The resolved ",(0,i.kt)("inlineCode",{parentName:"li"},"graphile-config")," preset that the user is using"),(0,i.kt)("li",{parentName:"ol"},"All remaining parameters are the inflector's inputs, from which a name should be derived")),(0,i.kt)("h3",{id:"example-1"},"Example 1"),(0,i.kt)("p",null,"This following plugin replaces the ",(0,i.kt)("inlineCode",{parentName:"p"},"builtin")," inflector with one that returns\n",(0,i.kt)("inlineCode",{parentName:"p"},"RootQuery")," instead of ",(0,i.kt)("inlineCode",{parentName:"p"},"Query")," for the root query type:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'// Import types for TypeScript, no need in JS\nimport "graphile-config";\nimport "graphile-build";\nimport "graphile-build-pg";\n\nexport const ReplaceInflectorPlugin: GraphileConfig.Plugin = {\n  // Unique name for your plugin:\n  name: "ReplaceInflectorPlugin",\n  version: "0.0.0",\n\n  inflection: {\n    replace: {\n      builtin(\n        // The previous version of this inflector, the one you\'re replacing\n        previous,\n\n        // The resolved configuration\n        preset,\n\n        // Everything from the 3rd paramater onward are the arguments to this inflector\n        text,\n      ) {\n        if (name === "Query") return "RootQuery";\n        return previous(text);\n      },\n    },\n  },\n};\n')),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"The first two arguments to your replace inflector definition are supplied by the\nGraphile Build system and hidden from calling code, so only arguments from the\nthird onward are supplied by the calling code. For example, a replacement for\nthe ",(0,i.kt)("inlineCode",{parentName:"p"},"builtin")," inflector could be defined as above, but calling code would only\nsupply the third argument:"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'const text = inflection.builtin("Query");\n'))),(0,i.kt)("h3",{id:"example-2"},"Example 2"),(0,i.kt)("p",null,"If you want ",(0,i.kt)("inlineCode",{parentName:"p"},"*Patch")," types to instead be called ",(0,i.kt)("inlineCode",{parentName:"p"},"*ChangeSet")," you could make a\nplugin such as this one:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'// Import types for TypeScript, no need in JS\nimport "graphile-config";\nimport "graphile-build";\nimport "graphile-build-pg";\n\nexport const ReplaceInflectorPlugin: GraphileConfig.Plugin = {\n  // Unique name for your plugin:\n  name: "ReplaceInflectorPlugin",\n  version: "0.0.0",\n\n  inflection: {\n    replace: {\n      patchType(previous, preset, typeName) {\n        return this.upperCamelCase(`${typeName}-change-set`);\n      },\n    },\n  },\n};\n')),(0,i.kt)("h2",{id:"adding-a-new-inflector"},"Adding a new inflector"),(0,i.kt)("p",null,"Adding a new inflector is very much like adding a replacement inflector, with\nthe following differences:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"No ",(0,i.kt)("inlineCode",{parentName:"li"},"previous")," inflector existed, so the first argument is omitted"),(0,i.kt)("li",{parentName:"ol"},"The types won't already exist, so you must declare them yourself, via the ",(0,i.kt)("inlineCode",{parentName:"li"},"global.GraphileBuild.Inflection")," interface")),(0,i.kt)("p",null,"In JS, adding a new inflector is straightforward:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'export const MyNewInflectorPlugin: GraphileConfig.Plugin = {\n  name: "MyNewInflectorPlugin",\n  version: "0.0.0",\n  inflection: {\n    add: {\n      enhanced(preset, columnName) {\n        return columnName + "Enhanced";\n      },\n    },\n  },\n};\n')),(0,i.kt)("p",null,"In TypeScript, it's somewhat more verbose as we use ",(0,i.kt)("a",{parentName:"p",href:"https://www.typescriptlang.org/docs/handbook/declaration-merging.html"},"declaration merging")," to\nmake other plugins aware of the new inflector:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'// Import types for TypeScript, no need in JS\nimport "graphile-config";\nimport "graphile-build";\nimport "graphile-build-pg";\n\ndeclare global {\n  namespace GraphileBuild {\n    interface Inflection {\n      /**\n       * Add documentation for your inflector here.\n       */\n      enhanced(this: Inflection, columnName: string): string;\n    }\n  }\n}\n\nexport const MyNewInflectorPlugin: GraphileConfig.Plugin = {\n  name: "MyNewInflectorPlugin",\n  version: "0.0.0",\n\n  inflection: {\n    add: {\n      enhanced(preset, columnName) {\n        return columnName + "Enhanced";\n      },\n    },\n  },\n};\n')),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"The first argument to your add inflector definition is supplied by the Graphile\nBuild system and hidden from calling code, so only arguments from the second\nonward are supplied by the calling code. For example, the ",(0,i.kt)("inlineCode",{parentName:"p"},"enhanced")," inflector\ncould be defined as above, but calling code would only supply the second\nargument:"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-js"},'const text = inflection.enhanced("avatarUrl");\n'))))}d.isMDXComponent=!0}}]);