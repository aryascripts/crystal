"use strict";(self.webpackChunk_localrepo_grafast_website=self.webpackChunk_localrepo_grafast_website||[]).push([[383],{30876:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>f});var n=r(2784);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function s(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?s(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},s=Object.keys(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),p=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},u=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,s=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),c=p(r),h=a,f=c["".concat(l,".").concat(h)]||c[h]||m[h]||s;return r?n.createElement(f,o(o({ref:t},u),{},{components:r})):n.createElement(f,o({ref:t},u))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=r.length,o=new Array(s);o[0]=h;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[c]="string"==typeof e?e:a,o[1]=i;for(var p=2;p<s;p++)o[p]=r[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}h.displayName="MDXCreateElement"},65612:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>m,frontMatter:()=>s,metadata:()=>i,toc:()=>p});var n=r(7896),a=(r(2784),r(30876));const s={sidebar_position:4},o="Servers",i={unversionedId:"servers",id:"servers",title:"Servers",description:"The most common use of a GraphQL schema is via an HTTP API. Serving a",source:"@site/grafast/servers.mdx",sourceDirName:".",slug:"/servers",permalink:"/grafast/servers",draft:!1,editUrl:"https://github.com/graphile/crystal/tree/main/grafast/website/grafast/servers.mdx",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Using with existing schema",permalink:"/grafast/getting-started/existing-schema"},next:{title:"Plan resolvers",permalink:"/grafast/plan-resolvers"}},l={},p=[{value:"Grafserv",id:"grafserv",level:2},{value:"Envelop",id:"envelop",level:2}],u={toc:p},c="wrapper";function m(e){let{components:t,...r}=e;return(0,a.kt)(c,(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"servers"},"Servers"),(0,a.kt)("p",null,"The most common use of a GraphQL schema is via an HTTP API. Serving a ",(0,a.kt)("grafast",null),"\nschema over HTTP is very much the same as serving a regular GraphQL schema over\nHTTP, the main difference is that you should use ",(0,a.kt)("grafast",null),"'s ",(0,a.kt)("inlineCode",{parentName:"p"},"execute"),"/",(0,a.kt)("inlineCode",{parentName:"p"},"grafast"),"\nfunction to execute requests rather than graphql-js' ",(0,a.kt)("inlineCode",{parentName:"p"},"execute"),"/",(0,a.kt)("inlineCode",{parentName:"p"},"graphql"),"\nfunction, though it's also really important to memoize the parsing (and ideally\nvalidation) of documents to ensure that the same operation plan can be used\nagain in future requests."),(0,a.kt)("p",null,"You can use any GraphQL server that allows you to substitute the ",(0,a.kt)("inlineCode",{parentName:"p"},"execute"),"\nmethod with ",(0,a.kt)("grafast",null),"'s; we have our native ",(0,a.kt)("a",{parentName:"p",href:"/grafserv/"},"Grafserv")," server, or you can\nuse any of the GraphQL servers that Envelop supports with our ",(0,a.kt)("inlineCode",{parentName:"p"},"useGrafast"),"\nenvelop plugin."),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"If you maintain a GraphQL server in JavaScript/TypeScript and you want to\nadd ",(0,a.kt)("grafast",null)," support, don't hesitate to get in touch!")),(0,a.kt)("h2",{id:"grafserv"},"Grafserv"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"/grafserv/"},"Grafserv")," is ",(0,a.kt)("grafast",null),"'s companion server; it's probably the fastest\ngeneral-purpose GraphQL server available in Node.js, but due to its youth it\ndoesn't yet have the large ecosystem of extensions that other servers have.\nGrafserv automatically implements all optimisations that we could think of for\nserving GraphQL schemas over HTTP, including such optimizations as serializing\ndirectly to string without even building objects in memory in the first place!"),(0,a.kt)("p",null,"Read more in ",(0,a.kt)("a",{parentName:"p",href:"/grafserv/"},"Grafserv's documentation"),"."),(0,a.kt)("h2",{id:"envelop"},"Envelop"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://www.envelop.dev/"},"Envelop")," is an excellent GraphQL runtime plugin system written by the fine\nfolks at ",(0,a.kt)("a",{parentName:"p",href:"https://the-guild.dev/"},"The Guild"),"; it can be used with most major GraphQL servers in\nNode.js (and some in other environments!) so is a great way of\nintegrating ",(0,a.kt)("grafast",null)," into an existing project. We bundle a ",(0,a.kt)("inlineCode",{parentName:"p"},"useGrafast()"),"\nenvelop plugin which you can use alongside ",(0,a.kt)("inlineCode",{parentName:"p"},"useParserCache()")," to get an\noptimized execution pipeline very easily, here's a snippet:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'import { envelop, useExtendContext, useSchema } from "@envelop/core";\nimport { useGrafast, useMoreDetailedErrors } from "grafast/envelop";\nimport { schema } from "./schema";\n\nconst getEnveloped = envelop({\n  plugins: [\n    // Use our executable schema\n    useSchema(schema),\n\n    // Caching the parser results is critical for Grafast, otherwise it\n    // must re-plan every GraphQL request!\n    useParserCache(),\n    // And we might as well cache validation whilst we\'re at it:\n    useValidationCache(),\n\n    // Pass your GraphQL context here:\n    useExtendContext(() => ({\n      /* ... */\n    })),\n\n    // This replaces graphql-js\' `execute` with Grafast\'s own\n    useGrafast(),\n  ],\n});\n')),(0,a.kt)("p",null,"For more context, please refer to\n",(0,a.kt)("a",{parentName:"p",href:"https://www.envelop.dev/docs/getting-started"},"Envelop's Documentation"),"."))}m.isMDXComponent=!0}}]);