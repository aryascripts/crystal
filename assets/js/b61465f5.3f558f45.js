"use strict";(self.webpackChunk_localrepo_postgraphile_website=self.webpackChunk_localrepo_postgraphile_website||[]).push([[4168],{30876:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var a=n(2784);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var u=a.createContext({}),s=function(e){var t=a.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=s(e.components);return a.createElement(u.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,u=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),c=s(n),h=i,d=c["".concat(u,".").concat(h)]||c[h]||m[h]||r;return n?a.createElement(d,o(o({ref:t},p),{},{components:n})):a.createElement(d,o({ref:t},p))}));function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=h;var l={};for(var u in t)hasOwnProperty.call(t,u)&&(l[u]=t[u]);l.originalType=e,l[c]="string"==typeof e?e:i,o[1]=l;for(var s=2;s<r;s++)o[s]=n[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},13793:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>o,default:()=>m,frontMatter:()=>r,metadata:()=>l,toc:()=>s});var a=n(7896),i=(n(2784),n(30876));const r={layout:"page",path:"/postgraphile/custom-mutations/",title:"Custom Mutations"},o=void 0,l={unversionedId:"custom-mutations",id:"custom-mutations",title:"Custom Mutations",description:"PostGraphile automatically generates CRUD Mutations for",source:"@site/postgraphile/custom-mutations.md",sourceDirName:".",slug:"/custom-mutations",permalink:"/postgraphile/next/custom-mutations",draft:!1,editUrl:"https://github.com/graphile/crystal/tree/main/postgraphile/website/postgraphile/custom-mutations.md",tags:[],version:"current",frontMatter:{layout:"page",path:"/postgraphile/custom-mutations/",title:"Custom Mutations"},sidebar:"docs",previous:{title:"Custom Queries",permalink:"/postgraphile/next/custom-queries"},next:{title:"Database Function Restrictions",permalink:"/postgraphile/next/function-restrictions"}},u={},s=[{value:"Rules",id:"rules",level:3},{value:"Example",id:"example",level:3},{value:"pgStrictFunctions",id:"pgstrictfunctions",level:3},{value:"Bulk Insert Example",id:"bulk-insert-example",level:3}],p={toc:s},c="wrapper";function m(e){let{components:t,...n}=e;return(0,i.kt)(c,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"PostGraphile automatically generates ",(0,i.kt)("a",{parentName:"p",href:"./crud-mutations/"},"CRUD Mutations")," for\nyou; but it's rare that these will cover all your needs - and many people just\ndisable them outright. Custom mutations enable you to write exactly the business\nlogic you need with access to all of your data all wrapped up in a PostgreSQL\nfunction. You can even bypass the RLS and GRANT checks, should you so choose, by\ntagging your function as ",(0,i.kt)("inlineCode",{parentName:"p"},"SECURITY DEFINER")," - but be very careful when you do\nso!"),(0,i.kt)("h3",{id:"rules"},"Rules"),(0,i.kt)("p",null,"To create a function that PostGraphile will recognise as a custom mutation, it\nmust obey the following rules:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"adhere to\n",(0,i.kt)("a",{parentName:"li",href:"./function-restrictions/"},"common PostGraphile function restrictions")),(0,i.kt)("li",{parentName:"ul"},"must be marked as ",(0,i.kt)("inlineCode",{parentName:"li"},"VOLATILE")," (which is the default for PostgreSQL functions)"),(0,i.kt)("li",{parentName:"ul"},"must be defined in one of the introspected schemas")),(0,i.kt)("p",null,"Functions matching these requirements will be represented in GraphQL in a way\nthat is compatible with the\n",(0,i.kt)("a",{parentName:"p",href:"https://relay.dev/docs/en/mutations"},"Relay Input Object Mutations Specification"),".\nFor example the function"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE FUNCTION my_function(a int, b int) RETURNS text AS $$ \u2026 $$ LANGUAGE sql VOLATILE;\n")),(0,i.kt)("p",null,"could be called from GraphQL like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-graphql",metastring:"{2}","{2}":!0},"mutation {\n  myFunction(input: { a: 1, b: 2 }) {\n    text\n  }\n}\n")),(0,i.kt)("p",null,"Look at the documentation in Ruru/Graph",(0,i.kt)("em",{parentName:"p"},"i"),"QL to find the parameters you may use."),(0,i.kt)("h3",{id:"example"},"Example"),(0,i.kt)("p",null,"Here's an example of a custom mutation, which will generate the GraphQL\n",(0,i.kt)("inlineCode",{parentName:"p"},"acceptTeamInvite")," mutation:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE FUNCTION app_public.accept_team_invite(team_id integer)\nRETURNS app_public.team_members\nAS $$\n  UPDATE app_public.team_members\n    SET accepted_at = now()\n    WHERE accepted_at IS NULL\n    AND team_members.team_id = accept_team_invite.team_id\n    AND member_id = app_public.current_user_id()\n    RETURNING *;\n$$ LANGUAGE sql VOLATILE STRICT SECURITY DEFINER;\n")),(0,i.kt)("p",null,"Notes on the above function:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"STRICT")," is optional, it means that if any of the arguments are null then the\nmutation will not be called (and will thus return null with no error) - this\nallows us to mark ",(0,i.kt)("inlineCode",{parentName:"li"},"teamId")," as a required argument."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"SECURITY INVOKER")," is the default, it means the function will run with the\n",(0,i.kt)("em",{parentName:"li"},"security")," of the person who ",(0,i.kt)("em",{parentName:"li"},"invoked")," the function"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"SECURITY DEFINER")," means that the function will run with the ",(0,i.kt)("em",{parentName:"li"},"security")," of the\nperson who ",(0,i.kt)("em",{parentName:"li"},"defined")," the function, typically the database owner - this means\nthat the function may bypass RLS, RBAC and other security concerns. Be careful\nwhen using ",(0,i.kt)("inlineCode",{parentName:"li"},"SECURITY DEFINER")," - think of it like ",(0,i.kt)("inlineCode",{parentName:"li"},"sudo"),"!"),(0,i.kt)("li",{parentName:"ul"},"we use ",(0,i.kt)("inlineCode",{parentName:"li"},"LANGUAGE sql")," here, but you can use ",(0,i.kt)("inlineCode",{parentName:"li"},"LANGUAGE plpgsql")," if you need\nvariables or looping or if blocks or similar concerns; or if you want to write\nin a more familiar language you can use ",(0,i.kt)("inlineCode",{parentName:"li"},"LANGUAGE plv8")," (JavaScript, requires\nextension), or one of the built in ",(0,i.kt)("inlineCode",{parentName:"li"},"LANGUAGE")," options such as Python, Perl or\nTcl")),(0,i.kt)("h3",{id:"pgstrictfunctions"},"pgStrictFunctions"),(0,i.kt)("p",null,"If you'd like PostGraphile to treat all function arguments as required\n(non-null) unless they have a default then you can use the\n",(0,i.kt)("inlineCode",{parentName:"p"},"preset.gather.pgStrictFunctions")," setting:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="graphile.config.mjs"',title:'"graphile.config.mjs"'},"export default {\n  // ...\n  gather: {\n    pgStrictFunctions: true,\n  },\n};\n")),(0,i.kt)("p",null,"This is similar to marking the function as ",(0,i.kt)("inlineCode",{parentName:"p"},"STRICT")," but with the subtle\ndifference that arguments with defaults may be specified as ",(0,i.kt)("inlineCode",{parentName:"p"},"NULL")," without\nnecessitating that the function returns null. With this setting enabled,\narguments without default value will be set mandatory while arguments with\ndefault value will be optional. For example: ",(0,i.kt)("inlineCode",{parentName:"p"},"CREATE FUNCTION foo(a int, b int,\nc int = 0, d int = null)...")," would give a mutation ",(0,i.kt)("inlineCode",{parentName:"p"},"foo(a: Int!, b: Int!, c:\nInt, d: Int)"),"."),(0,i.kt)("h3",{id:"bulk-insert-example"},"Bulk Insert Example"),(0,i.kt)("p",null,'Here\'s an example of a custom mutation that performs a "bulk insert" - inserting\nand returning a set of records:'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE FUNCTION app_public.create_documents(num integer, type text, location text)\nRETURNS SETOF app_public.document\nAS $$\n  INSERT INTO app_public.document (type, location)\n    SELECT create_documents.type, create_documents.location\n    FROM generate_series(1, num) i\n    RETURNING *;\n$$ LANGUAGE sql STRICT VOLATILE;\n")))}m.isMDXComponent=!0}}]);