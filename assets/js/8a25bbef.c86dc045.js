"use strict";(self.webpackChunk_localrepo_grafast_website=self.webpackChunk_localrepo_grafast_website||[]).push([[9843],{30876:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var a=n(2784);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),s=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=s(e.components);return a.createElement(c.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,c=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=s(n),m=r,h=u["".concat(c,".").concat(m)]||u[m]||d[m]||i;return n?a.createElement(h,l(l({ref:t},p),{},{components:n})):a.createElement(h,l({ref:t},p))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=m;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o[u]="string"==typeof e?e:r,l[1]=o;for(var s=2;s<i;s++)l[s]=n[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},21123:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>s});var a=n(7896),r=(n(2784),n(30876));const i={},l="withPgClient and withPgClientTransaction",o={unversionedId:"step-library/dataplan-pg/withPgClient",id:"step-library/dataplan-pg/withPgClient",title:"withPgClient and withPgClientTransaction",description:"Sometimes you want to use your PostgreSQL client directly, e.g. to run",source:"@site/grafast/step-library/dataplan-pg/withPgClient.md",sourceDirName:"step-library/dataplan-pg",slug:"/step-library/dataplan-pg/withPgClient",permalink:"/grafast/step-library/dataplan-pg/withPgClient",draft:!1,editUrl:"https://github.com/graphile/crystal/tree/main/grafast/website/grafast/step-library/dataplan-pg/withPgClient.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Polymorphism",permalink:"/grafast/step-library/dataplan-pg/polymorphism"},next:{title:"Step classes",permalink:"/grafast/step-classes"}},c={},s=[{value:"withPgClient(executor, $data, callback)",id:"withpgclientexecutor-data-callback",level:2},{value:"withPgClientTransaction(executor, $data, callback)",id:"withpgclienttransactionexecutor-data-callback",level:2}],p={toc:s},u="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(u,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"withpgclient-and-withpgclienttransaction"},"withPgClient and withPgClientTransaction"),(0,r.kt)("p",null,"Sometimes you want to use your PostgreSQL client directly, e.g. to run\narbitrary SQL, or use your specific database client's helper methods; that's\nwhat ",(0,r.kt)("inlineCode",{parentName:"p"},"withPgClient")," is there to help you with."),(0,r.kt)("admonition",{type:"warning"},(0,r.kt)("p",{parentName:"admonition"},"Like ",(0,r.kt)("inlineCode",{parentName:"p"},"lambda"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"withPgClient")," is an escape hatch and does not use batching.")),(0,r.kt)("h2",{id:"withpgclientexecutor-data-callback"},"withPgClient(executor, $data, callback)"),(0,r.kt)("p",null,"You need to pass three arguments to ",(0,r.kt)("inlineCode",{parentName:"p"},"withPgClient"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"executor")," - this is needed to connect to the database; you can grab the\nexecutor from any of the ",(0,r.kt)("a",{parentName:"li",href:"./registry/resources"},"resources")," that you have in\nthe same database"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"$data")," - an arbitrary step representing the data that your ",(0,r.kt)("inlineCode",{parentName:"li"},"callback")," needs;\nset this to ",(0,r.kt)("inlineCode",{parentName:"li"},"constant(null)")," if you don't need anything"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"callback(client, data)")," - the (async) function to be called with the\ndatabase client and the data from your ",(0,r.kt)("inlineCode",{parentName:"li"},"$data")," step")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"withPgClient")," will grab a client from the context, call your callback and wait\nfor it to return, and then release the client again, ultimately resolving to\nthe return result of your callback."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"// Grab executor from any resource\nconst { executor } = usersResource;\n\n// Arbitrary data for our callback to use\nconst $twenty = constant(20);\n\n// 20 + 22 = 42\nconst $meaningOfLife = withPgClient(\n  executor,\n  $twenty,\n  async (client, twenty) => {\n    // The client that you receive will be dependent on the adaptor you're\n    // using, but must have a `query` method:\n    const {\n      rows: [{ num }],\n    } = await client.query({ text: `select 22 as num` });\n\n    return twenty + parseInt(num, 10);\n  },\n);\n")),(0,r.kt)("h2",{id:"withpgclienttransactionexecutor-data-callback"},"withPgClientTransaction(executor, $data, callback)"),(0,r.kt)("p",null,"Exactly the same as ",(0,r.kt)("inlineCode",{parentName:"p"},"withPgClient")," except it starts a transaction before calling ",(0,r.kt)("inlineCode",{parentName:"p"},"callback")," and\ncommits it when ",(0,r.kt)("inlineCode",{parentName:"p"},"callback")," completes successfully or rolls it back if an error is raised."))}d.isMDXComponent=!0}}]);