"use strict";(self.webpackChunk_localrepo_grafast_website=self.webpackChunk_localrepo_grafast_website||[]).push([[6965],{36702:(e,t,a)=>{a.d(t,{Z:()=>l});var n=a(48084),s=a(2784);n.o.initialize({startOnLoad:!0,flowchart:{diagramPadding:8,nodeSpacing:20,rankSpacing:40,htmlLabels:!0}});const l=e=>{let{chart:t}=e;return(0,s.useEffect)((()=>{n.o.contentLoaded()}),[]),s.createElement("div",{className:"mermaid"},t)}},44908:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>d,contentTitle:()=>o,default:()=>k,frontMatter:()=>r,metadata:()=>c,toc:()=>u});var n=a(7896),s=(a(2784),a(30876)),l=a(36702);const i='%%{init: {\'themeVariables\': { \'fontSize\': \'12px\'}}}%%\nflowchart TD\n    classDef path fill:#eee,stroke:#000,color:#000\n    classDef plan fill:#fff,stroke-width:1px,color:#000\n    classDef itemplan fill:#fff,stroke-width:2px,color:#000\n    classDef unbatchedplan fill:#dff,stroke-width:1px,color:#000\n    classDef sideeffectplan fill:#fcc,stroke-width:2px,color:#000\n    classDef bucket fill:#f6f6f6,color:#000,stroke-width:2px,text-align:left\n\n\n    %% plan dependencies\n    Access7{{"Access[7∈0]<br />ᐸ3.currentUserIdᐳ"}}:::plan\n    __Value3["__Value[3∈0]<br />ᐸcontextᐳ"]:::plan\n    __Value3 --\x3e Access7\n    Load8[["Load[8∈0]<br />ᐸuserByIdᐳ"]]:::plan\n    Access7 --\x3e Load8\n    Load11[["Load[11∈0]<br />ᐸfriendshipsByUserIdᐳ"]]:::plan\n    Access7 --\x3e Load11\n    __Value0["__Value[0∈0]"]:::plan\n    __Value5["__Value[5∈0]<br />ᐸrootValueᐳ"]:::plan\n    __Item15[/"__Item[15∈3]<br />ᐸ11ᐳ"\\]:::itemplan\n    Load11 ==> __Item15\n    Access17{{"Access[17∈3]<br />ᐸ15.friend_idᐳ"}}:::plan\n    __Item15 --\x3e Access17\n    Load18[["Load[18∈3]<br />ᐸuserByIdᐳ"]]:::plan\n    Access17 --\x3e Load18\n\n    %% define steps\n\n    Bucket0("Bucket 0 (root)<br />1: <br />ᐳ: Access[7]<br />2: Load[8], Load[11]"):::bucket\n    classDef bucket0 stroke:#696969\n    class Bucket0,__Value0,__Value3,__Value5,Access7,Load8,Load11 bucket0\n    Bucket1("Bucket 1 (nullableBoundary)<br />Deps: 8, 11<br /><br />ROOT LoadᐸuserByIdᐳ[8]"):::bucket\n    classDef bucket1 stroke:#00bfff\n    class Bucket1 bucket1\n    Bucket3("Bucket 3 (listItem)<br />ROOT __Item{3}ᐸ11ᐳ[15]<br />1: <br />ᐳ: Access[17]<br />2: Load[18]"):::bucket\n    classDef bucket3 stroke:#ffa500\n    class Bucket3,__Item15,Access17,Load18 bucket3\n    Bucket4("Bucket 4 (nullableBoundary)<br />Deps: 18<br /><br />ROOT Load{3}ᐸuserByIdᐳ[18]"):::bucket\n    classDef bucket4 stroke:#0000ff\n    class Bucket4 bucket4\n    Bucket0 --\x3e Bucket1\n    Bucket1 --\x3e Bucket3\n    Bucket3 --\x3e Bucket4',r={title:"Plan diagrams"},o="Plan diagrams",c={unversionedId:"plan-diagrams",id:"plan-diagrams",title:"Plan diagrams",description:"A plan diagram is a directed acyclic graph made of a number of step nodes",source:"@site/grafast/plan-diagrams.mdx",sourceDirName:".",slug:"/plan-diagrams",permalink:"/grafast/plan-diagrams",draft:!1,editUrl:"https://github.com/graphile/crystal/tree/main/grafast/website/grafast/plan-diagrams.mdx",tags:[],version:"current",frontMatter:{title:"Plan diagrams"},sidebar:"tutorialSidebar",previous:{title:"Access control",permalink:"/grafast/access-control"},next:{title:"Polymorphism",permalink:"/grafast/polymorphism"}},d={},p="%%{init: {'themeVariables': { 'fontSize': '16px'}}}%%\nflowchart TD\n    classDef path fill:#eee,stroke:#000,color:#000\n    classDef plan fill:#fff,stroke-width:1px,color:#000\n    classDef itemplan fill:#fff,stroke-width:2px,color:#000\n    classDef sideeffectplan fill:#f00,stroke-width:2px,color:#000\n    classDef bucket fill:#f6f6f6,color:#000,stroke-width:2px,text-align:left\n    classDef bucket0 stroke:#696969\n    classDef bucket2 stroke:#7f007f\n",u=[{value:"Example",id:"example",level:2},{value:"Buckets (aka layer plans)",id:"buckets-aka-layer-plans",level:2},{value:"First line (e.g. <code>Bucket 1 (nullableBoundary)</code>)",id:"first-line-eg-bucket-1-nullableboundary",level:3},{value:"<code>Deps:</code>",id:"deps",level:3},{value:"<code>ROOT</code>",id:"root",level:3},{value:"<code>1:</code>",id:"1",level:3},{value:"<code>ᐳ:</code>",id:"ᐳ",level:3},{value:"Steps",id:"steps",level:2},{value:"Standard synchronous steps",id:"standard-synchronous-steps",level:3},{value:"Asynchronous steps",id:"asynchronous-steps",level:3},{value:"Item steps",id:"item-steps",level:3},{value:"Unbatched synchronous steps",id:"unbatched-synchronous-steps",level:3},{value:"How to see a request&#39;s plan diagram",id:"how-to-see-a-requests-plan-diagram",level:2}],h={toc:u},m="wrapper";function k(e){let{components:t,...a}=e;return(0,s.kt)(m,(0,n.Z)({},h,a,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"plan-diagrams"},"Plan diagrams"),(0,s.kt)("p",null,"A plan diagram is a directed acyclic graph made of a number of ",(0,s.kt)("strong",{parentName:"p"},"step")," nodes\nconnected by arrows which show the flow of data. It also details the ",(0,s.kt)("strong",{parentName:"p"},"LayerPlans"),'\n(aka "buckets") and the relationships between them.'),(0,s.kt)("h2",{id:"example"},"Example"),(0,s.kt)("p",null,"For the following GraphQL request:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-graphql"},"{\n  currentUser {\n    name\n    friends {\n      name\n    }\n  }\n}\n")),(0,s.kt)("p",null,"You might see a plan diagram such as:"),(0,s.kt)(l.Z,{chart:i,mdxType:"Mermaid"}),(0,s.kt)("p",null,"This diagram has two main sections: the ",(0,s.kt)("strong",{parentName:"p"},"steps"),", and the ",(0,s.kt)("strong",{parentName:"p"},"buckets"),". We'll\ntalk about the buckets first."),(0,s.kt)("admonition",{type:"note"},(0,s.kt)("p",{parentName:"admonition"},"If you're able to convince mermaid to reliably render these two things on the\nsame diagram in a more independent manner, please get in touch!")),(0,s.kt)("h2",{id:"buckets-aka-layer-plans"},"Buckets (aka layer plans)"),(0,s.kt)("p",null,'A bucket, or layer plan, is where data for steps at a similar "layer" in the\noperation go. For each layer, the cardinality is the same for every step -\nevery step deals with the same number of results. Generally buckets are\nintroduced where this may no longer be the case - for example when we start\nhandling more results due to processing the items in a list, or fewer results\ndue to polymorphic filtering or excluding null results from further processing.'),(0,s.kt)("p",null,"Here's an example of a bucket node:"),(0,s.kt)(l.Z,{chart:"\n%%{init: {'themeVariables': { 'fontSize': '12px'}}}%%\nflowchart TD\n    classDef bucket fill:#f6f6f6,color:#000,stroke-width:2px,text-align:left\n    Bucket1(\"Bucket 1 (nullableBoundary)<br />Deps: 8<br /><br />ROOT LoadOneᐸuserByIdᐳ[8]<br />1: <br />ᐳ: Access[10]<br />2: Load[11]\"):::bucket\n    classDef bucket1 stroke:#00bfff\n    class Bucket1,Access10,Load11 bucket1\n",mdxType:"Mermaid"}),(0,s.kt)("h3",{id:"first-line-eg-bucket-1-nullableboundary"},"First line (e.g. ",(0,s.kt)("inlineCode",{parentName:"h3"},"Bucket 1 (nullableBoundary)"),")"),(0,s.kt)("p",null,"The first line in the bucket node always start with the word ",(0,s.kt)("inlineCode",{parentName:"p"},"Bucket")," followed by the bucket number.\nBuckets are numbered from ",(0,s.kt)("inlineCode",{parentName:"p"},"0"),', but during the optimization of the operation\nplan the need for certain buckets may be eradicated, resulting in "gaps" in the\nnumbering. Afterwards comes the reason for the bucket, in parenthesis: ',(0,s.kt)("inlineCode",{parentName:"p"},"root"),",\n",(0,s.kt)("inlineCode",{parentName:"p"},"nullableBoundary"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"listItem"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"subscription"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"mutationField"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"defer"),",\n",(0,s.kt)("inlineCode",{parentName:"p"},"polymorphic"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"subroutine")," or other."),(0,s.kt)("h3",{id:"deps"},(0,s.kt)("inlineCode",{parentName:"h3"},"Deps:")),(0,s.kt)("p",null,"A line starting with ",(0,s.kt)("inlineCode",{parentName:"p"},"Deps:"),' indicates the buckets "dependencies" - that is to\nsay the data from the parent bucket that will be copied into this bucket when\nit is created, before execution of any of the steps within the bucket\ncommences.'),(0,s.kt)("h3",{id:"root"},(0,s.kt)("inlineCode",{parentName:"h3"},"ROOT")),(0,s.kt)("p",null,"A line starting with ",(0,s.kt)("inlineCode",{parentName:"p"},"ROOT"),' indicates the step that represents the "root" of\nthe bucket, this is often used for checking for nulls/errors and similar\npurposes.'),(0,s.kt)("h3",{id:"1"},(0,s.kt)("inlineCode",{parentName:"h3"},"1:")),(0,s.kt)("p",null,"Lines beginning with a number indicate the order in which the steps will be\nexecuted in that bucket. Numbered lines with multiple steps listed will execute\nthose steps in parallel since they are independent of each other."),(0,s.kt)("h3",{id:"ᐳ"},(0,s.kt)("inlineCode",{parentName:"h3"},"ᐳ:")),(0,s.kt)("p",null,'Immediately following a numbered line, there may be a line that begins with\n"ᐳ:". This indicates the "synchronous and safe" unbatched steps that will be\nexecuted immediately after the numbered line - this is an optimization that\nmeans the system doesn\'t need to loop multiple times to satisfy these needs.'),(0,s.kt)("h2",{id:"steps"},"Steps"),(0,s.kt)("p",null,"Generally when looking at a plan diagram, you care more about the steps than\nthe buckets. Each step contains a first line that consists of the step class\nname with ",(0,s.kt)("inlineCode",{parentName:"p"},"Step")," removed (for brevity), followed by ",(0,s.kt)("inlineCode",{parentName:"p"},"[X∈Y]")," where X is the id\nof the step, and Y is the number of the bucket to which it belongs - the latter\nof which is also indicated by the border colour of the step."),(0,s.kt)("p",null,"Often steps will have a second line of text such as ",(0,s.kt)("inlineCode",{parentName:"p"},"ᐸ3.currentUserIdᐳ")," - this\nis metadata specific to that particular step class that gives more detail on\nwhat this step is doing."),(0,s.kt)("p",null,"The shape of the step's border also reveals more details about the step:"),(0,s.kt)("h3",{id:"standard-synchronous-steps"},"Standard synchronous steps"),(0,s.kt)(l.Z,{chart:`${p}\n    __Value5["__Value[5∈0]<br />ᐸrootValueᐳ"]:::plan\n    class __Value5 bucket0\n`,mdxType:"Mermaid"}),(0,s.kt)("p",null,"A standard synchronous step is represented by a simple rectangle."),(0,s.kt)("p",null,"In this example:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"__Value")," is the name of the Step (but with the redundant 'Step' removed - truly it's called ",(0,s.kt)("inlineCode",{parentName:"li"},"__ValueStep"),")."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"5")," is the step ID - every step has a unique identifier."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"∈0"),' means that the step "belongs" to LayerPlan (aka "bucket") number ',(0,s.kt)("inlineCode",{parentName:"li"},"0"),"."),(0,s.kt)("li",{parentName:"ul"},"The next line contains additional step-specific metadata; in this case it's telling us that the step represents the GraphQL ",(0,s.kt)("inlineCode",{parentName:"li"},"rootValue"))),(0,s.kt)("h3",{id:"asynchronous-steps"},"Asynchronous steps"),(0,s.kt)(l.Z,{chart:`${p}\n    LoadOne18[["LoadOne[18∈3]<br />ᐸuserByIdᐳ"]]:::plan\n    class LoadOne18 bucket2\n`,mdxType:"Mermaid"}),(0,s.kt)("p",null,"These appear very similar to synchronous steps, except that they have a double\nborder on the left and right. The key difference with these steps, and why they\nrender more prominently, is that this is typically where your work will take\nplace - they execute asynchronously, and so can communicate with remote\nservices and resources."),(0,s.kt)("p",null,"All step classes you create will generate asynchronous steps unless you\nspecifically opt them in to one of the optimized forms."),(0,s.kt)("h3",{id:"item-steps"},"Item steps"),(0,s.kt)(l.Z,{chart:`${p}\n    __Item15[/"__Item[15∈3]<br />ᐸ11ᐳ"\\]:::itemplan\n    class __Item15 bucket3\n`,mdxType:"Mermaid"}),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"__ItemStep")," steps never execute, they're managed by ",(0,s.kt)("grafast",null)," manually to\nrepresent individual entries in a list or stream (including subscription event\nstreams). They look like a trapezoid (US) / trapezium (UK) to imply that they\nare going from a smaller set to a larger set, though this isn't always the\ncase."),(0,s.kt)("h3",{id:"unbatched-synchronous-steps"},"Unbatched synchronous steps"),(0,s.kt)(l.Z,{chart:`${p}\n    Access17{{"Access[17∈3]<br />ᐸ15.friend_idᐳ"}}:::plan\n    class Access17 bucket3\n`,mdxType:"Mermaid"}),(0,s.kt)("p",null,"An unbatched synchronous step is a special variant of a synchronous step that\nconfers no benefit from batching. This allows the system to calculate their\nvalues alongside their dependencies without having to loop multiple times.\nTypically they're used for trivial operations such as accessing a named\nproperty from an object or accessing the first/last entry in a list."),(0,s.kt)("h2",{id:"how-to-see-a-requests-plan-diagram"},"How to see a request's plan diagram"),(0,s.kt)("p",null,"Your server must be configured to expose plans for you to be able to see them;\nif it is then you can use a tool such as ",(0,s.kt)("a",{parentName:"p",href:"/ruru"},"Ruru")," to view the execution plan,\nor you can render it directly from the JSON response. You can convert the plan\nJSON into mermaid format via the ",(0,s.kt)("inlineCode",{parentName:"p"},"planToMermaid")," function so you can load them\ninto the ",(0,s.kt)("a",{parentName:"p",href:"https://mermaid-js.github.io/mermaid-live-editor/edit"},"mermaid live editor"),"."))}k.isMDXComponent=!0}}]);