"use strict";(self.webpackChunk_localrepo_grafast_website=self.webpackChunk_localrepo_grafast_website||[]).push([[2646],{30876:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>f});var r=a(2784);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},i=Object.keys(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var o=r.createContext({}),p=function(e){var t=r.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},u=function(e){var t=p(e.components);return r.createElement(o.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,o=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),c=p(a),m=n,f=c["".concat(o,".").concat(m)]||c[m]||d[m]||i;return a?r.createElement(f,l(l({ref:t},u),{},{components:a})):r.createElement(f,l({ref:t},u))}));function f(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,l=new Array(i);l[0]=m;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s[c]="string"==typeof e?e:n,l[1]=s;for(var p=2;p<i;p++)l[p]=a[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,a)}m.displayName="MDXCreateElement"},6173:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var r=a(7896),n=(a(2784),a(30876));const i={sidebar_position:6},l="Standard steps",s={unversionedId:"step-library/standard-steps/index",id:"step-library/standard-steps/index",title:"Standard steps",description:"Loading data",source:"@site/grafast/step-library/standard-steps/index.mdx",sourceDirName:"step-library/standard-steps",slug:"/step-library/standard-steps/",permalink:"/grafast/step-library/standard-steps/",draft:!1,editUrl:"https://github.com/graphile/crystal/tree/main/grafast/website/grafast/step-library/standard-steps/index.mdx",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"Step library",permalink:"/grafast/step-library/"},next:{title:"access",permalink:"/grafast/step-library/standard-steps/access"}},o={},p=[{value:"Loading data",id:"loading-data",level:2},{value:"Forming objects and lists",id:"forming-objects-and-lists",level:2},{value:"Operating on lists",id:"operating-on-lists",level:2},{value:"Utility",id:"utility",level:2},{value:"GraphQL",id:"graphql",level:2},{value:"Realtime",id:"realtime",level:2}],u={toc:p},c="wrapper";function d(e){let{components:t,...a}=e;return(0,n.kt)(c,(0,r.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"standard-steps"},"Standard steps"),(0,n.kt)("h2",{id:"loading-data"},"Loading data"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"./loadOne"},"loadOne"),": similar to DataLoader.load, batch loading of single values"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"./loadMany"},"loadMany"),": similar to DataLoader.load, batch loading of lists of values")),(0,n.kt)("h2",{id:"forming-objects-and-lists"},"Forming objects and lists"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"./list"},"list"),": takes a list of steps and turns it into a single step that resolves\nto list of the underlying steps' values"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"./object"},"object"),": takes an object, the keys of which are steps, and turns it into a\nsingle step that resolves to an object where the values are the corresponding\nunderlying steps' values"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"./remapKeys"},"remapKeys"),": returns step that results in an object made up of the given renamed\nkeys and values from another object step")),(0,n.kt)("h2",{id:"operating-on-lists"},"Operating on lists"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"./first"},"first"),": returns the first entry from a list"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"./last"},"last"),": returns the last entry from a list"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"./reverse"},"reverse"),": reverses the order of a list"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"./filter"},"filter"),": returns only the entries in a list that satisfy a callback"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"./groupBy"},"groupBy"),": Takes a single dimensional list plan and a mapper that returns a\ngrouping key. Returns a plan that results in a Map where the keys are the\ngrouping keys and the values are lists of the original entries that match\nthese grouping keys."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"./each"},"each"),": Transforms a list by wrapping each element in the list with the\ngiven mapper.")),(0,n.kt)("h2",{id:"utility"},"Utility"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"./polymorphicBranch"},"polymorphicBranch"),": a step to help deal with simple polymorphism"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"./constant"},"constant"),": always returns the given value"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"./error"},"error"),": always throws the given error"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"./access"},"access"),": accesses the property at the given path for each value"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"./lambda"},"lambda"),": executes a lambda function for each set of values"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"./setter"},"setter"),": a ModifierStep for setting given values onto a parent step")),(0,n.kt)("h2",{id:"graphql"},"GraphQL"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"./context"},"context"),": returns the GraphQL contextValue"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"./connection"},"connection"),": wraps a list-returning plan with connection-related\ncapabilities such as PageInfo"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"./node"},"node"),": gets a Node by its global object identifier")),(0,n.kt)("h2",{id:"realtime"},"Realtime"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"./listen"},"listen"),": Subscribes to the given ",(0,n.kt)("inlineCode",{parentName:"li"},"pubsubOrPlan")," to get realtime updates on\na given topic (",(0,n.kt)("inlineCode",{parentName:"li"},"topicOrPlan"),"), mapping the resulting event via the ",(0,n.kt)("inlineCode",{parentName:"li"},"itemPlan"),"\ncallback.")))}d.isMDXComponent=!0}}]);