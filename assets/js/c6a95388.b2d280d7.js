"use strict";(self.webpackChunk_localrepo_postgraphile_website=self.webpackChunk_localrepo_postgraphile_website||[]).push([[6675],{30876:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>h});var i=t(2784);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,i,a=function(e,n){if(null==e)return{};var t,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=i.createContext({}),p=function(e){var n=i.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},u=function(e){var n=p(e.components);return i.createElement(s.Provider,{value:n},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},c=i.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),d=p(t),c=a,h=d["".concat(s,".").concat(c)]||d[c]||m[c]||r;return t?i.createElement(h,l(l({ref:n},u),{},{components:t})):i.createElement(h,l({ref:n},u))}));function h(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,l=new Array(r);l[0]=c;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o[d]="string"==typeof e?e:a,l[1]=o;for(var p=2;p<r;p++)l[p]=t[p];return i.createElement.apply(null,l)}return i.createElement.apply(null,t)}c.displayName="MDXCreateElement"},89009:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>m,frontMatter:()=>r,metadata:()=>o,toc:()=>p});var i=t(7896),a=(t(2784),t(30876));const r={layout:"page",path:"/postgraphile/make-add-pg-table-condition-plugin/",title:"makeAddPgTableConditionPlugin (graphile-utils v4.4.5+)"},l=void 0,o={unversionedId:"make-add-pg-table-condition-plugin",id:"version-4.x/make-add-pg-table-condition-plugin",title:"makeAddPgTableConditionPlugin (graphile-utils v4.4.5+)",description:"WARNING: _this plugin generator doesn't currently have any tests, so it's",source:"@site/versioned_docs/version-4.x/make-add-pg-table-condition-plugin.md",sourceDirName:".",slug:"/make-add-pg-table-condition-plugin",permalink:"/postgraphile/current/make-add-pg-table-condition-plugin",draft:!1,editUrl:"https://github.com/graphile/crystal/tree/main/postgraphile/website/versioned_docs/version-4.x/make-add-pg-table-condition-plugin.md",tags:[],version:"4.x",frontMatter:{layout:"page",path:"/postgraphile/make-add-pg-table-condition-plugin/",title:"makeAddPgTableConditionPlugin (graphile-utils v4.4.5+)"},sidebar:"docs",previous:{title:"makeWrapResolversPlugin (graphile-utils)",permalink:"/postgraphile/current/make-wrap-resolvers-plugin"},next:{title:"makeAddPgTableOrderByPlugin (graphile-utils v4.4.5+)",permalink:"/postgraphile/current/make-add-pg-table-order-by-plugin"}},s={},p=[{value:"Example 1",id:"example-1",level:2},{value:"Example 2",id:"example-2",level:2},{value:"Example with ordering",id:"example-with-ordering",level:2},{value:"Function signature",id:"function-signature",level:2},{value:"<code>makeAddPgTableConditionPlugin</code>",id:"makeaddpgtableconditionplugin",level:3}],u={toc:p},d="wrapper";function m(e){let{components:n,...t}=e;return(0,a.kt)(d,(0,i.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"WARNING"),": ",(0,a.kt)("em",{parentName:"p"},"this plugin generator doesn't currently have any tests, so it's\nstatus is ",(0,a.kt)("strong",{parentName:"em"},"experimental"),". If you can spare the time to write some tests (or\nsponsor me to do so) then we can promote it to stable.")),(0,a.kt)("p",null,"PostGraphile adds ",(0,a.kt)("inlineCode",{parentName:"p"},"condition")," arguments to various of the table collection\nfields it builds so that you can filter the result set down to just the records\nyou're interested in. By default we add the table's columns (or, if\n",(0,a.kt)("inlineCode",{parentName:"p"},"--no-ignore-indexes")," is enabled, only the columns ",(0,a.kt)("em",{parentName:"p"},"that are indexed"),") to the\ncondition input, where you can specify their value, or ",(0,a.kt)("inlineCode",{parentName:"p"},"null")," if you only want\nthe records where that column ",(0,a.kt)("inlineCode",{parentName:"p"},"IS NULL"),"."),(0,a.kt)("p",null,"Many GraphQL experts would opine that GraphQL filters should not be overly\ncomplicated, and should not reveal too much of the underlying data store. This\nis why we don't have advanced filtering built in by default; however, should you\ndesire that, please check out the filter plugin\n",(0,a.kt)("a",{parentName:"p",href:"./filtering/"},"documented on our Filtering page"),"."),(0,a.kt)("p",null,"Here's an example of filtering forums to those created by a particular user:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-graphql"},"query ForumsCreatedByUser1 {\n  allForums(condition: { creator_id: 1 }) {\n    nodes {\n      id\n      name\n    }\n  }\n}\n")),(0,a.kt)("p",null,"Sometimes, however, you want to filter by something a little more complex than\nthe fields on that table; maybe you want to filter by a field on a related\ntable, or by a computation, or something else."),(0,a.kt)("p",null,"This plugin generator helps you build new ",(0,a.kt)("inlineCode",{parentName:"p"},"condition")," values so that you can\nfilter more flexibly. Let's make this clearer with an example:"),(0,a.kt)("h2",{id:"example-1"},"Example 1"),(0,a.kt)("p",null,"To return a list of forums which match a list of primary keys:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'/* TODO: test this plugin works! */\nmodule.exports = makeAddPgTableConditionPlugin(\n  "app_public",\n  "forums",\n  "idIn",\n  (build) => {\n    const { GraphQLList, GraphQLNonNull, GraphQLInt } = build.graphql;\n    return {\n      description: "Filters to records matching one of these ids",\n      // This is graphql-js for `[Int!]`; assumes you\'re using\n      // an integer primary key.\n      type: new GraphQLList(new GraphQLNonNull(GraphQLInt)),\n    };\n  },\n  (value, helpers, build) => {\n    const { sql, sqlTableAlias } = helpers;\n\n    // Note sqlTableAlias represents our table (app_public.forums),\n    // but because it might be requested more than once in the\n    // generated query we need to match this specific instance, so\n    // we use an alias.\n\n    // This SQL fragment will be merged into the `WHERE` clause, so\n    // it must be valid in that context.\n    return sql.fragment`${sqlTableAlias}.id = ANY (${sql.value(value)}::int[])`;\n  },\n);\n')),(0,a.kt)("h2",{id:"example-2"},"Example 2"),(0,a.kt)("p",null,"To filter a list of forums (stored in the table ",(0,a.kt)("inlineCode",{parentName:"p"},"app_public.forums"),") to just\nthose where a particular user has posted in (posts are stored in\n",(0,a.kt)("inlineCode",{parentName:"p"},"app_public.posts"),") you might create a plugin like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'/* TODO: test this plugin works! */\nmodule.exports = makeAddPgTableConditionPlugin(\n  "app_public",\n  "forums",\n  "containsPostsByUserId",\n  (build) => ({\n    description:\n      "Filters the list of forums to only those which " +\n      "contain posts written by the specified user.",\n    type: build.graphql.GraphQLInt,\n  }),\n  (value, helpers, build) => {\n    const { sql, sqlTableAlias } = helpers;\n    const sqlIdentifier = sql.identifier(Symbol("postsByUser"));\n\n    // This is merged into the `WHERE` clause, so we end up with\n    // something like:\n    //\n    // ```sql\n    // SELECT ...\n    // FROM app_public.forums AS <sqlTableAlias>\n    // WHERE ...\n    // AND (\n    //   -- This is our returned fragment:\n    //   exists (select 1 from ...)\n    // )\n    // ```\n    return sql.fragment`exists(\n      select 1\n      from app_public.posts as ${sqlIdentifier}\n      where ${sqlIdentifier}.forum_id = ${sqlTableAlias}.id\n      and ${sqlIdentifier}.user_id = ${sql.value(value)}\n    )`;\n  },\n);\n')),(0,a.kt)("p",null,"The above plugin adds the ",(0,a.kt)("inlineCode",{parentName:"p"},"containsPostsByUserId")," condition to collection fields\nfor the ",(0,a.kt)("inlineCode",{parentName:"p"},"app_public.forums")," table. You might use it like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-graphql"},"query ForumsContainingPostsByUser1 {\n  allForums(condition: { containsPostsByUserId: 1 }) {\n    nodes {\n      id\n      name\n    }\n  }\n}\n")),(0,a.kt)("p",null,"NOTE: ",(0,a.kt)("inlineCode",{parentName:"p"},"sqlTableAlias")," represents the ",(0,a.kt)("inlineCode",{parentName:"p"},"app_public.forums")," table in the example\nabove (i.e. the schemaName.tableName table); if you don't use it in your\nimplementation then there's a good chance your plugin is incorrect."),(0,a.kt)("p",null,"NOTE: for more complex values, you may need to invoke\n",(0,a.kt)("inlineCode",{parentName:"p"},"build.gql2pg(value, databaseType)")," instead of ",(0,a.kt)("inlineCode",{parentName:"p"},"sql.value(value)")," in order to\nconvert the GraphQL value to the equivalent SQL value. If you should need this,\nreach out on ",(0,a.kt)("a",{parentName:"p",href:"https://discord.gg/graphile"},"our Discord chat")," for advice."),(0,a.kt)("h2",{id:"example-with-ordering"},"Example with ordering"),(0,a.kt)("p",null,"It's also possible for condition plugins to change the order of results by using\n",(0,a.kt)("a",{parentName:"p",href:"./make-extend-schema-plugin/#querybuilder"},"QueryBuilder"),"'s ",(0,a.kt)("inlineCode",{parentName:"p"},"orderBy")," method.\nThe following example both limits the list of quizzes returned to only those\nwith a certain number of entries, ",(0,a.kt)("em",{parentName:"p"},"and")," orders the results such that the quizzes\nwith the most entries are listed first."),(0,a.kt)("p",null,"This example if quite contrived, but this functionality can be useful for a\nnumber of purposes: filtering and ordering by full text search results,\nfiltering and ordering by proximity, etc."),(0,a.kt)("p",null,"Note: prior to ",(0,a.kt)("inlineCode",{parentName:"p"},"graphile-utils")," v4.9.1 (unreleased at time of writing), a plugin\nlike this should be loaded via ",(0,a.kt)("inlineCode",{parentName:"p"},"--prepend-plugins")," (or ",(0,a.kt)("inlineCode",{parentName:"p"},"prependPlugins")," in the\nlibrary mode) because otherwise the default ordering plugin dominates the order."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'const { makeAddPgTableConditionPlugin } = require("graphile-utils");\n\nmodule.exports = makeAddPgTableConditionPlugin(\n  "app_public",\n  "quiz",\n  "entryCountMin",\n  (build) => ({\n    type: build.graphql.GraphQLInt,\n  }),\n  (value, { queryBuilder, sql, sqlTableAlias }) => {\n    if (value == null) {\n      return;\n    }\n\n    // Order the result set by the number of entries the quiz has\n    queryBuilder.orderBy(\n      sql.fragment`(select count(*) from app_public.quiz_entry where quiz_entry.quiz_id = ${sqlTableAlias}.id)`,\n      false,\n      false,\n    );\n\n    // Filter to only quizzes that have at least `value` entries.\n    return sql.fragment`(select count(*) from app_public.quiz_entry where quiz_entry.quiz_id = ${sqlTableAlias}.id) >= ${sql.value(\n      value,\n    )}`;\n  },\n);\n')),(0,a.kt)("h2",{id:"function-signature"},"Function signature"),(0,a.kt)("h3",{id:"makeaddpgtableconditionplugin"},(0,a.kt)("inlineCode",{parentName:"h3"},"makeAddPgTableConditionPlugin")),(0,a.kt)("p",null,"The signature of the ",(0,a.kt)("inlineCode",{parentName:"p"},"makeAddPgTableConditionPlugin")," function is:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"export default function makeAddPgTableConditionPlugin(\n  schemaName: string,\n  tableName: string,\n  conditionFieldName: string,\n  conditionFieldSpecGenerator: (build: Build) => GraphQLInputFieldConfig,\n  conditionGenerator: (\n    value: unknown,\n    helpers: {\n      queryBuilder: QueryBuilder;\n      sql: typeof pgsql2 /* the 'pg-sql2' module */;\n      sqlTableAlias: SQL;\n    },\n    build: Build,\n  ) => SQL | null | void,\n): Plugin;\n")),(0,a.kt)("p",null,"The table to match is the table named ",(0,a.kt)("inlineCode",{parentName:"p"},"tableName")," in the schema named\n",(0,a.kt)("inlineCode",{parentName:"p"},"schemaName"),"."),(0,a.kt)("p",null,"A new condition is added, named ",(0,a.kt)("inlineCode",{parentName:"p"},"conditionFieldName"),", whose GraphQL\nrepresentation is specified by the result of ",(0,a.kt)("inlineCode",{parentName:"p"},"conditionFieldSpecGenerator"),"."),(0,a.kt)("p",null,"When the field named in ",(0,a.kt)("inlineCode",{parentName:"p"},"conditionFieldName")," is used in a query, the\n",(0,a.kt)("inlineCode",{parentName:"p"},"conditionGenerator")," is called with the value passed, and the result of that\nfunction is used as an additional ",(0,a.kt)("inlineCode",{parentName:"p"},"WHERE")," clause on the generated SQL (combined\nusing ",(0,a.kt)("inlineCode",{parentName:"p"},"AND"),"). If ",(0,a.kt)("inlineCode",{parentName:"p"},"null")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"undefined")," are returned then no condition is added."))}m.isMDXComponent=!0}}]);