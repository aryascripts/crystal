"use strict";(self.webpackChunk_localrepo_postgraphile_website=self.webpackChunk_localrepo_postgraphile_website||[]).push([[9137],{30876:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var o=n(2784);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=o.createContext({}),u=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=u(e.components);return o.createElement(l.Provider,{value:t},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=u(n),m=r,f=d["".concat(l,".").concat(m)]||d[m]||c[m]||i;return n?o.createElement(f,a(a({ref:t},p),{},{components:n})):o.createElement(f,a({ref:t},p))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,a=new Array(i);a[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[d]="string"==typeof e?e:r,a[1]=s;for(var u=2;u<i;u++)a[u]=n[u];return o.createElement.apply(null,a)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},29164:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>c,frontMatter:()=>i,metadata:()=>s,toc:()=>u});var o=n(7896),r=(n(2784),n(30876));const i={layout:"page",path:"/postgraphile/requirements/",title:"Requirements"},a=void 0,s={unversionedId:"requirements",id:"version-4.x/requirements",title:"Requirements",description:"PostGraphile is packaged as a Node.js module, you can install it with npm or",source:"@site/versioned_docs/version-4.x/requirements.md",sourceDirName:".",slug:"/requirements",permalink:"/postgraphile/current/requirements",draft:!1,editUrl:"https://github.com/graphile/crystal/tree/main/postgraphile/website/versioned_docs/version-4.x/requirements.md",tags:[],version:"4.x",frontMatter:{layout:"page",path:"/postgraphile/requirements/",title:"Requirements"},sidebar:"docs",previous:{title:"Performance",permalink:"/postgraphile/current/performance"},next:{title:"Required Knowledge",permalink:"/postgraphile/current/required-knowledge"}},l={},u=[{value:"Your PostgreSQL database",id:"your-postgresql-database",level:3},{value:"Node.js: use the LTS",id:"nodejs-use-the-lts",level:3},{value:"PostgreSQL: use latest",id:"postgresql-use-latest",level:3},{value:"PG 9.4 not officially supported, but works",id:"pg-94-not-officially-supported-but-works",level:4},{value:"PG 9.5 not officially supported, but works",id:"pg-95-not-officially-supported-but-works",level:4},{value:"PG 9.6 officially supported",id:"pg-96-officially-supported",level:4},{value:"PG 10 officially supported",id:"pg-10-officially-supported",level:4},{value:"PG 11 officially supported",id:"pg-11-officially-supported",level:4},{value:"PG 12 officially supported",id:"pg-12-officially-supported",level:4},{value:"PG 13 officially supported",id:"pg-13-officially-supported",level:4},{value:"PG 14 officially supported",id:"pg-14-officially-supported",level:4},{value:"Operating system",id:"operating-system",level:3}],p={toc:u},d="wrapper";function c(e){let{components:t,...n}=e;return(0,r.kt)(d,(0,o.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"PostGraphile is packaged as a Node.js module, you can install it with ",(0,r.kt)("inlineCode",{parentName:"p"},"npm")," or\n",(0,r.kt)("inlineCode",{parentName:"p"},"yarn")," (depending on your preference) - users tend to have fewer issues with\n",(0,r.kt)("inlineCode",{parentName:"p"},"yarn"),", so we recommend it."),(0,r.kt)("p",null,"We recommend using the latest LTS version of Node.js and PostgreSQL, but we have\nlimited support for older versions. Using newer released versions should work\nfine (we don't recommend using with alpha/beta versions though)."),(0,r.kt)("h3",{id:"your-postgresql-database"},"Your PostgreSQL database"),(0,r.kt)("p",null,'These aren\'t exactly "requirements", but they will impact your PostGraphile\nexperience.'),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Use primary keys"),": if you don't have primary keys on your tables then they\nwon't get the ",(0,r.kt)("inlineCode",{parentName:"li"},"nodeId")," globally unique identifier interface. Further if you\ndon't have unique constraints then you won't be able to use the automatic\nupdate/delete mutations."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Use foreign keys"),": we infer relations between tables using\n",(0,r.kt)("a",{parentName:"li",href:"https://www.postgresql.org/docs/current/static/ddl-constraints.html#DDL-CONSTRAINTS-FK"},"foreign key constraints"),";\nif you don't use these constraints then we won't know there's a relationship\nbetween the tables. There are plugins to get around this (using smart\ncomments) but it's highly recommended that you use PostgreSQL's built in\nrelations support."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("a",{name:"dont-use-column-based-select-grants"}),"Don't use column-based\nSELECT grants"),": column-based grants work well for ",(0,r.kt)("inlineCode",{parentName:"li"},"INSERT")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"UPDATE"),"\n(especially when combined with ",(0,r.kt)("inlineCode",{parentName:"li"},"--no-ignore-rbac"),"!), but they don't make sense\nfor ",(0,r.kt)("inlineCode",{parentName:"li"},"DELETE")," and they cause issues when used with ",(0,r.kt)("inlineCode",{parentName:"li"},"SELECT"),". Quite a few things\nin PostGraphile depend on full-table ",(0,r.kt)("inlineCode",{parentName:"li"},"SELECT")," grants; if you don't want to use\nfull-table grants then you will need to disable the default mutations and use\ncustom mutations instead (because we use ",(0,r.kt)("inlineCode",{parentName:"li"},"RETURNING *")," on the mutations), you\nmay also have to miss out on computed columns (because we pass the entire row\nobject to the function, though these typically still work if you're using\n",(0,r.kt)("inlineCode",{parentName:"li"},"LANGUAGE sql")," rather than ",(0,r.kt)("inlineCode",{parentName:"li"},"LANGUAGE plpgsql"),"/etc). It's recommended that you\ninstead split your tables on permission boundaries and use one-to-one\nrelations to join them together again - this also makes writing your RBAC/RLS\npolicies simpler. If you want to omit a column entirely then you can use the\n",(0,r.kt)("a",{parentName:"li",href:"./smart-comments/#omitting"},(0,r.kt)("inlineCode",{parentName:"a"},"@omit")," smart comment"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function restrictions"),": we have pretty good support for PostgreSQL\nfunctions, but there's some\n",(0,r.kt)("a",{parentName:"li",href:"./function-restrictions/"},"common function restrictions")," you should check out."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Use unique constraints")," rather than unique indexes when appropriate: we use\nunique constraints to create mutations such as ",(0,r.kt)("inlineCode",{parentName:"li"},"updateUserByUsername"),'; note\nthat "PostgreSQL automatically creates a unique index when a unique constraint\nor primary key is defined for a table." --\n',(0,r.kt)("a",{parentName:"li",href:"https://www.postgresql.org/docs/current/static/indexes-unique.html"},"PG docs")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Use the defaults")," for formatting output; for example we only support the\ndefault ",(0,r.kt)("inlineCode",{parentName:"li"},"intervalstyle = 'postgres'")," rather than ",(0,r.kt)("inlineCode",{parentName:"li"},"intervalstyle = 'iso_8601'"),".\nMany times this can be solved by returning the relevant default setting value\nfrom the ",(0,r.kt)("a",{parentName:"li",href:"./usage-library/#pgsettings-function"},"pgSettings function"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Use UTF8 encoding"),": GraphQL operates over the UTF8 character set, using\ndifferent encodings may impact your ability to store/retrieve certain values.")),(0,r.kt)("p",null,"On top of this standard PostgreSQL best practices apply: use indexes carefully\nfor performance, use constraints to ensure your data is valid and consistent,\nuse triggers to take an action when something happens, etc."),(0,r.kt)("h3",{id:"nodejs-use-the-lts"},"Node.js: use the LTS"),(0,r.kt)("p",null,"From PostGraphile v4 onwards, PostGraphile requires Node.js version 8.6+ which\nprovides native support for ",(0,r.kt)("inlineCode",{parentName:"p"},"async"),"/",(0,r.kt)("inlineCode",{parentName:"p"},"await")," and supports many of the ES2017 and\nES2018 features."),(0,r.kt)("h3",{id:"postgresql-use-latest"},"PostgreSQL: use latest"),(0,r.kt)("p",null,"For best results we recommend you use the latest stable release of PostgreSQL\nthat we officially support (v14 at time of writing), however it should run well\non 9.6 or higher and anything that breaks v9.6 support will be deemed a breaking\nchange. The absolute earliest version it will run well against is v9.4, however\nwe do not support this version officially - we strongly recommend you upgrade."),(0,r.kt)("h4",{id:"pg-94-not-officially-supported-but-works"},"PG 9.4 ","[not officially supported, but works]"),(0,r.kt)("p",null,"Basic operation including introspection."),(0,r.kt)("h4",{id:"pg-95-not-officially-supported-but-works"},"PG 9.5 ","[not officially supported, but works]"),(0,r.kt)("p",null,"Introduces Row-Level Security - important for securing your schema."),(0,r.kt)("h4",{id:"pg-96-officially-supported"},"PG 9.6 ","[officially supported]"),(0,r.kt)("p",null,"Introduces the ",(0,r.kt)("inlineCode",{parentName:"p"},"missing_ok")," parameter to the ",(0,r.kt)("inlineCode",{parentName:"p"},"current_setting(name, missing_ok)"),"\nfunction - without this you'll need to ensure all ",(0,r.kt)("inlineCode",{parentName:"p"},"current_setting(name)")," calls\nreference settings that always exist (e.g. you may need to set them on the\ndatabase itself)."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"--watch")," is also only officially supported on 9.6+ (although it might work on\n9.5?)"),(0,r.kt)("h4",{id:"pg-10-officially-supported"},"PG 10 ","[officially supported]"),(0,r.kt)("p",null,"PostgreSQL 10 solves a number of performance issues - the most interesting of\nwhich for us is a significant performance boost to Row Level Security policies!"),(0,r.kt)("p",null,"Introduces\n",(0,r.kt)("a",{parentName:"p",href:"https://blog.2ndquadrant.com/postgresql-10-identity-columns/"},'"identity columns"'),"\nwhich we have preliminary support for."),(0,r.kt)("h4",{id:"pg-11-officially-supported"},"PG 11 ","[officially supported]"),(0,r.kt)("p",null,"Works well."),(0,r.kt)("h4",{id:"pg-12-officially-supported"},"PG 12 ","[officially supported]"),(0,r.kt)("p",null,"Works well."),(0,r.kt)("h4",{id:"pg-13-officially-supported"},"PG 13 ","[officially supported]"),(0,r.kt)("p",null,"Works well."),(0,r.kt)("h4",{id:"pg-14-officially-supported"},"PG 14 ","[officially supported]"),(0,r.kt)("p",null,"Works well."),(0,r.kt)("h3",{id:"operating-system"},"Operating system"),(0,r.kt)("p",null,"PostGraphile is developed on Mac OS X and tested on GNU/Linux. It works on\nWindows and we would like to officially support Windows but no-one in the core\nteam uses Windows so we need your help for this. Please get in touch if this is\nsomething you'd like to help with."))}c.isMDXComponent=!0}}]);