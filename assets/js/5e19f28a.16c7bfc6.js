"use strict";(self.webpackChunk_localrepo_postgraphile_website=self.webpackChunk_localrepo_postgraphile_website||[]).push([[4136],{30876:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>k});var a=t(2784);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=a.createContext({}),p=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},d=function(e){var n=p(e.components);return a.createElement(s.Provider,{value:n},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),c=p(t),m=o,k=c["".concat(s,".").concat(m)]||c[m]||u[m]||r;return t?a.createElement(k,l(l({ref:n},d),{},{components:t})):a.createElement(k,l({ref:n},d))}));function k(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,l=new Array(r);l[0]=m;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i[c]="string"==typeof e?e:o,l[1]=i;for(var p=2;p<r;p++)l[p]=t[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},27343:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>r,metadata:()=>i,toc:()=>p});var a=t(7896),o=(t(2784),t(30876));const r={layout:"page",path:"/postgraphile/running-postgraphile-in-docker/",title:"Running PostGraphile in Docker"},l=void 0,i={unversionedId:"running-postgraphile-in-docker",id:"running-postgraphile-in-docker",title:"Running PostGraphile in Docker",description:"This documentation is copied from Version 4 and has not been updated to Version",source:"@site/postgraphile/running-postgraphile-in-docker.md",sourceDirName:".",slug:"/running-postgraphile-in-docker",permalink:"/postgraphile/next/running-postgraphile-in-docker",draft:!1,editUrl:"https://github.com/graphile/crystal/tree/main/postgraphile/website/postgraphile/running-postgraphile-in-docker.md",tags:[],version:"current",frontMatter:{layout:"page",path:"/postgraphile/running-postgraphile-in-docker/",title:"Running PostGraphile in Docker"},sidebar:"docs",previous:{title:"Multiple GraphQL schemas with PostGraphile",permalink:"/postgraphile/next/multiple-schemas"},next:{title:"Running PostGraphile as a library in Docker",permalink:"/postgraphile/next/running-postgraphile-as-a-library-in-docker"}},s={},p=[{value:"Requirements",id:"requirements",level:3},{value:"Install Docker and Docker Compose on Linux",id:"install-docker-and-docker-compose-on-linux",level:4},{value:"Docker",id:"docker",level:5},{value:"Docker Compose",id:"docker-compose",level:5},{value:"Install Docker on Windows Pro",id:"install-docker-on-windows-pro",level:4},{value:"Docker Desktop for Windows",id:"docker-desktop-for-windows",level:5},{value:"Install Docker on Windows Home",id:"install-docker-on-windows-home",level:4},{value:"Docker Toolbox for Windows",id:"docker-toolbox-for-windows",level:5},{value:"Create PostgreSQL Container",id:"create-postgresql-container",level:3},{value:"Setup Environment Variables",id:"setup-environment-variables",level:4},{value:"Create Database Initialization Files",id:"create-database-initialization-files",level:4},{value:"Create PostgreSQL Dockerfile",id:"create-postgresql-dockerfile",level:4},{value:"Create Docker Compose File",id:"create-docker-compose-file",level:4},{value:"Parameters description",id:"parameters-description",level:5},{value:"Create PostGraphile Container",id:"create-postgraphile-container",level:3},{value:"Update Environment Variables",id:"update-environment-variables",level:4},{value:"Create PostGraphile Dockerfile",id:"create-postgraphile-dockerfile",level:4},{value:"Update Docker Compose File",id:"update-docker-compose-file",level:4},{value:"Build Images And Run Containers",id:"build-images-and-run-containers",level:3},{value:"Build Images",id:"build-images",level:4},{value:"Run Containers",id:"run-containers",level:4},{value:"Re-initialize The Database",id:"re-initialize-the-database",level:4},{value:"Add Custom Plugin",id:"add-custom-plugin",level:3},{value:"makeWrapResolversPlugin",id:"makewrapresolversplugin",level:4},{value:"Queries And Mutations Examples",id:"queries-and-mutations-examples",level:3},{value:"Queries",id:"queries",level:4},{value:"Mutations",id:"mutations",level:4}],d={toc:p},c="wrapper";function u(e){let{components:n,...t}=e;return(0,o.kt)(c,(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("admonition",{type:"caution"},(0,o.kt)("p",{parentName:"admonition"},"This documentation is copied from Version 4 and has not been updated to Version\n5 yet; it may not be valid.")),(0,o.kt)("p",null,"The following guide describes how to run a network of Docker containers on a\nlocal machine, including one container for a PostgreSQL database and one\ncontainer for PostGraphile. A the end of this guide, you will have a GraphQL API\nexposing data from a PostgreSQL database, both running locally on your machine\nin separate Docker containers. It has been developed and tested on:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Linux"),(0,o.kt)("li",{parentName:"ul"},"Windows Pro"),(0,o.kt)("li",{parentName:"ul"},"Windows Home")),(0,o.kt)("h3",{id:"requirements"},"Requirements"),(0,o.kt)("p",null,"This requires to have Docker and Docker Compose installed on your workstation.\nIf you are new to Docker and need to install it, you can refer to their\n",(0,o.kt)("a",{parentName:"p",href:"https://docs.docker.com/"},"official documentation")," or follow the steps below."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#install-docker-and-docker-compose-on-linux"},"Install Docker and Docker Compose on Linux")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#install-docker-on-windows-pro"},"Install Docker on Windows Pro")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#install-docker-on-windows-home"},"Install Docker on Windows Home"))),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Note: If you use Docker Desktop for Windows, it comes automatically with\nDocker Compose.")),(0,o.kt)("h4",{id:"install-docker-and-docker-compose-on-linux"},"Install Docker and Docker Compose on Linux"),(0,o.kt)("h5",{id:"docker"},"Docker"),(0,o.kt)("p",null,"Add the Docker repository to your Linux repository. Execute the following\ncommands in a terminal window."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},'$ sudo apt-get update\n$ sudo apt-get install apt-transport-https ca-certificates curl software-properties-common\n$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -\n$ sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"\n')),(0,o.kt)("p",null,"Install Docker Community Edition."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shellsession"},"$ sudo apt-get update\n$ sudo apt-get install docker-ce\n")),(0,o.kt)("p",null,"Add your user to the docker group to setup its permissions. ",(0,o.kt)("strong",{parentName:"p"},"Make sure to\nrestart your machine after executing this command.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"$ sudo usermod -a -G docker <username>\n")),(0,o.kt)("p",null,"Test your Docker installation. Executing the following command will\nautomatically download the ",(0,o.kt)("inlineCode",{parentName:"p"},"hello-world")," Docker image if it does not exist and\nrun it."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"$ docker run hello-world\n")),(0,o.kt)("p",null,"Remove the ",(0,o.kt)("inlineCode",{parentName:"p"},"hello-world")," image once you're done."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"$ docker image ls\n$ docker rmi -f hello-world\n")),(0,o.kt)("h5",{id:"docker-compose"},"Docker Compose"),(0,o.kt)("p",null,"Docker Compose helps you to run a network of several containers at once thanks\nto configuration files instead of providing all arguments in the command line\ninterface. It makes it easier to manage your containers as command lines can\nbecome very long and unreadable due to the high number of arguments. Execute the\nfollowing command in a terminal window."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"$ sudo apt install docker-compose\n")),(0,o.kt)("h4",{id:"install-docker-on-windows-pro"},"Install Docker on Windows Pro"),(0,o.kt)("h5",{id:"docker-desktop-for-windows"},"Docker Desktop for Windows"),(0,o.kt)("p",null,"Install Docker Community Edition for Windows from the following the URL:\n",(0,o.kt)("a",{parentName:"p",href:"https://hub.docker.com/editions/community/docker-ce-desktop-windows"},"Docker Desktop for Windows"),".\nJust follow the default installation settings. It comes automatically with\nDocker Compose."),(0,o.kt)("h4",{id:"install-docker-on-windows-home"},"Install Docker on Windows Home"),(0,o.kt)("h5",{id:"docker-toolbox-for-windows"},"Docker Toolbox for Windows"),(0,o.kt)("p",null,"Install Docker Toolbox for Windows from the following the URL:\n",(0,o.kt)("a",{parentName:"p",href:"https://docs.docker.com/toolbox/overview"},"Docker Toolbox for Windows"),". Just\nfollow the default installation settings. It comes automatically with Docker\nCompose."),(0,o.kt)("h3",{id:"create-postgresql-container"},"Create PostgreSQL Container"),(0,o.kt)("h4",{id:"setup-environment-variables"},"Setup Environment Variables"),(0,o.kt)("p",null,"Create a new file ",(0,o.kt)("inlineCode",{parentName:"p"},".env")," at the root of the repository with the content below.\nThis file will be used by Docker to load configuration parameters into\nenvironment variables. In particular:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"POSTGRES_DB"),": name of the database to be created in the PostgreSQL container."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"POSTGRES_USER"),": default admin user created upon database initialization."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"POSTGRES_PASSWORD"),": password of the default admin user.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"# DB\n# Parameters used by db container\nPOSTGRES_DB=forum_example\nPOSTGRES_USER=postgres\nPOSTGRES_PASSWORD=change_me\n")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Note: a better way to manager the database password would be to use\n",(0,o.kt)("a",{parentName:"p",href:"https://docs.docker.com/engine/reference/commandline/secret/"},"Docker Secrets"),".")),(0,o.kt)("h4",{id:"create-database-initialization-files"},"Create Database Initialization Files"),(0,o.kt)("p",null,"Create a new folder ",(0,o.kt)("inlineCode",{parentName:"p"},"db")," at the root of the repository. It will be used to store\nthe files necessary to create the PostgreSQL container. In the ",(0,o.kt)("inlineCode",{parentName:"p"},"db")," folder,\ncreate a new subfolder ",(0,o.kt)("inlineCode",{parentName:"p"},"init")," which will contain the SQL files used to\ninitialize the PostgreSQL database. Files located in the ",(0,o.kt)("inlineCode",{parentName:"p"},"init")," folder will be\nexecuted in sequence order when PostgreSQL initialize the database."),(0,o.kt)("p",null,"In this guide we will use a simple forum example. The database will contain two\ntables: ",(0,o.kt)("inlineCode",{parentName:"p"},"user")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"post"),". There is a relationship between ",(0,o.kt)("inlineCode",{parentName:"p"},"user")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"post"),' as\none user can have one or several posts. It is a "one-to-many" relationship (one\nparent, many children). The ',(0,o.kt)("inlineCode",{parentName:"p"},"author_id")," column in the ",(0,o.kt)("inlineCode",{parentName:"p"},"post")," will be used as a\nforeign key of the ",(0,o.kt)("inlineCode",{parentName:"p"},"user")," table."),(0,o.kt)("p",null,"Create a first file ",(0,o.kt)("inlineCode",{parentName:"p"},"00-database.sql")," containing the database schema definition\nas below."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"\\connect forum_example;\n\n/*Create user table in public schema*/\nCREATE TABLE public.user (\n    id SERIAL PRIMARY KEY,\n    username TEXT,\n    created_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\nCOMMENT ON TABLE public.user IS\n'Forum users.';\n\n/*Create post table in public schema*/\nCREATE TABLE public.post (\n    id SERIAL PRIMARY KEY,\n    title TEXT,\n    body TEXT,\n    created_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    author_id INTEGER NOT NULL REFERENCES public.user(id)\n);\n\nCOMMENT ON TABLE public.post IS\n'Forum posts written by a user.';\n")),(0,o.kt)("p",null,"For the sake of the example, we will also create a second file ",(0,o.kt)("inlineCode",{parentName:"p"},"01-data.sql")," to\npopulate the database with some dummy data."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"\\connect forum_example;\n\n/*Create some dummy users*/\nINSERT INTO public.user (username) VALUES\n('Benjie'),\n('Singingwolfboy'),\n('Lexius');\n\n/*Create some dummy posts*/\nINSERT INTO public.post (title, body, author_id) VALUES\n('First post example', 'Lorem ipsum dolor sit amet', 1),\n('Second post example', 'Consectetur adipiscing elit', 2),\n('Third post example', 'Aenean blandit felis sodales', 3);\n")),(0,o.kt)("h4",{id:"create-postgresql-dockerfile"},"Create PostgreSQL Dockerfile"),(0,o.kt)("p",null,"The Dockerfile is used by Docker as a blueprint to build Docker images. Docker\ncontainers are later on created based on these Docker images. More information\nis available on the official\n",(0,o.kt)("a",{parentName:"p",href:"https://hub.docker.com/_/postgres"},"Postgres Docker Images")," but the standard\nDockerfile for PostgreSQL is extremely simple. In the folder ",(0,o.kt)("inlineCode",{parentName:"p"},"db")," (not in the\nfolder ",(0,o.kt)("inlineCode",{parentName:"p"},"init"),"), create a new file named ",(0,o.kt)("inlineCode",{parentName:"p"},"Dockerfile")," with the following content."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dockerfile"},"FROM postgres:11.0-alpine\nCOPY ./init/ /docker-entrypoint-initdb.d/\n")),(0,o.kt)("p",null,"The first line ",(0,o.kt)("inlineCode",{parentName:"p"},"FROM postgres:alpine")," indicates to build the Docker image based\non the official PostgreSQL Docker image running in an Alpine Linux container.\nThe second line ",(0,o.kt)("inlineCode",{parentName:"p"},"COPY ./init/ /docker-entrypoint-initdb.d/")," will copy the\ndatabase initialization files (SQL) into the folder ",(0,o.kt)("inlineCode",{parentName:"p"},"docker-entrypoint-initdb.d"),"\nlocated in the Docker container. This folder is read by PostgreSQL upon database\ninitialization and all its content is executed."),(0,o.kt)("h4",{id:"create-docker-compose-file"},"Create Docker Compose File"),(0,o.kt)("p",null,"Docker command lines can be verbose with a lot of parameters so we will use\nDocker Compose to orchestrate the execution of our containers. Create a new file\n",(0,o.kt)("inlineCode",{parentName:"p"},"docker-compose.yml")," at the root of the repository with the following content."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yml"},'version: "3.3"\nservices:\n  db:\n    container_name: forum-example-db\n    restart: always\n    image: forum-example-db\n    build:\n      context: ./db\n    volumes:\n      - db:/var/lib/postgresql/data\n    env_file:\n      - ./.env\n    networks:\n      - network\n    ports:\n      - 5432:5432\n\nnetworks:\n  network:\n\nvolumes:\n  db:\n')),(0,o.kt)("h5",{id:"parameters-description"},"Parameters description"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,o.kt)("th",{parentName:"tr",align:null},"Description"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},"db")),(0,o.kt)("td",{parentName:"tr",align:null},"Names of the services run by Docker Compose.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},"container_name")),(0,o.kt)("td",{parentName:"tr",align:null},"Guess what? It's the container name!")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},"image")),(0,o.kt)("td",{parentName:"tr",align:null},"Name of the image to use to run the container.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},"build")),(0,o.kt)("td",{parentName:"tr",align:null},"When a build context is provided, Docker Compose will build a custom image using the Dockerfile located in the context folder.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},"context")),(0,o.kt)("td",{parentName:"tr",align:null},"Indicates the folder where to find the Dockerfile to build the image.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},"volumes")),(0,o.kt)("td",{parentName:"tr",align:null},"Mapping between the Docker volume and the PostgreSQL folder in your container, in format ",(0,o.kt)("inlineCode",{parentName:"td"},"docker_volume:container_folder"),". All the files generated in the ",(0,o.kt)("inlineCode",{parentName:"td"},"container_folder")," will be copied in the ",(0,o.kt)("inlineCode",{parentName:"td"},"docker_volume")," so that you can preserve and retrieve your data when stopping/restarting the container. The Docker volume is automatically created when running the db container for the first time.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},"env_file")),(0,o.kt)("td",{parentName:"tr",align:null},"Path to the configuration file containing environment variables for the container. See ",(0,o.kt)("strong",{parentName:"td"},"Setup Environment Variables")," above.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},"networks")),(0,o.kt)("td",{parentName:"tr",align:null},"Networks are used to group and connect containers as part of a same network.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},"ports")),(0,o.kt)("td",{parentName:"tr",align:null},"Port, mapping between the port of your host machine and the port of your container, in format ",(0,o.kt)("inlineCode",{parentName:"td"},"host_port:container_port"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},"command")),(0,o.kt)("td",{parentName:"tr",align:null},"Command to be executed after the container starts. Each argument must be provided in a separate list item.")))),(0,o.kt)("p",null,"At this stage, the repository should look like this."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"/\n\u251c\u2500 db/\n|  \u251c\u2500 init/\n|  |  \u251c\u2500 00-database.sql\n|  |  \u2514\u2500 01-data.sql\n|  \u2514\u2500 Dockerfile\n\u251c\u2500 .env\n\u2514\u2500 docker-compose.yml\n")),(0,o.kt)("h3",{id:"create-postgraphile-container"},"Create PostGraphile Container"),(0,o.kt)("h4",{id:"update-environment-variables"},"Update Environment Variables"),(0,o.kt)("p",null,"Update the file ",(0,o.kt)("inlineCode",{parentName:"p"},".env")," to add the ",(0,o.kt)("inlineCode",{parentName:"p"},"DATABASE_URL")," which will be used by\nPostGraphile to connect to the PostgreSQL database."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"[...]\n# GRAPHQL\n# Parameters used by graphql container\nDATABASE_URL=postgres://postgres:change_me@db:5432/forum_example\n")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Note: The ",(0,o.kt)("inlineCode",{parentName:"p"},"DATABASE_URL")," follows the syntax\n",(0,o.kt)("inlineCode",{parentName:"p"},"postgres://<user>:<password>@db:5432/<db_name>"),".")),(0,o.kt)("h4",{id:"create-postgraphile-dockerfile"},"Create PostGraphile Dockerfile"),(0,o.kt)("p",null,"Create a new folder ",(0,o.kt)("inlineCode",{parentName:"p"},"graphql")," at the root of the repository. It will be used to\nstore the files necessary to create the PostGraphile container. Create a new\nfile ",(0,o.kt)("inlineCode",{parentName:"p"},"Dockerfile")," in the ",(0,o.kt)("inlineCode",{parentName:"p"},"graphql")," folder with the following content. You will\nnotice we include the excellent plugin Connection Filter."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dockerfile"},'FROM node:alpine\nLABEL description="Instant high-performance GraphQL API for your PostgreSQL database https://github.com/graphile/postgraphile"\n\n# Install PostGraphile and PostGraphile connection filter plugin\nRUN npm install -g postgraphile\nRUN npm install -g postgraphile-plugin-connection-filter\n\nEXPOSE 5000\nENTRYPOINT ["postgraphile", "-n", "0.0.0.0"]\n')),(0,o.kt)("h4",{id:"update-docker-compose-file"},"Update Docker Compose File"),(0,o.kt)("p",null,"Update the file ",(0,o.kt)("inlineCode",{parentName:"p"},"docker-compose.yml")," under the ",(0,o.kt)("inlineCode",{parentName:"p"},"services")," section to include the\nGraphQL service."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yml"},'version: "3.3"\nservices:\n    db: [...]\n\n    graphql:\n        container_name: forum-example-graphql\n        restart: always\n        image: forum-example-graphql\n        build:\n            context: ./graphql\n        env_file:\n            - ./.env\n        depends_on:\n            - db\n        networks:\n            - network\n        ports:\n            - 5433:5433\n        command: ["--connection", "${DATABASE_URL}", "--port", "5433", "--schema", "public", "--append-plugins", "postgraphile-plugin-connection-filter"]\n[...]\n')),(0,o.kt)("p",null,"At this stage, the repository should look like this."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"/\n\u251c\u2500 db/\n|  \u251c\u2500 init/\n|  |  \u251c\u2500 00-database.sql\n|  |  \u2514\u2500 01-data.sql\n|  \u2514\u2500 Dockerfile\n\u251c\u2500 graphql/\n|  \u2514\u2500 Dockerfile\n\u251c\u2500 .env\n\u2514\u2500 docker-compose.yml\n")),(0,o.kt)("h3",{id:"build-images-and-run-containers"},"Build Images And Run Containers"),(0,o.kt)("h4",{id:"build-images"},"Build Images"),(0,o.kt)("p",null,"You can build the Docker images by executing the following command from the root\nof the repository."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"# Build images for all services in docker-compose.yml\n$ docker-compose build\n\n# You can also build images one by one\n# For instance you can build the database image like this\n$ docker-compose build db\n\n# And build the graphql image like this\n$ docker-compose build graphql\n")),(0,o.kt)("h4",{id:"run-containers"},"Run Containers"),(0,o.kt)("p",null,"You can run the Docker containers by executing the following command from the\nroot of the repository."),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Note: when running the database container for the first time, Docker will\nautomatically create a Docker Volume to persist the data from the database.\nThe Docker Volume is automatically named as ",(0,o.kt)("inlineCode",{parentName:"p"},"<your_repository_name>_db"),".")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"# Run containers for all services in docker-compose.yml\n$ docker-compose up\n\n# Run containers as daemon (in background)\n$ docker-compose up -d\n\n# Run only the database container as daemon\n$ docker-compose up -d db\n\n# Run only the GraphQL container as daemon\n$ docker-compose up -d graphql\n")),(0,o.kt)("p",null,"Each container can be accessed at the following addresses."),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Container"),(0,o.kt)("th",{parentName:"tr",align:null},"Docker on Linux / Windows Pro"),(0,o.kt)("th",{parentName:"tr",align:null},"Docker on Windows Home"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"GraphQL API Documentation"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"http://localhost:5433/graphiql")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"http://your_docker_machine_ip:5433/graphiql"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"GraphQL API"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"http://localhost:5433/graphql")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"http://your_docker_machine_ip:5433/graphql"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"PostgreSQL Database"),(0,o.kt)("td",{parentName:"tr",align:null},"host: ",(0,o.kt)("inlineCode",{parentName:"td"},"localhost"),", port: ",(0,o.kt)("inlineCode",{parentName:"td"},"5432")),(0,o.kt)("td",{parentName:"tr",align:null},"host: ",(0,o.kt)("inlineCode",{parentName:"td"},"your_docker_machine_ip"),", port: ",(0,o.kt)("inlineCode",{parentName:"td"},"5432"))))),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Note: if you run Docker Toolbox on Windows Home, you can get your Docker\nmachine IP address with the command ",(0,o.kt)("inlineCode",{parentName:"p"},"$ docker-machine ip default"),".")),(0,o.kt)("h4",{id:"re-initialize-the-database"},"Re-initialize The Database"),(0,o.kt)("p",null,"In case you do changes to the database schema by modifying the files in\n",(0,o.kt)("inlineCode",{parentName:"p"},"/db/init"),", you will need to re-initialize the database to see these changes.\nThis means you need to delete the Docker Volume, the database Docker Image and\nrebuild it."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"# Stop running containers\n$ docker-compose down\n\n# List Docker volumes\n$ docker volume ls\n\n# Delete volume\n$ docker volume rm <your_repository_name>_db\n\n# Delete database image to force rebuild\n$ docker rmi db\n\n# Run containers (will automatically rebuild the image)\n$ docker-compose up\n")),(0,o.kt)("h3",{id:"add-custom-plugin"},"Add Custom Plugin"),(0,o.kt)("h4",{id:"makewrapresolversplugin"},"makeWrapResolversPlugin"),(0,o.kt)("p",null,"This section is optional but describes how to wrap a resolver generated by\nPostGraphile in order to customize it. In the folder ",(0,o.kt)("inlineCode",{parentName:"p"},"graphql"),", create a new\nsubfolder named ",(0,o.kt)("inlineCode",{parentName:"p"},"custom-plugin"),". In this folder create a new file ",(0,o.kt)("inlineCode",{parentName:"p"},"package.json"),"\nwith the following content (you can update it to your convenience)."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "name": "custom-plugin",\n  "version": "0.0.1",\n  "description": "Custom plugin example for PostGraphile.",\n  "main": "index.js",\n  "scripts": {\n    "test": "echo \\"Error: no test specified\\" && exit 1"\n  },\n  "author": "Alexis ROLLAND",\n  "license": "Apache-2.0",\n  "dependencies": {\n    "graphile-utils": "^4.5.6",\n    "postgraphile": "^4.5.5"\n  }\n}\n')),(0,o.kt)("p",null,"In the same folder ",(0,o.kt)("inlineCode",{parentName:"p"},"custom-plugin"),", create a new file ",(0,o.kt)("inlineCode",{parentName:"p"},"index.js")," with the\nfollowing content."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'const { makeWrapResolversPlugin } = require("graphile-utils");\n\n// Create custom wrapper for resolver createUser\nconst createUserResolverWrapper = () => {\n  return async (resolve, source, args, context, resolveInfo) => {\n    // You can do something before the resolver executes\n    console.info("Hello world!");\n    console.info(args);\n\n    // Let resolver execute against database\n    const result = await resolve();\n\n    // You can do something after the resolver executes\n    console.info("Hello again!");\n    console.info(result);\n\n    return result;\n  };\n};\n\n// Register custom resolvers\nmodule.exports = makeWrapResolversPlugin({\n  Mutation: {\n    createUser: createUserResolverWrapper(),\n  },\n});\n')),(0,o.kt)("p",null,"In the ",(0,o.kt)("inlineCode",{parentName:"p"},"graphql")," folder, update the ",(0,o.kt)("inlineCode",{parentName:"p"},"Dockerfile")," so that it looks like the one\nbelow."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dockerfile"},'FROM node:alpine\nLABEL description="Instant high-performance GraphQL API for your PostgreSQL database https://github.com/graphile/postgraphile"\n\n# Install PostGraphile and PostGraphile connection filter plugin\nRUN npm install -g postgraphile\nRUN npm install -g postgraphile-plugin-connection-filter\n\n# Install custom plugin\nCOPY ./custom-plugin /tmp/custom-plugin\nRUN cd /tmp/custom-plugin && npm pack\nRUN npm install -g /tmp/custom-plugin/custom-plugin-0.0.1.tgz\nRUN rm -rf /tmp/custom-plugin\n\nEXPOSE 5000\nENTRYPOINT ["postgraphile", "-n", "0.0.0.0"]\n')),(0,o.kt)("p",null,"In the file ",(0,o.kt)("inlineCode",{parentName:"p"},"docker-compose.yml"),", add the custom plugin in the ",(0,o.kt)("inlineCode",{parentName:"p"},"graphql")," service\n",(0,o.kt)("inlineCode",{parentName:"p"},"command")," parameter."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yml"},'version: "3.3"\nservices:\n    db:\n        [...]\n\n    graphql:\n        [...]\n        command:\n            [\n                "--connection",\n                "${DATABASE_URL}",\n                "--port",\n                "5433",\n                "--schema",\n                "public",\n                "--append-plugins",\n                "postgraphile-plugin-connection-filter,custom-plugin",\n            ]\n[...]\n')),(0,o.kt)("p",null,"At this stage, the repository should look like this."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"/\n\u251c\u2500 db/\n|  \u251c\u2500 init/\n|  |  \u251c\u2500 00-database.sql\n|  |  \u2514\u2500 01-data.sql\n|  \u2514\u2500 Dockerfile\n\u251c\u2500 graphql/\n|  \u251c\u2500 custom-plugin/\n|  |  \u251c\u2500 index.js\n|  |  \u2514\u2500 package.json\n|  \u2514\u2500 Dockerfile\n\u251c\u2500 .env\n\u2514\u2500 docker-compose.yml\n")),(0,o.kt)("p",null,"Finally rebuild and rerun the GraphQL container."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"# Shut down containers\n$ docker-compose down\n\n# Rebuild the GraphQL container\n$ docker-compose build graphql\n\n# Rerun containers\n$ docker-compose up\n")),(0,o.kt)("p",null,"If you execute a ",(0,o.kt)("inlineCode",{parentName:"p"},"createUser")," mutation like in the example provided below, you\nwill notice the log messages from the custom plugin printing in your terminal."),(0,o.kt)("h3",{id:"queries-and-mutations-examples"},"Queries And Mutations Examples"),(0,o.kt)("h4",{id:"queries"},"Queries"),(0,o.kt)("p",null,"Example of query to get all posts and their author."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"query {\n  allPosts {\n    nodes {\n      id\n      title\n      body\n      userByAuthorId {\n        username\n      }\n    }\n  }\n}\n")),(0,o.kt)("h4",{id:"mutations"},"Mutations"),(0,o.kt)("p",null,"Example of mutation to create a new user."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'mutation {\n  createUser(input: {user: {username: "Bob"}}) {\n    user {\n      id\n      username\n      createdDate\n    }\n  }\n}\n')))}u.isMDXComponent=!0}}]);