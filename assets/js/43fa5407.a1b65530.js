"use strict";(self.webpackChunk_localrepo_grafast_website=self.webpackChunk_localrepo_grafast_website||[]).push([[4933],{30876:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var r=n(2784);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),s=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=s(e.components);return r.createElement(l.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),m=s(n),d=a,h=m["".concat(l,".").concat(d)]||m[d]||u[d]||i;return n?r.createElement(h,o(o({ref:t},c),{},{components:n})):r.createElement(h,o({ref:t},c))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=d;var p={};for(var l in t)hasOwnProperty.call(t,l)&&(p[l]=t[l]);p.originalType=e,p[m]="string"==typeof e?e:a,o[1]=p;for(var s=2;s<i;s++)o[s]=n[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},29803:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>p,toc:()=>s});var r=n(7896),a=(n(2784),n(30876));const i={},o="pgPolymorphic",p={unversionedId:"step-library/dataplan-pg/pgPolymorphic",id:"step-library/dataplan-pg/pgPolymorphic",title:"pgPolymorphic",description:"This step class gives just one of many ways of supporting polymorphism in",source:"@site/grafast/step-library/dataplan-pg/pgPolymorphic.md",sourceDirName:"step-library/dataplan-pg",slug:"/step-library/dataplan-pg/pgPolymorphic",permalink:"/grafast/step-library/dataplan-pg/pgPolymorphic",draft:!1,editUrl:"https://github.com/graphile/crystal/tree/main/grafast/website/grafast/step-library/dataplan-pg/pgPolymorphic.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"pgInsertSingle",permalink:"/grafast/step-library/dataplan-pg/pgInsertSingle"},next:{title:"pgSingleTablePolymorphic",permalink:"/grafast/step-library/dataplan-pg/pgSingleTablePolymorphic"}},l={},s=[{value:"Example",id:"example",level:2}],c={toc:s},m="wrapper";function u(e){let{components:t,...n}=e;return(0,a.kt)(m,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"pgpolymorphic"},"pgPolymorphic"),(0,a.kt)("p",null,"This step class gives just one of many ways of supporting polymorphism in\n",(0,a.kt)("inlineCode",{parentName:"p"},"@dataplan/pg"),"; we recommend that you read the ",(0,a.kt)("a",{parentName:"p",href:"./polymorphism"},"polymorphism"),"\ndocumentation before deciding whether or not you need this step, since it is\none of the more verbose options! It's likely that a simpler approach may suit\nyou."),(0,a.kt)("p",null,"pgPolymorphic works by taking a record step (a ",(0,a.kt)("inlineCode",{parentName:"p"},"pgSelectSingle"),"), a specifier\nstep (an arbitrary step) and a entity type map. The entity type map keys are\nthe GraphQL type names that are possible, and for each of these the value is an\nobject with the following properties:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"match")," - a function that is passed the specifier data and returns true if\nit's a match for this type"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"plan")," - a function that is passed the specifier ",(0,a.kt)("em",{parentName:"li"},"step")," of a ",(0,a.kt)("em",{parentName:"li"},"matching"),"\nspecifier and the original record step, and should return a step representing\nthe record identified by this specifier.")),(0,a.kt)("h2",{id:"example"},"Example"),(0,a.kt)("p",null,'Imagine we have a database in which you can favourite records from three\ndifferent tables: "people", "posts" and "comments".'),(0,a.kt)("p",null,'These favourites are stored in a single "favourites" table, which among other\nattributes (such as the id of the user doing the favouriting) has three\nattributes to indicate which entity was favourited: ',(0,a.kt)("inlineCode",{parentName:"p"},"liked_person_id"),",\n",(0,a.kt)("inlineCode",{parentName:"p"},"liked_post_id"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"liked_comment_id"),'. These three attributes implement the "one\nof" pattern - exactly one of these three attributes will be set, the others\nbeing null.'),(0,a.kt)("p",null,"We want to retrieve the entity that you have favourited, based on the step\n",(0,a.kt)("inlineCode",{parentName:"p"},"$favourite"),' which represents the row in the "favourites" table.'),(0,a.kt)("p",null,"Using the above knowledge, we can build a specifier step, ",(0,a.kt)("inlineCode",{parentName:"p"},"$specifier"),', that\ncontains all the data necessary to determine the polymorphic record we wish to\nretrieve by representing the three "one of" ids as a tuple (or list).'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'const $specifier = list([\n  $favourite.get("liked_person_id"),\n  $favourite.get("liked_post_id"),\n  $favourite.get("liked_comment_id"),\n]);\n')),(0,a.kt)("p",null,"We prepare our ",(0,a.kt)("inlineCode",{parentName:"p"},"personFavouriteEntityTypeMap")," matcher based around this specifier,\nit looks at the tuple and determines:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"if the first entry in the tuple, the one associated with ",(0,a.kt)("inlineCode",{parentName:"li"},"liked_person_id"),",\nis not null then the record must represent a ",(0,a.kt)("inlineCode",{parentName:"li"},"Person"),", and we can get the\nrelated person from ",(0,a.kt)("inlineCode",{parentName:"li"},"personResource")," where ",(0,a.kt)("inlineCode",{parentName:"li"},"person_id")," is equal to this first\nentry in the tuple"),(0,a.kt)("li",{parentName:"ul"},"otherwise, if the second entry is not null then the record must represent a ",(0,a.kt)("inlineCode",{parentName:"li"},"Post"),", and we can\nget that post from ",(0,a.kt)("inlineCode",{parentName:"li"},"postResource")," in a similar way"),(0,a.kt)("li",{parentName:"ul"},"otherwise, if the third entry is not null then the record must represent a ",(0,a.kt)("inlineCode",{parentName:"li"},"Comment"),", and we can\nget that comment in a similar way")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const personFavouriteEntityTypeMap = {\n  Person: {\n    match: (specifier) => specifier[0] != null,\n    plan: ($specifier) => personResource.get({ person_id: $specifier.at(0) }),\n  },\n  Post: {\n    match: (specifier) => specifier[1] != null,\n    plan: ($specifier) => postResource.get({ post_id: $specifier.at(1) }),\n  },\n  Comment: {\n    match: (specifier) => specifier[2] != null,\n    plan: ($specifier) => commentResource.get({ comment_id: $specifier.at(2) }),\n  },\n};\n")),(0,a.kt)("p",null,"Finally we pass our record step (",(0,a.kt)("inlineCode",{parentName:"p"},"$favourite"),"), our specifier step\n(",(0,a.kt)("inlineCode",{parentName:"p"},"$specifier"),") and our matcher (",(0,a.kt)("inlineCode",{parentName:"p"},"personFavouriteEntityTypeMap"),") to\n",(0,a.kt)("inlineCode",{parentName:"p"},"pgPolymorphic")," and it will know how to retrieve the associated record - the\nperson, post or comment:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"return pgPolymorphic($favourite, $specifier, personFavouriteEntityTypeMap);\n")))}u.isMDXComponent=!0}}]);