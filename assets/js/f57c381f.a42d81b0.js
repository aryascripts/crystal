"use strict";(self.webpackChunk_localrepo_star_website=self.webpackChunk_localrepo_star_website||[]).push([[7473],{876:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var r=n(2784);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),l=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(s.Provider,{value:t},e.children)},p="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),p=l(n),d=o,m=p["".concat(s,".").concat(d)]||p[d]||f[d]||a;return n?r.createElement(m,i(i({ref:t},u),{},{components:n})):r.createElement(m,i({ref:t},u))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=d;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c[p]="string"==typeof e?e:o,i[1]=c;for(var l=2;l<a;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},3690:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>f,frontMatter:()=>a,metadata:()=>c,toc:()=>l});var r=n(7896),o=(n(2784),n(876));const a={sidebar_position:2,title:"te.ref()"},i="te.ref(val, name?)",c={unversionedId:"api/te-ref",id:"api/te-ref",title:"te.ref()",description:"(alias: te.reference)",source:"@site/tamedevil/api/te-ref.md",sourceDirName:"api",slug:"/api/te-ref",permalink:"/tamedevil/api/te-ref",draft:!1,editUrl:"https://github.com/graphile/crystal/tree/main/utils/website/tamedevil/api/te-ref.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,title:"te.ref()"},sidebar:"tutorialSidebar",previous:{title:"te ...",permalink:"/tamedevil/api/te"},next:{title:"te.lit()",permalink:"/tamedevil/api/te-lit"}},s={},l=[],u={toc:l},p="wrapper";function f(e){let{components:t,...n}=e;return(0,o.kt)(p,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"terefval-name"},(0,o.kt)("inlineCode",{parentName:"h1"},"te.ref(val, name?)")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"(alias: te.reference)")),(0,o.kt)("p",null,"Tells ",(0,o.kt)("inlineCode",{parentName:"p"},"te")," to pass the given value by reference into the scope of the function\nvia a closure, and returns an identifier that can be used to reference it. Note:\nthe identifier used will be randomized to avoid the risk of conflicts, so if you\nare building code that will ultimately return a function, we recommend giving\nthe ref an alias outside of the function to make the function text easier to\ndebug, e.g.:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'const source = new Source(/* ... */);\nconst spec = "some string here";\n\nconst plan = te.run`\\\n  const source = ${te.ref(source)};\n  return function plan($record) {\n    const $records = source.find(${te.lit(spec)});\n    return connection($records);\n  }\n`;\n\nassert.strictEqual(\n  plan.toString(),\n  `function plan($record) {\n    const $records = source.find("some string here");\n    return connection($records);\n  }`,\n);\n')),(0,o.kt)("p",null,"If you want to force a particular identifier to be used, you can pass the\n",(0,o.kt)("inlineCode",{parentName:"p"},"name"),", but then it's up to you to ensure that no conflicts take place:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'const source = new Source(/* ... */);\nconst spec = "some string here";\n\nconst plan = te.run`\\\n  return function plan($record) {\n    const $records = ${te.ref(source, "source")}.find(${te.lit(spec)});\n    return connection($records);\n  }\n`;\n\nassert.strictEqual(\n  plan.toString(),\n  `function plan($record) {\n    const $records = source.find("some string here");\n    return connection($records);\n  }`,\n);\n')))}f.isMDXComponent=!0}}]);