"use strict";(self.webpackChunk_localrepo_star_website=self.webpackChunk_localrepo_star_website||[]).push([[9704],{876:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var r=n(2784);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),s=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=s(n),h=a,f=u["".concat(p,".").concat(h)]||u[h]||d[h]||o;return n?r.createElement(f,i(i({ref:t},c),{},{components:n})):r.createElement(f,i({ref:t},c))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=h;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[u]="string"==typeof e?e:a,i[1]=l;for(var s=2;s<o;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},9493:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var r=n(7896),a=(n(2784),n(876));const o={sidebar_position:1},i="Graphile Export",l={unversionedId:"index",id:"index",title:"Graphile Export",description:"Graphile Export enables you to export a GraphQL Schema (or other code) as executable JavaScript code. You must, however, write your code in a way that makes it exportable; we have ESLint plugins to make this less onerous.",source:"@site/graphile-export/index.md",sourceDirName:".",slug:"/",permalink:"/graphile-export/",draft:!1,editUrl:"https://github.com/graphile/crystal/tree/main/utils/website/graphile-export/index.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",next:{title:"ESLint Plugin",permalink:"/graphile-export/eslint"}},p={},s=[{value:"How it works",id:"how-it-works",level:2}],c={toc:s},u="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"graphile-export"},"Graphile Export"),(0,a.kt)("p",null,"Graphile Export enables you to export a GraphQL Schema (or other code) as executable JavaScript code. You must, however, write your code in a way that makes it exportable; we have ESLint plugins to make this less onerous."),(0,a.kt)("h2",{id:"how-it-works"},"How it works"),(0,a.kt)("p",null,"The system works by converting values in memory into source code strings. One of\nthe key things that's challenging to export is functions (and function-derived\nthings such as classes). In JavaScript you can see the source code of a function\nby calling ",(0,a.kt)("inlineCode",{parentName:"p"},".toString()")," on it:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"> (function add(a, b) { return a + b }).toString()\n'function add(a, b) { return a + b }'\n")),(0,a.kt)("p",null,"However this quickly falls down if you are using values from a parent closure:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"> const a = 7;\nundefined\n> function add(b) { return a + b };\nundefined\n> add(3)\n10\n> add.toString()\n'function add(b) { return a + b }'\n")),(0,a.kt)("p",null,"See how the function definition string ",(0,a.kt)("inlineCode",{parentName:"p"},"add.toString()")," returns its definition,\nbut you cannot determine from that what the value of ",(0,a.kt)("inlineCode",{parentName:"p"},"a")," is. This is a problem."),(0,a.kt)("p",null,"Graphile Export solves this by having you define your functions a bit like React\nhooks - you must state the dependencies explicitly:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'> const { EXPORTABLE } = require("graphile-export")\nundefined\n> const a = 7;\nundefined\n> const add = EXPORTABLE((a) => function add(b) { return a + b; }, [a]);\nundefined\n')),(0,a.kt)("p",null,"When you do so, the ",(0,a.kt)("inlineCode",{parentName:"p"},"add")," function is augmented with the properties\n",(0,a.kt)("inlineCode",{parentName:"p"},"$exporter$factory")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"$exporter$args")," that represent the first and second\narguments to the ",(0,a.kt)("inlineCode",{parentName:"p"},"EXPORTABLE(factory, args, nameHint)")," function respectively."),(0,a.kt)("p",null,"The function still works as before:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"> add(3)\n10\n> add.toString()\n'function add(b) { return a + b; }'\n")),(0,a.kt)("p",null,"But ",(0,a.kt)("inlineCode",{parentName:"p"},"graphile-export"),' can access these special properties when it writes the\ncode out, and now it can see the value of that "invisible" ',(0,a.kt)("inlineCode",{parentName:"p"},"a=7"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"> add.$exporter$factory.toString()\n'(a) => function add(b) { return a + b; }'\n> add.$exporter$args\n[ 7 ]\n")),(0,a.kt)("p",null,"Thus everything that can have these kinds of hidden properties must be wrapped\nin an ",(0,a.kt)("inlineCode",{parentName:"p"},"EXPORTABLE")," call. Sometimes the inputs to the ",(0,a.kt)("inlineCode",{parentName:"p"},"EXPORTABLE")," call\nthemselves also have to be wrapped in an ",(0,a.kt)("inlineCode",{parentName:"p"},"EXPORTABLE")," call. You'll figure out\nwhich things need wrapping by looking at the exported code and seeing where\nreferences are broken."))}d.isMDXComponent=!0}}]);