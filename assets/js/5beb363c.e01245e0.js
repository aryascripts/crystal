"use strict";(self.webpackChunk_localrepo_postgraphile_website=self.webpackChunk_localrepo_postgraphile_website||[]).push([[2488],{30876:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var i=n(2784);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=i.createContext({}),p=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=p(e.components);return i.createElement(s.Provider,{value:t},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},h=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=p(n),h=a,m=d["".concat(s,".").concat(h)]||d[h]||c[h]||r;return n?i.createElement(m,o(o({ref:t},u),{},{components:n})):i.createElement(m,o({ref:t},u))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,o=new Array(r);o[0]=h;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[d]="string"==typeof e?e:a,o[1]=l;for(var p=2;p<r;p++)o[p]=n[p];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}h.displayName="MDXCreateElement"},78454:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>c,frontMatter:()=>r,metadata:()=>l,toc:()=>p});var i=n(7896),a=(n(2784),n(30876));const r={layout:"page",path:"/postgraphile/node-id/",title:'Globally Unique Object Identification ("id" / "nodeId")'},o=void 0,l={unversionedId:"node-id",id:"node-id",title:'Globally Unique Object Identification ("id" / "nodeId")',description:"The [GraphQL Global Object Identification",source:"@site/postgraphile/node-id.md",sourceDirName:".",slug:"/node-id",permalink:"/postgraphile/next/node-id",draft:!1,editUrl:"https://github.com/graphile/crystal/tree/main/postgraphile/website/postgraphile/node-id.md",tags:[],version:"current",frontMatter:{layout:"page",path:"/postgraphile/node-id/",title:'Globally Unique Object Identification ("id" / "nodeId")'},sidebar:"docs",previous:{title:"CRUD mutations",permalink:"/postgraphile/next/crud-mutations"},next:{title:"Database Functions",permalink:"/postgraphile/next/functions"}},s={},p=[{value:"Disabling the Global Object Identifier",id:"disabling-the-global-object-identifier",level:3},{value:"More On the Relay Preset",id:"more-on-the-relay-preset",level:3},{value:"Globally Unique ID Structure",id:"globally-unique-id-structure",level:3}],u={toc:p},d="wrapper";function c(e){let{components:t,...n}=e;return(0,a.kt)(d,(0,i.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"The ",(0,a.kt)("a",{parentName:"p",href:"https://facebook.github.io/relay/graphql/objectidentification.htm"},"GraphQL Global Object Identification\nSpecification"),"\nis one of the best practices in GraphQL, it gives clients a way to uniquely identify\neach object in the schema and to fetch these objects by their IDs."),(0,a.kt)("p",null,"By default, the ",(0,a.kt)("inlineCode",{parentName:"p"},"postgraphile/presets/amber")," preset implements this specification.\nThe amber preset assigns the unique identifier to every table with a primary key.\nThe preset exposes the unique identifier as an attribute named ",(0,a.kt)("inlineCode",{parentName:"p"},"id"),"."),(0,a.kt)("p",null,"It is common in database design to use the column name ",(0,a.kt)("inlineCode",{parentName:"p"},"id")," for primary keys. For\nthis reason, if there is an attribute named ",(0,a.kt)("inlineCode",{parentName:"p"},"id")," that is already on the GraphQL type,\nthe amber preset renames that attribute to ",(0,a.kt)("inlineCode",{parentName:"p"},"rowId"),". If you want to use the amber\npreset but you do not like this behavior, you have several options:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"You can use the ",(0,a.kt)("inlineCode",{parentName:"li"},"postgraphile/presets/relay")," preset which makes several changes\nincluding removing ",(0,a.kt)("inlineCode",{parentName:"li"},"rowId")," entirely."),(0,a.kt)("li",{parentName:"ol"},"You can use a V4 preset that mimics the behavior and settings of PostGraphile V4\nwhich used ",(0,a.kt)("inlineCode",{parentName:"li"},"nodeId")," to represent the unique identifier."),(0,a.kt)("li",{parentName:"ol"},"You can create your plugin similar to the following:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'const IdToNodeIdPlugin: GraphileConfig.Plugin = {\n  name: "IdToNodeIdPlugin",\n  version: "1.0.0",\n  inflection: {\n    replace: {\n      nodeIdFieldName() {\n        return "nodeId";\n      },\n      attribute(previous, options, details) {\n        if (!previous) {\n          throw new Error("There was no \'attribute\' inflector to replace?!");\n        }\n        const name = previous(details);\n        if (name === "rowId") {\n          return "id";\n        }\n        return name;\n      },\n    },\n  },\n};\n')),(0,a.kt)("p",null,"One common use case for the unique ",(0,a.kt)("inlineCode",{parentName:"p"},"id")," field is as the cache key for your client\nlibrary, e.g. with Apollo Client's ",(0,a.kt)("inlineCode",{parentName:"p"},"dataIdFromObject"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'import ApolloClient from "apollo-client";\nimport { HttpLink } from "apollo-link-http";\nimport { InMemoryCache } from "apollo-cache-inmemory";\n\nconst cache = new InMemoryCache({\n  // highlight-next-line\n  dataIdFromObject: (object) => object.id || null,\n  // Or if you renamed \'id\' to \'nodeId\' then:\n  //   dataIdFromObject: (object) => object.nodeId || null,\n});\n\nexport const client = new ApolloClient({\n  link: new HttpLink(),\n  cache,\n});\n')),(0,a.kt)("h3",{id:"disabling-the-global-object-identifier"},"Disabling the Global Object Identifier"),(0,a.kt)("p",null,"The global object identifier is added by the amber preset. If you use the amber\npreset but you want to disable the global object identifier throughout your API,\nyou can do so by disabling ",(0,a.kt)("inlineCode",{parentName:"p"},"NodePlugin"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="graphile.config.mjs"',title:'"graphile.config.mjs"'},'export default {\n  // ...\n  // highlight-next-line\n  disablePlugins: ["NodePlugin"],\n};\n')),(0,a.kt)("p",null,"Ensure that you have a good way of generating cache identifiers for your GraphQL\nclient though!"),(0,a.kt)("p",null,"(Note: the GraphQL Global Object Identification Specification was previously\nknown as the Relay Global Object Identification Specification, but it is not\nspecific to Relay and is a general best practice for GraphQL APIs.)"),(0,a.kt)("h3",{id:"more-on-the-relay-preset"},"More On the Relay Preset"),(0,a.kt)("p",null,"If having both ",(0,a.kt)("inlineCode",{parentName:"p"},"id: ID!")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"rowId: Int!")," in your schema bothers you (as it\nshould!), you should consider using the ",(0,a.kt)("inlineCode",{parentName:"p"},"postgraphile/presets/relay")," preset.\nThis preset will hide raw primary keys from most of the schema, and will use\nglobal object identifiers instead - not just in the query schema but also in\nmutations and filtering (and, with a little guidance, in function inputs)."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="graphile.config.mjs"',title:'"graphile.config.mjs"'},'import { PostGraphileAmberPreset } from "postgraphile/presets/amber";\n// highlight-next-line\nimport { PostGraphileRelayPreset } from "postgraphile/presets/relay";\n\nexport default {\n  extends: [\n    PostGraphileAmberPreset,\n    // highlight-next-line\n    PostGraphileRelayPreset,\n    //...\n  ],\n  // ...\n};\n')),(0,a.kt)("h3",{id:"globally-unique-id-structure"},"Globally Unique ID Structure"),(0,a.kt)("p",null,'In GraphQL a globally unique ID should be treated as an "opaque" value: you should\nnot extract values from inside it in your application. Though the globally unique\nID is stable for the same object, when new objects are created there is no guarantee\nthat their new ID will conform to the same encoding.'),(0,a.kt)("p",null,"That said, it is generally easy to extract details from PostGraphile's globally\nunique IDs. Take for example the unique ID ",(0,a.kt)("inlineCode",{parentName:"p"},"WyJQb3N0IiwxXQ=="),". By base64 decoding\nthis value, we can see the data in it is ",(0,a.kt)("inlineCode",{parentName:"p"},'["Post",1]'),". This states that it is for\nthe ",(0,a.kt)("inlineCode",{parentName:"p"},"Post")," GraphQL type, and the associated primary key value is ",(0,a.kt)("inlineCode",{parentName:"p"},"1"),". (If you are\nusing the V4 preset then ",(0,a.kt)("inlineCode",{parentName:"p"},"nodeId"),"s will use the table name (or a derivative thereof)\nrather than the GraphQL type name.)"),(0,a.kt)("p",null,"Thus, using globally unique IDs ",(0,a.kt)("strong",{parentName:"p"},"does not")," make your primary keys unobtainable, and\ndoing so is not a goal of globally unique IDs. Should you need your primary keys to\nbe meaningless, you should use an approach like UUIDv4 or a Feistel cipher."))}c.isMDXComponent=!0}}]);