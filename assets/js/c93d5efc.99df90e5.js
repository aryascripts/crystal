"use strict";(self.webpackChunk_localrepo_postgraphile_website=self.webpackChunk_localrepo_postgraphile_website||[]).push([[4253],{30876:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var a=n(2784);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=p(n),d=r,h=m["".concat(s,".").concat(d)]||m[d]||u[d]||i;return n?a.createElement(h,o(o({ref:t},c),{},{components:n})):a.createElement(h,o({ref:t},c))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[m]="string"==typeof e?e:r,o[1]=l;for(var p=2;p<i;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},48871:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var a=n(7896),r=(n(2784),n(30876));const i={layout:"page",path:"/postgraphile/jwt-guide/",title:"PostGraphile JWT Guide"},o=void 0,l={unversionedId:"jwt-guide",id:"version-4.x/jwt-guide",title:"PostGraphile JWT Guide",description:"This specification was authored by",source:"@site/versioned_docs/version-4.x/jwt-guide.md",sourceDirName:".",slug:"/jwt-guide",permalink:"/postgraphile/current/jwt-guide",draft:!1,editUrl:"https://github.com/graphile/crystal/tree/main/postgraphile/website/versioned_docs/version-4.x/jwt-guide.md",tags:[],version:"4.x",frontMatter:{layout:"page",path:"/postgraphile/jwt-guide/",title:"PostGraphile JWT Guide"},sidebar:"docs",previous:{title:"Production Considerations",permalink:"/postgraphile/current/production"},next:{title:"PostGraphile JWT/JWK Verification Quickstart",permalink:"/postgraphile/current/jwk-verification"}},s={},p=[{value:"PostgreSQL JSON Web Token Serialization Specification",id:"postgresql-json-web-token-serialization-specification",level:2},{value:"Example",id:"example",level:3},{value:"A Note on <code>local</code>",id:"a-note-on-local",level:3},{value:"Retrieving Claims in PostgreSQL",id:"retrieving-claims-in-postgresql",level:3}],c={toc:p},m="wrapper";function u(e){let{components:t,...n}=e;return(0,r.kt)(m,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"This specification was authored by\n",(0,r.kt)("a",{parentName:"p",href:"https://twitter.com/calebmer"},"Caleb Meredith")," for use in the PostGraphQL\nproject. The language of the specification is meant to be generally applicable\nand adoptable by any who might want to use it.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"NOTE"),": what follows is a specification of how you can use JWTs to\nauthenticate a user with PostgreSQL such that PostgreSQL may perform your\nauthorization checks. This is not the only way of achieving this goal with\nPostGraphile, for example you can do as the PostGraphile maintainer does and use\nstandard session-based authentication (i.e. with cookies) via the relevant\nExpress/Koa/Fastify middleware and PostGraphile's\n",(0,r.kt)("a",{parentName:"p",href:"./usage-library/#pgsettings-function"},(0,r.kt)("inlineCode",{parentName:"a"},"pgSettings")," function")," allowing you to\nleverage powerful pre-built authentication stacks such as\n",(0,r.kt)("a",{parentName:"p",href:"http://www.passportjs.org/"},"passport.js"),' which has OAuth integration with most\nmajor "social login" providers.'),(0,r.kt)("h2",{id:"postgresql-json-web-token-serialization-specification"},"PostgreSQL JSON Web Token Serialization Specification"),(0,r.kt)("p",null,"This specification aims to define a standard way to serialize ",(0,r.kt)("a",{parentName:"p",href:"https://jwt.io/"},"JSON Web\nTokens")," (JWT, ",(0,r.kt)("a",{parentName:"p",href:"https://tools.ietf.org/html/rfc7519"},"RFC 7519"),") to a PostgreSQL database for developers\nwho want to move authorization logic into their PostgreSQL schema."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://tools.ietf.org/html/rfc7519#section-2"},"Terminology")," from the JSON Web Token specification will be used."),(0,r.kt)("p",null,"After a JSON Web Token has been verified and decoded, the resulting claims will\nbe serialized to the PostgreSQL database in two ways:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Using the ",(0,r.kt)("inlineCode",{parentName:"p"},"role")," claim, the corresponding role will be set in the database\nusing ",(0,r.kt)("a",{parentName:"p",href:"http://www.postgresql.org/docs/current/static/sql-set-role.html"},(0,r.kt)("inlineCode",{parentName:"a"},"SET ROLE")),":"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"set local role $role;\n")),(0,r.kt)("p",{parentName:"li"},"Where ",(0,r.kt)("inlineCode",{parentName:"p"},"$role")," is the claim value for the ",(0,r.kt)("inlineCode",{parentName:"p"},"role")," claim. It is not an error if\nthe ",(0,r.kt)("inlineCode",{parentName:"p"},"role")," claim is not set.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"All remaining claims will be set using the ",(0,r.kt)("a",{parentName:"p",href:"http://www.postgresql.org/docs/current/static/sql-set.html"},(0,r.kt)("inlineCode",{parentName:"a"},"SET"))," command under the\n",(0,r.kt)("inlineCode",{parentName:"p"},"jwt.claims")," namespace. Using:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"set local jwt.claims.$claim_name to $claim_value;\n")),(0,r.kt)("p",{parentName:"li"},"Will be run for every claim including registered claims like ",(0,r.kt)("inlineCode",{parentName:"p"},"iss"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"sub"),",\nand the claim specified 1 (",(0,r.kt)("inlineCode",{parentName:"p"},"role"),"). ",(0,r.kt)("inlineCode",{parentName:"p"},"$claim_name")," is the name of the claim\nand ",(0,r.kt)("inlineCode",{parentName:"p"},"$claim_value")," is the associated value."))),(0,r.kt)("h3",{id:"example"},"Example"),(0,r.kt)("p",null,"A JSON Web Token with the following claims:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "sub": "postgraphql",\n  "role": "user",\n  "user_id": 2\n}\n')),(0,r.kt)("p",null,"Would result in the following SQL being run:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"set local role user;\nset local jwt.claims.sub to 'postgraphql';\nset local jwt.claims.role to 'user';\nset local jwt.claims.user_id to 2;\n")),(0,r.kt)("h3",{id:"a-note-on-local"},"A Note on ",(0,r.kt)("inlineCode",{parentName:"h3"},"local")),(0,r.kt)("p",null,"Using ",(0,r.kt)("inlineCode",{parentName:"p"},"local")," for ",(0,r.kt)("a",{parentName:"p",href:"http://www.postgresql.org/docs/current/static/sql-set.html"},(0,r.kt)("inlineCode",{parentName:"a"},"SET"))," and ",(0,r.kt)("a",{parentName:"p",href:"http://www.postgresql.org/docs/current/static/sql-set-role.html"},(0,r.kt)("inlineCode",{parentName:"a"},"SET ROLE"))," is not required,\nhowever it is recommended. This is so that every transaction block (beginning\nwith ",(0,r.kt)("inlineCode",{parentName:"p"},"BEGIN")," and ending with ",(0,r.kt)("inlineCode",{parentName:"p"},"COMMIT")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"ROLLBACK"),") will have its own local\nparameters. See the following demonstration:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"begin;\nset local jwt.claims.user_id to 2;\n\n-- Has access to `jwt.claims.user_id`\ncommit;\n\n-- Does not have access to `jwt.claims.user_id`\n")),(0,r.kt)("h3",{id:"retrieving-claims-in-postgresql"},"Retrieving Claims in PostgreSQL"),(0,r.kt)("p",null,"In order to retrieve a claim set by the serialization of a JSON Web Token as\ndefined in this spec, either the ",(0,r.kt)("inlineCode",{parentName:"p"},"current_setting")," function or the\n",(0,r.kt)("a",{parentName:"p",href:"http://www.postgresql.org/docs/current/static/sql-show.html"},(0,r.kt)("inlineCode",{parentName:"a"},"SHOW"))," command may be used like so:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"select current_setting('jwt.claims.user_id');\n-- Or\u2026\nshow jwt.claims.user_id;\n")))}u.isMDXComponent=!0}}]);