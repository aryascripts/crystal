"use strict";(self.webpackChunk_localrepo_postgraphile_website=self.webpackChunk_localrepo_postgraphile_website||[]).push([[1050],{30876:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var r=n(2784);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},g="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),g=p(n),d=a,m=g["".concat(l,".").concat(d)]||g[d]||c[d]||i;return n?r.createElement(m,o(o({ref:t},u),{},{components:n})):r.createElement(m,o({ref:t},u))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[g]="string"==typeof e?e:a,o[1]=s;for(var p=2;p<i;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},2034:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>c,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var r=n(7896),a=(n(2784),n(30876));const i={layout:"page",path:"/postgraphile/smart-tags-file/",title:"The postgraphile.tags.json5 file"},o=void 0,s={unversionedId:"smart-tags-file",id:"version-4.x/smart-tags-file",title:"The postgraphile.tags.json5 file",description:"When running PostGraphile in CLI mode, PostGraphile will automatically look for",source:"@site/versioned_docs/version-4.x/smart-tags-file.md",sourceDirName:".",slug:"/smart-tags-file",permalink:"/postgraphile/current/smart-tags-file",draft:!1,editUrl:"https://github.com/graphile/crystal/tree/main/postgraphile/website/versioned_docs/version-4.x/smart-tags-file.md",tags:[],version:"4.x",frontMatter:{layout:"page",path:"/postgraphile/smart-tags-file/",title:"The postgraphile.tags.json5 file"},sidebar:"docs",previous:{title:"Smart Tags",permalink:"/postgraphile/current/smart-tags"},next:{title:"Smart Comments",permalink:"/postgraphile/current/smart-comments"}},l={},p=[{value:"Merging/Overriding",id:"mergingoverriding",level:3},{value:"File format",id:"file-format",level:3},{value:"Library usage",id:"library-usage",level:3},{value:"Going further",id:"going-further",level:3}],u={toc:p},g="wrapper";function c(e){let{components:t,...n}=e;return(0,a.kt)(g,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"When running PostGraphile in CLI mode, PostGraphile will automatically look for\na ",(0,a.kt)("inlineCode",{parentName:"p"},"postgraphile.tags.json5")," file in the current directory, and will process the\ntags and descriptions therein."),(0,a.kt)("p",null,"In library mode, you can add a plugin to load the ",(0,a.kt)("inlineCode",{parentName:"p"},"postgraphile.tags.json5")," file\n(see below for details)."),(0,a.kt)("h3",{id:"mergingoverriding"},"Merging/Overriding"),(0,a.kt)("p",null,"If you provide a description for an entity in ",(0,a.kt)("inlineCode",{parentName:"p"},"postgraphile.tags.json5")," then\nthat description will override any previous descriptions."),(0,a.kt)("p",null,"If you provide tags for an entity in ",(0,a.kt)("inlineCode",{parentName:"p"},"postgraphile.tags.json5"),", those tags will\nbe ",(0,a.kt)("em",{parentName:"p"},"merged")," with previous tags overriding tags with the same names but retaining\nother tags."),(0,a.kt)("h3",{id:"file-format"},"File format"),(0,a.kt)("p",null,"The file is in JSON5 (you can just use regular JSON if you prefer, but the\nextension must be ",(0,a.kt)("inlineCode",{parentName:"p"},".json5"),") and is formatted like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json5"},'{\n  version: 1,\n  config: {\n    /*\n     * There can be entries here for:\n     *\n     * - `class`: for tables, composite types, views and materialized views\n     * - `attribute`: for columns/attributes (of any \'class\' type)\n     * - `constraint`: for table constraints\n     * - `procedure`: for functions/procedures\n     */\n    class: {\n      /*\n       * The next level describes the named type. We\'ve just used the table\n       * name `"post"` but it could be `"my_schema.post"` if you have multiple\n       * tables with the same name and you don\'t want this rule to apply to\n       * all of them.\n       */\n      post: {\n        /*\n         * This will override the description sourced from the PostgreSQL COMMENT.\n         */\n        description: "A post within our forum.",\n\n        /*\n         * Add tags specific to the \'post\' table here. You can omit this if you\n         * don\'t want to add any tags.\n         */\n        tags: {\n          foreignKey: [\n            "(default_user_id) references user (id)|@fieldName defaultUser",\n            "(organization_id) references organization (id)|@fieldName organization",\n          ],\n        },\n\n        /*\n         * We\'ve added a shortcut to class-types so you can tag/describe\n         * columns at the same time of the class.\n         */\n        attribute: {\n          /*\n           * Assuming `body` is one of the columns in the \'post\' table.\n           */\n          body: {\n            /*\n             * Optional description, if provided overrides the PostgreSQL\n             * `COMMENT ON COLUMN post.body`.\n             */\n            description: "The body of the post",\n            tags: {\n              /*\n               * Here we indicate that the \'body\' field will not be available\n               * in the update mutation.\n               */\n              omit: "update",\n            },\n          },\n        },\n      },\n    },\n  },\n}\n')),(0,a.kt)("h3",{id:"library-usage"},"Library usage"),(0,a.kt)("p",null,"Unlike the CLI, PostGraphile library mode doesn't automatically import the\n",(0,a.kt)("inlineCode",{parentName:"p"},"postgraphile.tags.json5")," file for you, so you need to do a little extra work."),(0,a.kt)("p",null,"The easiest solution is to use our pre-build plugin bundled with ",(0,a.kt)("inlineCode",{parentName:"p"},"postgraphile"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"app.use(\n  postgraphile(DATABASE_URL, SCHEMAS, {\n    // ...\n    appendPlugins: [\n      // Automatically loads and watches the 'postgraphile.tags.json5' file:\n      require(\"postgraphile/plugins\").TagsFilePlugin,\n    ],\n  }),\n);\n")),(0,a.kt)("p",null,"You could also pass an alternative path to your tags file, e.g.:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'const postGraphileOptions = {\n  appendPlugins: [\n    require("postgraphile/plugins").makePgSmartTagsFromFilePlugin(\n      // JSON and JSONC are also JSON5 compatible, so you can use these extensions if you prefer:\n      "/path/to/my/tags.file.json",\n    ),\n  ],\n};\n')),(0,a.kt)("p",null,"If you're trying to avoid the ",(0,a.kt)("inlineCode",{parentName:"p"},"fs")," module (e.g. because you're using webpack)\nthen a basic smart tags plugin that doesn't read from the file system would look\nsomething like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'// MySmartTagsPlugin.js\n\nconst { makeJSONPgSmartTagsPlugin } = require("graphile-utils");\n\nmodule.exports = makeJSONPgSmartTagsPlugin({\n  version: 1,\n  config: {\n    class: {\n      post: {\n        tags: {\n          omit: "update",\n        },\n      },\n    },\n  },\n});\n')),(0,a.kt)("p",null,"You can load this plugin with the ",(0,a.kt)("inlineCode",{parentName:"p"},"appendPlugins")," library option:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'const MySmartTagsPlugin = require("./MySmartTagsPlugin");\napp.use(\n  postgraphile(DATABASE_URL, SCHEMAS, {\n    // ...\n    appendPlugins: [MySmartTagsPlugin],\n  }),\n);\n')),(0,a.kt)("h3",{id:"going-further"},"Going further"),(0,a.kt)("p",null,"For greater flexibility, you might choose to check out\n",(0,a.kt)("a",{parentName:"p",href:"./make-pg-smart-tags-plugin/"},"makePgSmartTagsPlugin"),"."))}c.isMDXComponent=!0}}]);