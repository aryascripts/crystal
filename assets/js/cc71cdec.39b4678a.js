"use strict";(self.webpackChunk_localrepo_postgraphile_website=self.webpackChunk_localrepo_postgraphile_website||[]).push([[9852],{30876:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var r=n(2784);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=p(n),m=o,h=d["".concat(l,".").concat(m)]||d[m]||c[m]||a;return n?r.createElement(h,i(i({ref:t},u),{},{components:n})):r.createElement(h,i({ref:t},u))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[d]="string"==typeof e?e:o,i[1]=s;for(var p=2;p<a;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5413:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>c,frontMatter:()=>a,metadata:()=>s,toc:()=>p});var r=n(7896),o=(n(2784),n(30876));const a={layout:"page",path:"/postgraphile/requirements/",title:"Requirements"},i=void 0,s={unversionedId:"requirements",id:"requirements",title:"Requirements",description:"PostGraphile is packaged as a Node.js module, you can install it with any Node",source:"@site/postgraphile/requirements.md",sourceDirName:".",slug:"/requirements",permalink:"/postgraphile/next/requirements",draft:!1,editUrl:"https://github.com/graphile/crystal/tree/main/postgraphile/website/postgraphile/requirements.md",tags:[],version:"current",frontMatter:{layout:"page",path:"/postgraphile/requirements/",title:"Requirements"},sidebar:"docs",previous:{title:"Configuration",permalink:"/postgraphile/next/config"},next:{title:"Required knowledge",permalink:"/postgraphile/next/required-knowledge"}},l={},p=[{value:"Your PostgreSQL database",id:"your-postgresql-database",level:3},{value:"Node.js: use the LTS",id:"nodejs-use-the-lts",level:3},{value:"TypeScript v5.0.0+ (optional)",id:"typescript-v500-optional",level:3},{value:"PostgreSQL: use latest",id:"postgresql-use-latest",level:3},{value:"PG 11 officially supported",id:"pg-11-officially-supported",level:4},{value:"PG 12 officially supported",id:"pg-12-officially-supported",level:4},{value:"PG 13 officially supported",id:"pg-13-officially-supported",level:4},{value:"PG 14 officially supported",id:"pg-14-officially-supported",level:4},{value:"PG 15 officially supported",id:"pg-15-officially-supported",level:4},{value:"Operating system",id:"operating-system",level:3}],u={toc:p},d="wrapper";function c(e){let{components:t,...n}=e;return(0,o.kt)(d,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"PostGraphile is packaged as a Node.js module, you can install it with any Node\npackage manager such as ",(0,o.kt)("inlineCode",{parentName:"p"},"npm")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"yarn")," (depending on your preference) - users\ntend to have fewer issues with ",(0,o.kt)("inlineCode",{parentName:"p"},"yarn"),', so we recommend it (but if you use yarn\n"berry", we recommend using ',(0,o.kt)("inlineCode",{parentName:"p"},"nodeLinker: node-modules")," in your ",(0,o.kt)("inlineCode",{parentName:"p"},".yarnrc.yml"),")."),(0,o.kt)("p",null,"We recommend using the latest LTS version of Node.js and PostgreSQL, but we have\nlimited support for older versions, so long as they are still LTS. Using newer\nreleased versions should generally work fine (we don't recommend using with\nalpha/beta versions though), but if there's any issues let us know in an issue."),(0,o.kt)("h3",{id:"your-postgresql-database"},"Your PostgreSQL database"),(0,o.kt)("p",null,'These aren\'t exactly "requirements", but they will impact your PostGraphile\nexperience.'),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Use primary keys"),": if you don't have primary keys on your tables then they\nwon't get the ",(0,o.kt)("inlineCode",{parentName:"li"},"nodeId")," globally unique identifier interface. Further if you\ndon't have unique constraints then you won't be able to use the automatic\nupdate/delete mutations (since they need a way to identify the row to\nupdate/delete)."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Use foreign keys"),": we infer relations between tables using\n",(0,o.kt)("a",{parentName:"li",href:"https://www.postgresql.org/docs/current/static/ddl-constraints.html#DDL-CONSTRAINTS-FK"},"foreign key constraints"),";\nif you don't use these constraints then we won't know there's a relationship\nbetween the tables. There are plugins to get around this (using smart\ncomments) but it's highly recommended that you use PostgreSQL's built in\nrelations support."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("a",{name:"dont-use-column-based-select-grants"}),"Don't use column-based\nSELECT grants"),": column-based grants work well for ",(0,o.kt)("inlineCode",{parentName:"li"},"INSERT")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"UPDATE"),"\n(especially when combined with ",(0,o.kt)("inlineCode",{parentName:"li"},"PgRBACPlugin"),"!), but they don't make sense\nfor ",(0,o.kt)("inlineCode",{parentName:"li"},"DELETE")," and they cause issues when used with ",(0,o.kt)("inlineCode",{parentName:"li"},"SELECT"),". You cannot\n",(0,o.kt)("inlineCode",{parentName:"li"},"SELECT *")," which makes your life harder, and rules out some of our possible\noptimization strategies. Computed columns (where we pass the entire record to\nthe function) typically have issues with column-based ",(0,o.kt)("inlineCode",{parentName:"li"},"SELECT")," grants. It's\nrecommended that you instead split your tables on permission boundaries and\nuse one-to-one relations to join them together again - this also makes\nwriting your RBAC/RLS policies simpler. If you want to omit a column entirely\nthen you can give it the\n",(0,o.kt)("a",{parentName:"li",href:"/postgraphile/next/smart-tags#behavior"},(0,o.kt)("inlineCode",{parentName:"a"},"@behavior -*")," smart tag"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Function restrictions"),": we have pretty good support for PostgreSQL\nfunctions, but there's some\n",(0,o.kt)("a",{parentName:"li",href:"/postgraphile/next/function-restrictions"},"common function restrictions")," you should check out."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Use unique ",(0,o.kt)("em",{parentName:"strong"},"constraints"))," rather than unique ",(0,o.kt)("em",{parentName:"li"},"indexes")," when appropriate: we use\nunique constraints to create mutations such as ",(0,o.kt)("inlineCode",{parentName:"li"},"updateUserByUsername"),'; note\nthat "PostgreSQL automatically creates a unique index when a unique constraint\nor primary key is defined for a table." --\n',(0,o.kt)("a",{parentName:"li",href:"https://www.postgresql.org/docs/current/static/indexes-unique.html"},"PG docs")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Use the defaults")," for formatting output; we only run tests for the\ndefaults so you may have an issue if you were to use, for example,\n",(0,o.kt)("inlineCode",{parentName:"li"},"intervalstyle = 'iso_8601'")," rather than the default\n",(0,o.kt)("inlineCode",{parentName:"li"},"intervalstyle = 'postgres'"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Use UTF8 encoding"),": GraphQL operates over the UTF8 character set, using\ndifferent encodings may impact your ability to store/retrieve certain values.")),(0,o.kt)("p",null,"On top of this, standard PostgreSQL best practices apply: use indexes carefully\nfor performance, use constraints and triggers to ensure your data is valid and\nconsistent, etc."),(0,o.kt)("h3",{id:"nodejs-use-the-lts"},"Node.js: use the LTS"),(0,o.kt)("p",null,"We only support LTS versions of Node.js. ",(0,o.kt)("strong",{parentName:"p"},"Once a Node.js version reaches\nend-of-life we no longer support it"),", and any future patch release may be\nincompatible with it. We do not see this as a violation of semver - once a\nNode.js version reaches EOL ",(0,o.kt)("strong",{parentName:"p"},"no reasonable user should use it"),", and as such a\nchange to drop support for it is not a breaking change for reasonable users."),(0,o.kt)("h3",{id:"typescript-v500-optional"},"TypeScript v5.0.0+ (optional)"),(0,o.kt)("p",null,"We recommend that you use TypeScript for the best experience - auto-completion,\ninline documentation, etc."),(0,o.kt)("p",null,"You do not need to use TypeScript to use PostGraphile, but if you do then you\nmust use a version from TypeScript v5.0.0 upward and configure it to support\nthe ",(0,o.kt)("inlineCode",{parentName:"p"},"exports")," property in ",(0,o.kt)("inlineCode",{parentName:"p"},"package.json"),", you can do so by adding this to your\nTypeScript configuration:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'    "moduleResolution": "node16", // Or "nodenext"\n')),(0,o.kt)("p",null,"Our adherence to semver ",(0,o.kt)("strong",{parentName:"p"},"does not cover types")," - we ",(0,o.kt)("em",{parentName:"p"},"may")," make breaking\nchanges to TypeScript types in patch-level updates. The reason for this is that\nTypeScript itself is ever-changing, and the libraries we depend on often make\nbreaking type changes, forcing us to do so too. Further, improvements to types\nare generally a good thing for developer experience, even if it might mean you\nhave to spend a couple minutes after updating to address any issues."),(0,o.kt)("p",null,"However, we try and keep the TypeScript types as stable as possible, only\nmaking breaking changes when their benefits outweigh the costs (as determined\nby our maintainer), and we do our best to detail in the release notes how to\ndeal with these changes (if any action is necessary)."),(0,o.kt)("h3",{id:"postgresql-use-latest"},"PostgreSQL: use latest"),(0,o.kt)("p",null,"For best results we recommend you use the latest stable release of PostgreSQL\nthat we officially support, however it should run well on any earlier version\nof PostgreSQL that have not yet reached end-of life. Once a PostgreSQL version\nreaches end-of-life we no longer support it, and any future patch release may\nbe incompatible with it. We do not see this as a violation of semver - once a\nPostgreSQL version reaches EOL ",(0,o.kt)("strong",{parentName:"p"},"no reasonable user should use it"),", and as\nsuch a change to drop support for it is not a breaking change for reasonable\nusers."),(0,o.kt)("h4",{id:"pg-11-officially-supported"},"PG 11 ","[officially supported]"),(0,o.kt)("p",null,"Works well."),(0,o.kt)("h4",{id:"pg-12-officially-supported"},"PG 12 ","[officially supported]"),(0,o.kt)("p",null,"Works well."),(0,o.kt)("h4",{id:"pg-13-officially-supported"},"PG 13 ","[officially supported]"),(0,o.kt)("p",null,"Works well."),(0,o.kt)("h4",{id:"pg-14-officially-supported"},"PG 14 ","[officially supported]"),(0,o.kt)("p",null,"Works well."),(0,o.kt)("h4",{id:"pg-15-officially-supported"},"PG 15 ","[officially supported]"),(0,o.kt)("p",null,"Works well."),(0,o.kt)("h3",{id:"operating-system"},"Operating system"),(0,o.kt)("p",null,"PostGraphile is developed on ","*",'nix operating systems like GNU/Linux and macOS.\nAs far as we know it works on Windows, but since no-one in the core team uses\nWindows for development our Windows support is "best effort" rather than\n"officially supported" - please file an issue if you have problems, but we may\nbe asking for your help to fix/test them!'))}c.isMDXComponent=!0}}]);