"use strict";(self.webpackChunk_localrepo_grafast_website=self.webpackChunk_localrepo_grafast_website||[]).push([[2290],{30876:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>g});var n=r(2784);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),u=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},c=function(e){var t=u(e.components);return n.createElement(l.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=u(r),m=a,g=p["".concat(l,".").concat(m)]||p[m]||d[m]||i;return r?n.createElement(g,o(o({ref:t},c),{},{components:r})):n.createElement(g,o({ref:t},c))}));function g(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[p]="string"==typeof e?e:a,o[1]=s;for(var u=2;u<i;u++)o[u]=r[u];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},64227:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>u});var n=r(7896),a=(r(2784),r(30876));const i={sidebar_position:2},o="Resources",s={unversionedId:"step-library/dataplan-pg/registry/resources",id:"step-library/dataplan-pg/registry/resources",title:"Resources",description:"A resource represents entities in the database from which you can extract data,",source:"@site/grafast/step-library/dataplan-pg/registry/resources.md",sourceDirName:"step-library/dataplan-pg/registry",slug:"/step-library/dataplan-pg/registry/resources",permalink:"/grafast/step-library/dataplan-pg/registry/resources",draft:!1,editUrl:"https://github.com/graphile/crystal/tree/main/grafast/website/grafast/step-library/dataplan-pg/registry/resources.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Codecs",permalink:"/grafast/step-library/dataplan-pg/registry/codecs"},next:{title:"Relations",permalink:"/grafast/step-library/dataplan-pg/registry/relations"}},l={},u=[{value:"PgExecutor",id:"pgexecutor",level:2},{value:"Example",id:"example",level:3},{value:"PgResourceOptions",id:"pgresourceoptions",level:2},{value:"Example",id:"example-1",level:3},{value:"PgResource",id:"pgresource",level:2},{value:"<code>resource.get(spec)</code>",id:"resourcegetspec",level:3},{value:"<code>resource.find(spec)</code>",id:"resourcefindspec",level:3},{value:"<code>resource.execute(args)</code>",id:"resourceexecuteargs",level:3},{value:"<code>resource.getRelations()</code>",id:"resourcegetrelations",level:3},{value:"<code>resource.getRelation(name)</code>",id:"resourcegetrelationname",level:3}],c={toc:u},p="wrapper";function d(e){let{components:t,...r}=e;return(0,a.kt)(p,(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"resources"},"Resources"),(0,a.kt)("p",null,"A resource represents entities in the database from which you can extract data,\nfor example tables, views, materialized views and functions (or arbitrary SQL\nexpressions)."),(0,a.kt)("p",null,"Table-like resources have no parameters (parameters is undefined); you use\n",(0,a.kt)("inlineCode",{parentName:"p"},".get()")," or ",(0,a.kt)("inlineCode",{parentName:"p"},".find()")," to get records from them."),(0,a.kt)("p",null,"Function-like resources have parameters (parameters is an array); use\n",(0,a.kt)("inlineCode",{parentName:"p"},".execute()")," to get the result of executing the function, passing any required\narguments."),(0,a.kt)("h2",{id:"pgexecutor"},"PgExecutor"),(0,a.kt)("p",null,'A PgExecutor ("executor") represents a PostgreSQL database connection. It is\nused by the various step classes (via their resources) in order to issue SQL\nqueries to the database. It\'s rare that you would ever call any of its methods\ndirectly.'),(0,a.kt)("p",null,"Each resource has exactly one executor, and the same executor may be shared\nacross multiple resources. It's very common for all of your resources to share\na single executor, but multiple executors can co-exist in the same schema\nhappily."),(0,a.kt)("p",null,"Query inlining cannot cross executor boundaries (since each executor represents\na separate database, it would not make sense to inline a query in one database\ninto another database - the query would likely throw an error when the tables\ncould not be found)."),(0,a.kt)("p",null,"PgExecutor is also responsible for things like caching."),(0,a.kt)("p",null,"See the SQL queries that are being executed with the\n",(0,a.kt)("inlineCode",{parentName:"p"},'DEBUG="@dataplan/pg:PgExecutor:verbose"')," envvar. (Or replace ",(0,a.kt)("inlineCode",{parentName:"p"},":verbose")," with\n",(0,a.kt)("inlineCode",{parentName:"p"},":explain")," if you want to see even more information.)"),(0,a.kt)("p",null,"A PgExecutor is constructed with an options object containing two properties:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"name")," - a name for the executor, must be unique"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"context")," - a callback function to be called at planning time that should\nreturn an object step containing the ",(0,a.kt)("inlineCode",{parentName:"li"},"withPgClient")," and (optionally)\n",(0,a.kt)("inlineCode",{parentName:"li"},"pgSettings")," entries. See ",(0,a.kt)("a",{parentName:"li",href:"../adaptors"},"adaptors")," for more details on these.")),(0,a.kt)("h3",{id:"example"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'const executor = new PgExecutor({\n  name: "default",\n  context() {\n    return object({\n      withPgClient: context().get("withPgClient"),\n      // pgSettings: context().get("pgSettings"),\n    });\n  },\n});\n')),(0,a.kt)("h2",{id:"pgresourceoptions"},"PgResourceOptions"),(0,a.kt)("p",null,"Resources are not constructed directly, instead a resource configuration object\nis passed (optionally via the registry builder) to ",(0,a.kt)("inlineCode",{parentName:"p"},"makeRegistry")," which then\nbuilds the final resources including their relations."),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"makePgResourceOptions")," function is a TypeScript Identity Function (i.e. it\njust returns the input, but is used to ensure that the type conforms according\nto TypeScript) so usage of it is entirely optional."),(0,a.kt)("p",null,"The resource options have the following properties (all are optional unless noted):"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"name")," (required) - the name to use for this resource, must be unique"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"executor")," (required) - the executor to use when retrieving this resource (unless you are connecting to multiple databases, you'll probably use the same executor for every resource)"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"codec")," (required) - the type that this resource will return"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"from")," (required) - either an SQL fragment (for table-like resources) or a callback function that returns an SQL fragment (for function-like resources) that gives the database ",(0,a.kt)("inlineCode",{parentName:"li"},"FROM")," for this resource"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"uniques")," - for table-like resources, a list of the unique constraints on the table (e.g. indicating primary key/etc)"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"parameters")," - required for function-like resources, forbidden for table-like resources; a list of specifications for the parameters that the function accepts"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"isUnique")," - for function-like resources, true if this resource will return at most one row"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"isMutation")," - for function-like resources, true if calling this function may have side effects (i.e. the database function is ",(0,a.kt)("inlineCode",{parentName:"li"},"VOLATILE")," (default))")),(0,a.kt)("h3",{id:"example-1"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'const forumsResourceOptions = makePgResourceOptions({\n  name: "forums",\n  executor,\n  codec: forumsCodec,\n  from: sql`forums`,\n  uniques: [{ attributes: ["id"], isPrimary: true }],\n});\n')),(0,a.kt)("h2",{id:"pgresource"},"PgResource"),(0,a.kt)("p",null,"Once a resource has been built (from the result of a call to ",(0,a.kt)("inlineCode",{parentName:"p"},"makeRegistry()")," -\nsee ",(0,a.kt)("a",{parentName:"p",href:"/grafast/step-library/dataplan-pg/registry/"},"registry"),"), you can use the various helper methods:"),(0,a.kt)("h3",{id:"resourcegetspec"},(0,a.kt)("inlineCode",{parentName:"h3"},"resource.get(spec)")),(0,a.kt)("p",null,"Call this from a plan resolver; gets a step representing a single row from this\ntable-like resource matching the given spec"),(0,a.kt)("h3",{id:"resourcefindspec"},(0,a.kt)("inlineCode",{parentName:"h3"},"resource.find(spec)")),(0,a.kt)("p",null,"Call this from a plan resolver; gets a step representing a list of rows from\nthis table-like resource matching the given spec"),(0,a.kt)("h3",{id:"resourceexecuteargs"},(0,a.kt)("inlineCode",{parentName:"h3"},"resource.execute(args)")),(0,a.kt)("p",null,"Call this from a plan resolver; gets a step representing the result of calling\nthe database function this resource represents, passing the given arguments"),(0,a.kt)("h3",{id:"resourcegetrelations"},(0,a.kt)("inlineCode",{parentName:"h3"},"resource.getRelations()")),(0,a.kt)("p",null,"Gets the map of relation definitions available on this resource (by looking up\nits codec in the registry)"),(0,a.kt)("h3",{id:"resourcegetrelationname"},(0,a.kt)("inlineCode",{parentName:"h3"},"resource.getRelation(name)")),(0,a.kt)("p",null,"Gets the named relation definition"))}d.isMDXComponent=!0}}]);