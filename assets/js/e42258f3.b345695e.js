"use strict";(self.webpackChunk_localrepo_postgraphile_website=self.webpackChunk_localrepo_postgraphile_website||[]).push([[1006],{30876:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>m});var a=t(2784);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var p=a.createContext({}),s=function(e){var n=a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=s(e.components);return a.createElement(p.Provider,{value:n},e.children)},g="mdxType",h={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},c=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,p=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),g=s(t),c=i,m=g["".concat(p,".").concat(c)]||g[c]||h[c]||r;return t?a.createElement(m,o(o({ref:n},u),{},{components:t})):a.createElement(m,o({ref:n},u))}));function m(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,o=new Array(r);o[0]=c;var l={};for(var p in n)hasOwnProperty.call(n,p)&&(l[p]=n[p]);l.originalType=e,l[g]="string"==typeof e?e:i,o[1]=l;for(var s=2;s<r;s++)o[s]=t[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}c.displayName="MDXCreateElement"},80255:(e,n,t)=>{t.d(n,{Z:()=>r});var a=t(74224),i=t(2784);function r(){return i.createElement(i.Fragment,null,i.createElement("span",{className:a.Z.proTag},i.createElement("a",{href:"/pricing/"},i.createElement("span",{className:a.Z.firstLetter},"P"),"ro")))}},50058:(e,n,t)=>{t.d(n,{Z:()=>r});var a=t(74224),i=t(2784);function r(){return i.createElement(i.Fragment,null,i.createElement("span",{className:a.Z.sponTag},i.createElement("a",{href:"/sponsor/"},i.createElement("span",{className:a.Z.firstLetter},"S"),"pon")))}},16782:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>p,default:()=>m,frontMatter:()=>l,metadata:()=>s,toc:()=>g});var a=t(7896),i=(t(2784),t(30876)),r=t(80255),o=t(50058);const l={layout:"page",path:"/postgraphile/plugins/",title:"Server Plugins"},p=void 0,s={unversionedId:"plugins",id:"version-4.x/plugins",title:"Server Plugins",description:"Stability: experimental, may change in semver minor versions.",source:"@site/versioned_docs/version-4.x/plugins.md",sourceDirName:".",slug:"/plugins",permalink:"/postgraphile/current/plugins",draft:!1,editUrl:"https://github.com/graphile/crystal/tree/main/postgraphile/website/versioned_docs/version-4.x/plugins.md",tags:[],version:"4.x",frontMatter:{layout:"page",path:"/postgraphile/plugins/",title:"Server Plugins"},sidebar:"docs",previous:{title:"PostGraphile community plugins",permalink:"/postgraphile/current/community-plugins"},next:{title:"PostgreSQL Schema Design",permalink:"/postgraphile/current/postgresql-schema-design"}},u={},g=[{value:"First-party open-source plugins",id:"first-party-open-source-plugins",level:3},{value:"First-party premium plugins",id:"first-party-premium-plugins",level:3},{value:"Installing",id:"installing",level:3},{value:"Enabling via CLI flag",id:"enabling-via-cli-flag",level:3},{value:"Enabling via <code>.postgraphilerc.js</code>",id:"enabling-via-postgraphilercjs",level:3},{value:"Enabling via middleware options",id:"enabling-via-middleware-options",level:3},{value:"Writing your own plugins",id:"writing-your-own-plugins",level:3},{value:"Inline tweaks via pluginHook",id:"inline-tweaks-via-pluginhook",level:3},{value:"Examples",id:"examples",level:3},{value:"Origin specific CORS",id:"origin-specific-cors",level:4}],h={toc:g},c="wrapper";function m(e){let{components:n,...t}=e;return(0,i.kt)(c,(0,a.Z)({},h,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Stability: experimental, may change in ",(0,i.kt)("strong",{parentName:"p"},"semver minor")," versions."),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"NOTE: This page relates to changing how the PostGraphile HTTP server and CLI\nwork. If you're instead looking to change the generated GraphQL schema (e.g. to\nadd fields or types), see ",(0,i.kt)("a",{parentName:"em",href:"./extending/"},"Schema Plugins"),".")),(0,i.kt)("p",null,"In addition to the ",(0,i.kt)("a",{parentName:"p",href:"./extending/"},"Graphile Engine plugin system")," which builds\nthe GraphQL schema in PostGraphile, PostGraphile also has a plugin system for\nthe CLI and web layer. This plugin system is less mature, help documenting it is\nwelcome!"),(0,i.kt)("h3",{id:"first-party-open-source-plugins"},"First-party open-source plugins"),(0,i.kt)("p",null,"We have some first-party open source plugins that can enhance your PostGraphile\nexperience, or act as a template for writing your own plugins:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"@graphile/operation-hooks")," - enables you to add callbacks to certain\noperations, useful for validation, pre-flight checks, authorization, error\nhandling, notifying users of semi-related information, etc."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"@graphile/pg-pubsub")," - provides realtime capabilities to schema plugins\npowered by PostgreSQL's LISTEN/NOTIFY.")),(0,i.kt)("h3",{id:"first-party-premium-plugins"},"First-party premium plugins"),(0,i.kt)("p",null,"There are also a couple of first-party plugins that may be purchased on the\n",(0,i.kt)("a",{parentName:"p",href:"https://store.graphile.com"},"Graphile Store"),":"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("del",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"del"},"@graphile/supporter"))," - all features now OSS via ",(0,i.kt)("inlineCode",{parentName:"li"},"@graphile/pg-pubsub"),"\nplugin"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"@graphile/pro")," ",(0,i.kt)(r.Z,{mdxType:"Pro"}),"\xa0",(0,i.kt)(o.Z,{mdxType:"Spon"})," - includes protections that can be mounted\nin front of PostGraphile to protect it from malicious actors")),(0,i.kt)("p",null,"To use these premium plugins you will need a ",(0,i.kt)("inlineCode",{parentName:"p"},"GRAPHILE_LICENSE")," environmental\nvariable to be present, as in these examples:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'# GNU/Linux and macOS bash:\nexport GRAPHILE_LICENSE="license_key_from_graphile_store"\npostgraphile -c postgres://...\n\n# Heroku\nheroku config:set GRAPHILE_LICENSE="license_key_from_graphile_store" -a my_heroku_app\n\n# Windows Console\nset GRAPHILE_LICENSE="license_key_from_graphile_store" & postgraphile -c postgres://...\n\n# Windows PowerShell\n$env:GRAPHILE_LICENSE="license_key_from_graphile_store"; postgraphile -c postgres://...\n')),(0,i.kt)("admonition",{title:"important",type:"caution"},(0,i.kt)("p",{parentName:"admonition"},'These plugins do not "phone home" so you\'ll need to update your\nlicense at least once every 9 months. You can check the expiry date of your\ncurrent license\n',(0,i.kt)("a",{parentName:"p",href:"https://store.graphile.com/validate"},"in the Graphile Store validator")," and log\nin to generate a new license code."),(0,i.kt)("p",{parentName:"admonition"},"For more information, see the FAQ at the bottom of the ",(0,i.kt)("a",{parentName:"p",href:"/pricing/"},"Go Pro!"),"\npage.")),(0,i.kt)("h3",{id:"installing"},"Installing"),(0,i.kt)("p",null,"You can install plugins with ",(0,i.kt)("inlineCode",{parentName:"p"},"yarn add")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"npm install"),", e.g."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"yarn add @graphile/operation-hooks\n")),(0,i.kt)("h3",{id:"enabling-via-cli-flag"},"Enabling via CLI flag"),(0,i.kt)("p",null,"PostGraphile plugins can be specified with the ",(0,i.kt)("inlineCode",{parentName:"p"},"--plugins")," CLI flag; however\nthis flag ",(0,i.kt)("strong",{parentName:"p"},"must be the first flag passed")," to PostGraphile as plugins can\nregister additional CLI flags. Multiple plugins can be specified with comma\nseparation:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"postgraphile --plugins \\\n  @graphile/operation-hooks,@graphile/pg-pubsub,@graphile/pro \\\n  -c postgres:///my_db\n")),(0,i.kt)("h3",{id:"enabling-via-postgraphilercjs"},"Enabling via ",(0,i.kt)("inlineCode",{parentName:"h3"},".postgraphilerc.js")),(0,i.kt)("p",null,"If you're using the CLI version, plugins can also be enabled via\n",(0,i.kt)("inlineCode",{parentName:"p"},".postgraphilerc.js")," file; for example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'module.exports = {\n  options: {\n    plugins: [\n      "@graphile/operation-hooks",\n      "@graphile/pg-pubsub",\n      "@graphile/pro",\n    ],\n    connection: "postgres:///my_db",\n    schema: ["app_public"],\n    // ...\n  },\n};\n')),(0,i.kt)("h3",{id:"enabling-via-middleware-options"},"Enabling via middleware options"),(0,i.kt)("p",null,"This will likely get easier in future, but for now enabling via the middleware\nis a slightly more involved process:"),(0,i.kt)("p",null,"To include the dependencies using CommonJS (Node 8):"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'const { postgraphile, makePluginHook } = require("postgraphile");\nconst { default: OperationHooks } = require("@graphile/operation-hooks");\nconst { default: PgPubsub } = require("@graphile/pg-pubsub");\nconst { default: GraphilePro } = require("@graphile/pro");\n')),(0,i.kt)("p",null,"If you're using ES2015 Modules (ESM) then this syntax may be more to your taste:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'import { postgraphile, makePluginHook } from "postgraphile";\nimport OperationHooks from "@graphile/operation-hooks";\nimport PgPubsub from "@graphile/pg-pubsub";\nimport GraphilePro from "@graphile/pro";\n')),(0,i.kt)("p",null,"To enable the plugins, use ",(0,i.kt)("inlineCode",{parentName:"p"},"makePluginHook")," to create a ",(0,i.kt)("inlineCode",{parentName:"p"},"pluginHook")," function to\npass via the PostGraphile options:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'// Only include as many plugins as you need. An empty array is also valid.\nconst pluginHook = makePluginHook([OperationHooks, PgPubsub, GraphilePro]);\n\nconst postGraphileMiddleware = postgraphile(databaseUrl, "app_public", {\n  pluginHook,\n  // ...\n});\n\napp.use(postGraphileMiddleware);\n')),(0,i.kt)("h3",{id:"writing-your-own-plugins"},"Writing your own plugins"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"IMPORTANT"),": here be dragons. This interface is experimental, and\ndocumentation on it is far from complete. To use this interface you are expected\nto have deep knowledge of the PostGraphile internals, since that is what you\nwill be augmenting/overriding. Note that ",(0,i.kt)("strong",{parentName:"p"},"many things you might think you need\na server plugin for are better served with standard HTTP middleware"),", e.g. by\nusing Express/Koa/Fastify/etc middleware you can implement CORS, sessions,\ncustom authentication flows, rate limiting, logging, routing,\nliveness/readiness/health endpoints, statistics collection and much more - you\nprobably do not need to write PostGraphile server plugins for this kind of\nfunctionality."),(0,i.kt)("p",null,"The hook methods available can be viewed\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/graphile/postgraphile/blob/v4/src/postgraphile/pluginHook.ts"},"in pluginHook.ts"),".\nNote that these may change in ",(0,i.kt)("strong",{parentName:"p"},"semver minor")," releases of PostGraphile as this\nis not an officially stable API yet."),(0,i.kt)("p",null,"Each hook method is passed two parameters:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"subject: the thing being hooked"),(0,i.kt)("li",{parentName:"ul"},"context: an object containing some relevant helpers")),(0,i.kt)("p",null,"The hooks are expected to return either the thing being hooked (subject), or a\nderivative of it. Multiple plugins may register for the same hooks, in these\ncases the output of one hook function will be fed as input to the next. Hooks\nare ",(0,i.kt)("em",{parentName:"p"},"synchronous"),"."),(0,i.kt)("p",null,"Your plugin will export a single object which defines the hook methods; e.g.:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'const MyPlugin = {\n  ["cli:greeting"](messages, { chalk }) {\n    return [...messages, `Hello ${chalk.blue("world")}!`];\n  },\n};\n\nmodule.exports = MyPlugin;\n// or, for ES6 modules:\n// export default MyPlugin;\n')),(0,i.kt)("p",null,"An example of an open source PostGraphile server plugin is\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/graphile/operation-hooks/blob/master/src/index.ts"},"@graphile/operation-hooks"),":"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"uses ",(0,i.kt)("inlineCode",{parentName:"li"},"cli:flags:add:schema")," to add ",(0,i.kt)("inlineCode",{parentName:"li"},"--operation-messages")," and\n",(0,i.kt)("inlineCode",{parentName:"li"},"--operation-messages-preflight")," CLI options"),(0,i.kt)("li",{parentName:"ul"},"uses ",(0,i.kt)("inlineCode",{parentName:"li"},"cli:library:options")," to convert these CLI options to library options"),(0,i.kt)("li",{parentName:"ul"},"uses ",(0,i.kt)("inlineCode",{parentName:"li"},"postgraphile:options")," to a) convert the library options into\ngraphileBuildOptions (Graphile Engine plugin options), and b) load the\nOperationHooksPlugin")),(0,i.kt)("p",null,"Other examples you may wish to check out include\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/graphile/persisted-operations"},"@graphile/persisted-operations"),"\nand\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/graphile/postgraphile-log-consola"},"postgraphile-log-consola"),"."),(0,i.kt)("h3",{id:"inline-tweaks-via-pluginhook"},"Inline tweaks via pluginHook"),(0,i.kt)("p",null,"If you are using postgraphile as a library (i.e. middleware) and you want to\nmake a quick tweak to something using the server plugin hooks, you can do so in\nyour main server.js file:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'/**\n * This plugin override changes the branding piece of graphiql.\n */\nconst graphiqlBrandingTweak = {\n  ["postgraphile:graphiql:html"](html) {\n    console.log("Applying GraphiQL Branding Tweak...");\n    return html.replace(\n      "</head>",\n      \'<style type="text/css">div.topBar > div.title > div { visibility: hidden; display: none !important; } div.topBar > div.title::after { content: "GraphiQL for MyCompany" }</style></head>\',\n    );\n  },\n};\nconst pluginHook = makePluginHook([graphiqlBrandingTweak]);\n\nconst postGraphileMiddleware = postgraphile(databaseUrl, "app_public", {\n  pluginHook,\n  // ...\n});\n')),(0,i.kt)("h3",{id:"examples"},"Examples"),(0,i.kt)("h4",{id:"origin-specific-cors"},"Origin specific CORS"),(0,i.kt)("p",null,"You can enable ",(0,i.kt)("em",{parentName:"p"},"generous")," CORS by\n",(0,i.kt)("a",{parentName:"p",href:"./usage-cli/#cli-options"},"adding the ",(0,i.kt)("inlineCode",{parentName:"a"},"-o,--cors")," flag to the CLI")," or by\n",(0,i.kt)("a",{parentName:"p",href:"./usage-library/#api-postgraphilepgconfig-schemaname-options"},"adding a ",(0,i.kt)("inlineCode",{parentName:"a"},"enableCors: true")," option when using PostGraphile as a library"),"."),(0,i.kt)("p",null,"However, by being ",(0,i.kt)("em",{parentName:"p"},"generous"),", you allow ",(0,i.kt)("strong",{parentName:"p"},"any")," origin to communicate with you\nPostGraphile instance. If you want to allow just one specific origin, and using\na ",(0,i.kt)("inlineCode",{parentName:"p"},"cors")," middleware before PostGraphile (which is by far the preferred route!)\nis not an option, then you can make a server plugin such as this one:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'/**\n * This server plugin injects CORS headers to allow requests only from a specific origin.\n */\n\nfunction makeAllowedOriginTweak(origin) {\n  return {\n    ["postgraphile:http:handler"](req, { res }) {\n      res.setHeader("Access-Control-Allow-Origin", origin);\n      res.setHeader("Access-Control-Allow-Methods", "HEAD, GET, POST");\n      res.setHeader(\n        "Access-Control-Allow-Headers",\n        [\n          "Origin",\n          "X-Requested-With",\n          // Used by `express-graphql` to determine whether to expose the GraphiQL\n          // interface (`text/html`) or not.\n          "Accept",\n          // Used by PostGraphile for auth purposes.\n          "Authorization",\n          // Used by GraphQL Playground and other Apollo-enabled servers\n          "X-Apollo-Tracing",\n          // The `Content-*` headers are used when making requests with a body,\n          // like in a POST request.\n          "Content-Type",\n          "Content-Length",\n          // For our \'Explain\' feature\n          "X-PostGraphile-Explain",\n        ].join(", "),\n      );\n      res.setHeader(\n        "Access-Control-Expose-Headers",\n        ["X-GraphQL-Event-Stream"].join(", "),\n      );\n      return req;\n    },\n  };\n}\n')),(0,i.kt)("p",null,"Using the plugin would look like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'const pluginHook = makePluginHook([\n  makeAllowedOriginTweak("https://graphql.rocks"),\n]);\n\nconst postGraphileMiddleware = postgraphile(databaseUrl, "app_public", {\n  pluginHook,\n  // ...\n});\n')),(0,i.kt)("p",null,"If you need help writing your own PostGraphile server plugins,\n",(0,i.kt)("a",{parentName:"p",href:"http://discord.gg/graphile"},"ask in #help-and-support in our Discord chat"),"."))}m.isMDXComponent=!0},74224:(e,n,t)=>{t.d(n,{Z:()=>a});const a={contents:"contents_OrL_",content:"content_ilvp",row:"row_ARn8",header:"header_zTVt",footnote:"footnote_D0nB",footnoteText:"footnoteText_OEd0",note:"note_qBn0",small:"small_Gqq2",tagline:"tagline_Ld2x",tooltipped:"tooltipped_t_JO",tooltiptext:"tooltiptext_u7mD",proTag:"proTag_vRmB",sponTag:"sponTag_Nh0y",firstLetter:"firstLetter_NMLh"}}}]);