"use strict";(self.webpackChunk_localrepo_grafast_website=self.webpackChunk_localrepo_grafast_website||[]).push([[1597],{30876:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var r=n(2784);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),l=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=l(e.components);return r.createElement(p.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=l(n),f=a,m=d["".concat(p,".").concat(f)]||d[f]||u[f]||o;return n?r.createElement(m,i(i({ref:t},c),{},{components:n})):r.createElement(m,i({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=f;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s[d]="string"==typeof e?e:a,i[1]=s;for(var l=2;l<o;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},73263:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var r=n(7896),a=(n(2784),n(30876));const o={sidebar_position:10},i="@dataplan/pg",s={unversionedId:"step-library/dataplan-pg/index",id:"step-library/dataplan-pg/index",title:"@dataplan/pg",description:"This collection of steps gives incredible performance when dealing with",source:"@site/grafast/step-library/dataplan-pg/index.md",sourceDirName:"step-library/dataplan-pg",slug:"/step-library/dataplan-pg/",permalink:"/grafast/step-library/dataplan-pg/",draft:!1,editUrl:"https://github.com/graphile/crystal/tree/main/grafast/website/grafast/step-library/dataplan-pg/index.md",tags:[],version:"current",sidebarPosition:10,frontMatter:{sidebar_position:10},sidebar:"tutorialSidebar",previous:{title:"jsonParse",permalink:"/grafast/step-library/dataplan-json/jsonParse"},next:{title:"Registry",permalink:"/grafast/step-library/dataplan-pg/registry/"}},p={},l=[],c={toc:l},d="wrapper";function u(e){let{components:t,...n}=e;return(0,a.kt)(d,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"dataplanpg"},"@dataplan/pg"),(0,a.kt)("p",null,"This collection of steps gives incredible performance when dealing with\nPostgres directly."),(0,a.kt)("p",null,"To operate, ",(0,a.kt)("inlineCode",{parentName:"p"},"@dataplan/pg")," requires an understanding of your database. To do\nso, it uses the concepts of ",(0,a.kt)("a",{parentName:"p",href:"./registry/codecs"},"codecs")," (which represent the types in\nyour database - both scalar and composite), ",(0,a.kt)("a",{parentName:"p",href:"./registry/resources"},"resources")," (which\nrepresent the sources of data inside your database - tables, views, functions,\netc), and ",(0,a.kt)("a",{parentName:"p",href:"./registry/relations"},"relations")," (which represent links between codecs and\nthe resources they relate to). These three things together combine into the\n",(0,a.kt)("a",{parentName:"p",href:"./registry/"},"registry"),"."),(0,a.kt)("p",null,"Once you have your registry, you can utilise it to fetch rows from tables/views\n(via ",(0,a.kt)("inlineCode",{parentName:"p"},"resource.get()")," (one) or ",(0,a.kt)("inlineCode",{parentName:"p"},"resource.find()")," (many)), call database\nfunctions (via ",(0,a.kt)("inlineCode",{parentName:"p"},"resource.execute()"),"), or perform mutations (via\n",(0,a.kt)("inlineCode",{parentName:"p"},"pgInsertSingle()"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"pgUpdateSingle()")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"pgDeleteSingle()"),")."),(0,a.kt)("p",null,"Thanks to Gra",(0,a.kt)("em",{parentName:"p"},"fast"),"'s planning system and ",(0,a.kt)("inlineCode",{parentName:"p"},"@dataplan/pg"),"'s understanding of\nyour database, as you use the methods on the steps that represent your\ntables to access their attributes, traverse their relations, set their\ncolumns, etc; ",(0,a.kt)("inlineCode",{parentName:"p"},"@dataplan/pg")," can look at the actions you're taking and compile\nthe most efficient SQL query or queries in order fulfill your requirements with\nminimal database effort. This all happens behind the scenes without you having\nto think about it (though should you wish to dig deeper, for example to deal\nwith a performance edge-case, we do give you the tools to influence it)."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"@dataplan/pg"),' was designed to be easy to work with; although it isn\'t an ORM\n(dealing with "steps" that represent the nodes in a Gra',(0,a.kt)("em",{parentName:"p"},"fast")," plan diagram,\nrather than dealing with the concrete runtime data) it has helpers for all\nthe most common actions you'll need, plus APIs to allow you to add your own\nSQL expressions and sources should you need to."),(0,a.kt)("admonition",{type:"important"},(0,a.kt)("p",{parentName:"admonition"},"Reference to ",(0,a.kt)("inlineCode",{parentName:"p"},"sql")," in code examples is a reference to ",(0,a.kt)("inlineCode",{parentName:"p"},'import { sql } from\n"pg-sql2";')," - ",(0,a.kt)("inlineCode",{parentName:"p"},"@dataplan/pg")," makes heavy use of this performant, type-safe,\ninjection-proof SQL builder.")),(0,a.kt)("p",null,"Lets get started by looking at building the registry."))}u.isMDXComponent=!0}}]);