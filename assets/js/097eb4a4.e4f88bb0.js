"use strict";(self.webpackChunk_localrepo_postgraphile_website=self.webpackChunk_localrepo_postgraphile_website||[]).push([[2152],{30876:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var r=n(2784);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var o=r.createContext({}),u=function(e){var t=r.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(o.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,o=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),p=u(n),d=a,h=p["".concat(o,".").concat(d)]||p[d]||m[d]||s;return n?r.createElement(h,l(l({ref:t},c),{},{components:n})):r.createElement(h,l({ref:t},c))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,l=new Array(s);l[0]=d;var i={};for(var o in t)hasOwnProperty.call(t,o)&&(i[o]=t[o]);i.originalType=e,i[p]="string"==typeof e?e:a,l[1]=i;for(var u=2;u<s;u++)l[u]=n[u];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},36910:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>m,frontMatter:()=>s,metadata:()=>i,toc:()=>u});var r=n(7896),a=(n(2784),n(30876));const s={layout:"page",path:"/postgraphile/computed-columns/",title:"Computed Columns"},l=void 0,i={unversionedId:"computed-columns",id:"version-4.x/computed-columns",title:"Computed Columns",description:'"Computed columns" add what appears to be an extra column (field) to the GraphQL',source:"@site/versioned_docs/version-4.x/computed-columns.md",sourceDirName:".",slug:"/computed-columns",permalink:"/postgraphile/current/computed-columns",draft:!1,editUrl:"https://github.com/graphile/crystal/tree/main/postgraphile/website/versioned_docs/version-4.x/computed-columns.md",tags:[],version:"4.x",frontMatter:{layout:"page",path:"/postgraphile/computed-columns/",title:"Computed Columns"},sidebar:"docs",previous:{title:"Database Functions",permalink:"/postgraphile/current/functions"},next:{title:"Custom Queries",permalink:"/postgraphile/current/custom-queries"}},o={},u=[{value:"Example",id:"example",level:3},{value:"Advice",id:"advice",level:3}],c={toc:u},p="wrapper";function m(e){let{components:t,...n}=e;return(0,a.kt)(p,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,'"Computed columns" add what appears to be an extra column (field) to the GraphQL\ntable type, but, unlike an actual column, the value for this field is the result\nof calling a function defined in the PostgreSQL schema. This function will\nautomatically be exposed to the resultant GraphQL schema as a field on the type;\nit can accept arguments that influence its result, and may return either a\nscalar, record, ',(0,a.kt)("a",{parentName:"p",href:"./enums/#functions-returning-table-enums"},"enum"),",\nlist or a set. Sets (denoted by ",(0,a.kt)("inlineCode",{parentName:"p"},"RETURNS SETOF ..."),") are exposed\nas ",(0,a.kt)("a",{parentName:"p",href:"./connections/"},"connections"),"."),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"Performance note: we inline these function calls into the original ",(0,a.kt)("inlineCode",{parentName:"em"},"SELECT"),"\nstatement, so there's no N+1 issues - it's very efficient.")),(0,a.kt)("p",null,"To create a function that PostGraphile will recognise as a computed column, it\nmust obey the following rules:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"adhere to\n",(0,a.kt)("a",{parentName:"li",href:"./function-restrictions/"},"common PostGraphile function restrictions")),(0,a.kt)("li",{parentName:"ul"},"name must begin with the name of the table it applies to, followed by an\nunderscore (",(0,a.kt)("inlineCode",{parentName:"li"},"_"),")"),(0,a.kt)("li",{parentName:"ul"},"first parameter must be the table type"),(0,a.kt)("li",{parentName:"ul"},"must NOT return ",(0,a.kt)("inlineCode",{parentName:"li"},"VOID")),(0,a.kt)("li",{parentName:"ul"},"must be marked as ",(0,a.kt)("inlineCode",{parentName:"li"},"STABLE")," (or ",(0,a.kt)("inlineCode",{parentName:"li"},"IMMUTABLE"),", though that tends to be less\ncommon)"),(0,a.kt)("li",{parentName:"ul"},"must be defined in the same PostgreSQL schema as the table")),(0,a.kt)("p",null,"For example, assuming a table called ",(0,a.kt)("inlineCode",{parentName:"p"},"person")," exists, the function:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE FUNCTION person_full_name(person person) RETURNS text AS $$\n  SELECT person.given_name || ' ' || person.family_name\n$$ LANGUAGE sql STABLE;\n")),(0,a.kt)("p",null,"Will create a computed column for your table named ",(0,a.kt)("inlineCode",{parentName:"p"},"person"),", which can be\nqueried like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-graphql",metastring:"{5}","{5}":!0},"{\n  personById(id: \u2026) {\n    # nodeId, id, ...\n\n    fullName # A computed column, but the client doesn\u2019t even know!\n  }\n}\n")),(0,a.kt)("h3",{id:"example"},"Example"),(0,a.kt)("p",null,"This example creates two computed columns, one returning a simple varchar and\nthe other a connection. Note that ",(0,a.kt)("inlineCode",{parentName:"p"},"||")," in PostgreSQL is string concatenation."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sql",metastring:"{14-17,20-27}","{14-17,20-27}":!0},"create table my_schema.users (\n  id serial not null primary key,\n  first_name varchar not null,\n  last_name varchar not null\n);\n\ncreate table my_schema.friendships (\n  user_id integer not null,\n  target_id integer not null,\n  primary key (user_id, target_id)\n);\n\n-- Creates `User.name` string field\ncreate function my_schema.users_name(u my_schema.users)\nreturns varchar as $$\n  select u.first_name || ' ' || u.last_name;\n$$ language sql stable;\n\n-- Creates `User.friends` connection\ncreate function my_schema.users_friends(u my_schema.users)\nreturns setof my_schema.users as $$\n  select users.*\n  from my_schema.users\n  inner join my_schema.friendships\n  on (friendships.target_id = users.id)\n  where friendships.user_id = u.id;\n$$ language sql stable;\n")),(0,a.kt)("p",null,"You can add parameters to your computed column field by declaring additional\nparameters in your PostgreSQL function:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sql",metastring:"{1,4}","{1,4}":!0},"-- Creates `User.greet(greeting: String!)` string field\ncreate function my_schema.users_greet(\n  u my_schema.users,  --- required table type parameter, unexposed\n  greeting text       --- additional parameter, will be exposed\n) returns text as $$\n  select greeting || ', ' || u.first_name || ' ' || u.last_name || '!';\n$$ language sql stable strict;\n")),(0,a.kt)("p",null,"which can be queried like:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-graphql",metastring:"{5}","{5}":!0},'{\n  userById(id: \u2026) {\n    greet(greeting: "Greetings and salutations")\n  }\n}\n')),(0,a.kt)("h3",{id:"advice"},"Advice"),(0,a.kt)("p",null,"See the advice in ",(0,a.kt)("a",{parentName:"p",href:"./custom-queries/#advice"},"the Custom Queries article"),"."))}m.isMDXComponent=!0}}]);