"use strict";(self.webpackChunk_localrepo_postgraphile_website=self.webpackChunk_localrepo_postgraphile_website||[]).push([[2498],{30876:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>d});var i=n(2784);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=i.createContext({}),s=function(e){var t=i.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=s(e.components);return i.createElement(p.Provider,{value:t},e.children)},c="mdxType",g={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},m=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,p=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=s(n),m=r,d=c["".concat(p,".").concat(m)]||c[m]||g[m]||a;return n?i.createElement(d,o(o({ref:t},u),{},{components:n})):i.createElement(d,o({ref:t},u))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,o=new Array(a);o[0]=m;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[c]="string"==typeof e?e:r,o[1]=l;for(var s=2;s<a;s++)o[s]=n[s];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}m.displayName="MDXCreateElement"},48992:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>g,frontMatter:()=>a,metadata:()=>l,toc:()=>s});var i=n(7896),r=(n(2784),n(30876));const a={layout:"page",path:"/postgraphile/filtering/",title:"Filtering"},o=void 0,l={unversionedId:"filtering",id:"filtering",title:"Filtering",description:"Out of the box, PostGraphile supports rudimentary filtering on",source:"@site/postgraphile/filtering.md",sourceDirName:".",slug:"/filtering",permalink:"/postgraphile/next/filtering",draft:!1,editUrl:"https://github.com/graphile/crystal/tree/main/postgraphile/website/postgraphile/filtering.md",tags:[],version:"current",frontMatter:{layout:"page",path:"/postgraphile/filtering/",title:"Filtering"},sidebar:"docs",previous:{title:"Connections",permalink:"/postgraphile/next/connections"},next:{title:"CRUD mutations",permalink:"/postgraphile/next/crud-mutations"}},p={},s=[{value:"Advanced filtering",id:"advanced-filtering",level:3},{value:"Filter Plugin",id:"filter-plugin",level:4},{value:"Other plugins",id:"other-plugins",level:4}],u={toc:s},c="wrapper";function g(e){let{components:t,...n}=e;return(0,r.kt)(c,(0,i.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Out of the box, PostGraphile supports rudimentary filtering on\n",(0,r.kt)("a",{parentName:"p",href:"./connections/"},"connections")," using a ",(0,r.kt)("inlineCode",{parentName:"p"},"condition")," argument. This allows you to\nfilter using equality with specific values (e.g. ",(0,r.kt)("inlineCode",{parentName:"p"},'username: "Alice"')," or\n",(0,r.kt)("inlineCode",{parentName:"p"},"category: ARTICLE"),")."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"./examples/#Collections__Relation_condition"},"See an example using the ",(0,r.kt)("inlineCode",{parentName:"a"},"connection")," argument.")),(0,r.kt)("p",null,"It's important when implementing filters to keep performance in mind. By\ndefault (unless you're using the V4 preset), PostGraphile will not allow you to\nfilter by a column that isn't indexed. To force a column to appear in the\nfiltering options you can applying the ",(0,r.kt)("inlineCode",{parentName:"p"},"@behavior filterBy")," ",(0,r.kt)("a",{parentName:"p",href:"./smart-tags/"},"smart\ntag")," to the relevant column, or you can use ",(0,r.kt)("inlineCode",{parentName:"p"},"@behavior -filterBy"),"\nto force it remove it."),(0,r.kt)("h3",{id:"advanced-filtering"},"Advanced filtering"),(0,r.kt)("p",null,"You can extend PostGraphile's schema with more advance filtering capabilities by\nadding fields using ",(0,r.kt)("a",{parentName:"p",href:"./custom-queries/"},"custom queries"),",\n",(0,r.kt)("a",{parentName:"p",href:"./computed-columns/"},"computed columns")," or by using\n",(0,r.kt)("a",{parentName:"p",href:"./make-extend-schema-plugin/"},"makeExtendSchemaPlugin"),"."),(0,r.kt)("p",null,"To add a condition to an existing condition another option is the\n",(0,r.kt)("a",{parentName:"p",href:"./make-add-pg-table-condition-plugin"},(0,r.kt)("inlineCode",{parentName:"a"},"makeAddPgTableConditionPlugin")),". You\ncan also augment PostGraphile's existing connections using custom ",(0,r.kt)("a",{parentName:"p",href:"./extending-raw/"},"Graphile\nEngine plugins"),", such as the following:"),(0,r.kt)("h4",{id:"filter-plugin"},"Filter Plugin"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"\ud83d\udea8",(0,r.kt)("strong",{parentName:"p"},"BEWARE"),"\ud83d\udea8: adding powerful generic filtering capabilities to your GraphQL\nAPI is strongly discouraged, not just by Benjie (the maintainer of\nPostGraphile) but also\n",(0,r.kt)("a",{parentName:"p",href:"https://twitter.com/leeb/status/1004655619431731200"},"by Lee Byron")," (one of\nthe inventors of GraphQL) and various other experts in the GraphQL ecosystem.\nIt is ",(0,r.kt)("strong",{parentName:"p"},"strongly advised")," that you add only very specific filters using one\nof the techniques above (and that you make their inputs as simple as possible)\nrather than using a generic filtering plugin like this. Not heeding this\nadvice may lead to very significant performance issues down the line that are\nvery hard for you to dig your way out of.")),(0,r.kt)("p",null,"A very popular plugin is Matt Bretl's connection-filter plugin, located at\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/graphile-contrib/postgraphile-plugin-connection-filter"},"https://github.com/graphile-contrib/postgraphile-plugin-connection-filter"),".\nThis adds a ",(0,r.kt)("inlineCode",{parentName:"p"},"filter")," argument to connections that enables you to use advanced\nfilters, including filtering on related records from other tables, using greater\nthan, less than and ranges for filtering, and even filtering against the output\nof functions. If you need advanced filtering in your GraphQL API (and you can\nuse something like\n",(0,r.kt)("a",{parentName:"p",href:"./production/#simple-query-whitelist-persisted-queries"},"persisted queries")," to\nprevent malicious parties issuing complex requests) then I recommend you check\nit out! (But do keep the caveats above in mind.)"),(0,r.kt)("h4",{id:"other-plugins"},"Other plugins"),(0,r.kt)("p",null,"Some more of the community plugins relate to filtering, you can read more about\nthem on the ",(0,r.kt)("a",{parentName:"p",href:"./community-plugins/"},"community plugins page")))}g.isMDXComponent=!0}}]);