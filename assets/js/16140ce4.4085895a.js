"use strict";(self.webpackChunk_localrepo_grafast_website=self.webpackChunk_localrepo_grafast_website||[]).push([[5421],{30876:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>m});var r=n(2784);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var i=r.createContext({}),c=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},l=function(e){var t=c(e.components);return r.createElement(i.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,l=p(e,["components","mdxType","originalType","parentName"]),u=c(n),f=o,m=u["".concat(i,".").concat(f)]||u[f]||d[f]||a;return n?r.createElement(m,s(s({ref:t},l),{},{components:n})):r.createElement(m,s({ref:t},l))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,s=new Array(a);s[0]=f;var p={};for(var i in t)hasOwnProperty.call(t,i)&&(p[i]=t[i]);p.originalType=e,p[u]="string"==typeof e?e:o,s[1]=p;for(var c=2;c<a;c++)s[c]=n[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},2918:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>s,default:()=>d,frontMatter:()=>a,metadata:()=>p,toc:()=>c});var r=n(7896),o=(n(2784),n(30876));const a={},s="connection",p={unversionedId:"step-library/standard-steps/connection",id:"step-library/standard-steps/connection",title:"connection",description:"Wraps a collection fetch to provide the utilities for working with GraphQL",source:"@site/grafast/step-library/standard-steps/connection.md",sourceDirName:"step-library/standard-steps",slug:"/step-library/standard-steps/connection",permalink:"/grafast/step-library/standard-steps/connection",draft:!1,editUrl:"https://github.com/graphile/crystal/tree/main/grafast/website/grafast/step-library/standard-steps/connection.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"condition",permalink:"/grafast/step-library/standard-steps/condition"},next:{title:"constant",permalink:"/grafast/step-library/standard-steps/constant"}},i={},c=[],l={toc:c},u="wrapper";function d(e){let{components:t,...n}=e;return(0,o.kt)(u,(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"connection"},"connection"),(0,o.kt)("p",null,"Wraps a collection fetch to provide the utilities for working with GraphQL\ncursor connections. It only requires one argument which is a step that\nrepresents a collection of records; this step should support the connection\nmethods, specifically:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"  /**\n   * Clone the plan; it's recommended that you add `$connection` as a\n   * dependency so that you can abort execution early in the case of errors\n   * (e.g. if the cursors cannot be parsed).\n   */\n  connectionClone(\n    $connection: ConnectionStep<TItemStep, TCursorStep, any, any>,\n    ...args: any[]\n  ): ConnectionCapableStep<TItemStep, TCursorStep>;\n\n  pageInfo(\n    $connection: ConnectionStep<\n      TItemStep,\n      TCursorStep,\n      ConnectionCapableStep<TItemStep, TCursorStep>,\n      any\n    >,\n  ): PageInfoCapableStep;\n\n  setFirst($step: InputStep): void;\n  setLast($step: InputStep): void;\n  setOffset($step: InputStep): void;\n\n  parseCursor($step: InputStep): TCursorStep | null | undefined;\n  setBefore($step: TCursorStep): void;\n  setAfter($step: TCursorStep): void;\n")),(0,o.kt)("p",null,"TODO: the documentation for this is terrible. Sorry."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"export function connection<\n  TItemStep extends ExecutableStep,\n  TCursorStep extends ExecutableStep,\n  TStep extends ConnectionCapableStep<TItemStep, TCursorStep>,\n  TNodeStep extends ExecutableStep = ExecutableStep,\n>(\n  $collection: TStep,\n  itemPlan?: ($item: TItemStep) => TNodeStep,\n  cursorPlan?: ($item: TItemStep) => ExecutableStep<string | null>,\n): ConnectionStep<TItemStep, TCursorStep, TStep, TNodeStep>;\n")))}d.isMDXComponent=!0}}]);