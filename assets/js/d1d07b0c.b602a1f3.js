"use strict";(self.webpackChunk_localrepo_postgraphile_website=self.webpackChunk_localrepo_postgraphile_website||[]).push([[3468],{30876:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var i=n(2784);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,o=function(e,t){if(null==e)return{};var n,i,o={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=i.createContext({}),p=function(e){var t=i.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},d=function(e){var t=p(e.components);return i.createElement(c.Provider,{value:t},e.children)},s="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},f=i.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,c=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),s=p(n),f=o,m=s["".concat(c,".").concat(f)]||s[f]||u[f]||r;return n?i.createElement(m,a(a({ref:t},d),{},{components:n})):i.createElement(m,a({ref:t},d))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,a=new Array(r);a[0]=f;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[s]="string"==typeof e?e:o,a[1]=l;for(var p=2;p<r;p++)a[p]=n[p];return i.createElement.apply(null,a)}return i.createElement.apply(null,n)}f.displayName="MDXCreateElement"},91598:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>r,metadata:()=>l,toc:()=>p});var i=n(7896),o=(n(2784),n(30876));const r={layout:"page",path:"/postgraphile/node-id/",title:'Globally Unique Object Identification ("nodeId" / "id")'},a=void 0,l={unversionedId:"node-id",id:"version-4.x/node-id",title:'Globally Unique Object Identification ("nodeId" / "id")',description:"We implement the",source:"@site/versioned_docs/version-4.x/node-id.md",sourceDirName:".",slug:"/node-id",permalink:"/postgraphile/current/node-id",draft:!1,editUrl:"https://github.com/graphile/crystal/tree/main/postgraphile/website/versioned_docs/version-4.x/node-id.md",tags:[],version:"4.x",frontMatter:{layout:"page",path:"/postgraphile/node-id/",title:'Globally Unique Object Identification ("nodeId" / "id")'},sidebar:"docs",previous:{title:"CRUD Mutations",permalink:"/postgraphile/current/crud-mutations"},next:{title:"Database Functions",permalink:"/postgraphile/current/functions"}},c={},p=[{value:"Disabling the Global Object Identifier",id:"disabling-the-global-object-identifier",level:3}],d={toc:p},s="wrapper";function u(e){let{components:t,...n}=e;return(0,o.kt)(s,(0,i.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"We implement the\n",(0,o.kt)("a",{parentName:"p",href:"https://facebook.github.io/relay/graphql/objectidentification.htm"},"GraphQL Global Object Identification Specification"),",\nso any table that has a primary key will automatically have a unique ",(0,o.kt)("inlineCode",{parentName:"p"},"nodeId"),"\nfield available for queries and mutations. This is commonly used as the cache\nkey for your client library, e.g. with Apollo Client's ",(0,o.kt)("inlineCode",{parentName:"p"},"dataIdFromObject"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js",metastring:"{6}","{6}":!0},'import ApolloClient from "apollo-client";\nimport { HttpLink } from "apollo-link-http";\nimport { InMemoryCache } from "apollo-cache-inmemory";\n\nconst cache = new InMemoryCache({\n  dataIdFromObject: (object) => object.nodeId || null,\n});\n\nexport const client = new ApolloClient({\n  link: new HttpLink(),\n  cache,\n});\n')),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"WARNING"),": by default, we call the Global Object Identifier ",(0,o.kt)("inlineCode",{parentName:"p"},"nodeId")," to avoid\nclashing with the ",(0,o.kt)("inlineCode",{parentName:"p"},"id")," field that's common practice in database design. If you\nwish to call the Global Object Identifier field ",(0,o.kt)("inlineCode",{parentName:"p"},"id")," instead (as is mandated by\nthe specification), you can do so with our ",(0,o.kt)("inlineCode",{parentName:"p"},"--classic-ids")," CLI flag. In doing\nso, any ",(0,o.kt)("inlineCode",{parentName:"p"},"id")," column will automatically be renamed to ",(0,o.kt)("inlineCode",{parentName:"p"},"rowId"),"."),(0,o.kt)("h3",{id:"disabling-the-global-object-identifier"},"Disabling the Global Object Identifier"),(0,o.kt)("p",null,"You can disable the global object identifier throughout your API by skipping the\n",(0,o.kt)("inlineCode",{parentName:"p"},"require('graphile-build').NodePlugin")," plugin; e.g. from the CLI:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"postgraphile --skip-plugins graphile-build:NodePlugin ...\n")),(0,o.kt)("p",null,"Ensure that you have a good way of generating cache identifiers for your GraphQL\nclient though!"),(0,o.kt)("p",null,"(Note: the GraphQL Global Object Identification Specification was previously\nknown as the Relay Global Object Identification Specification, but it's not\nspecific to Relay.)"))}u.isMDXComponent=!0}}]);