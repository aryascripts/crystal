"use strict";(self.webpackChunk_localrepo_grafast_website=self.webpackChunk_localrepo_grafast_website||[]).push([[5284],{30876:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>g});var r=n(2784);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,s=function(e,t){if(null==e)return{};var n,r,s={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var l=r.createContext({}),u=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},m=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},c="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,s=e.mdxType,a=e.originalType,l=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),c=u(n),d=s,g=c["".concat(l,".").concat(d)]||c[d]||p[d]||a;return n?r.createElement(g,o(o({ref:t},m),{},{components:n})):r.createElement(g,o({ref:t},m))}));function g(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var a=n.length,o=new Array(a);o[0]=d;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[c]="string"==typeof e?e:s,o[1]=i;for(var u=2;u<a;u++)o[u]=n[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},85538:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>i,toc:()=>u});var r=n(7896),s=(n(2784),n(30876));const a={sidebar_position:5},o="Full registry example",i={unversionedId:"step-library/dataplan-pg/registry/example",id:"step-library/dataplan-pg/registry/example",title:"Full registry example",description:"A registry for a simple schema using two tables 'forums' and 'messages' might",source:"@site/grafast/step-library/dataplan-pg/registry/example.md",sourceDirName:"step-library/dataplan-pg/registry",slug:"/step-library/dataplan-pg/registry/example",permalink:"/grafast/step-library/dataplan-pg/registry/example",draft:!1,editUrl:"https://github.com/graphile/crystal/tree/main/grafast/website/grafast/step-library/dataplan-pg/registry/example.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Relations",permalink:"/grafast/step-library/dataplan-pg/registry/relations"},next:{title:"Adaptors",permalink:"/grafast/step-library/dataplan-pg/adaptors"}},l={},u=[{value:"Example schema",id:"example-schema",level:2}],m={toc:u},c="wrapper";function p(e){let{components:t,...n}=e;return(0,s.kt)(c,(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"full-registry-example"},"Full registry example"),(0,s.kt)("p",null,"A registry for a simple schema using two tables 'forums' and 'messages' might\nbe look something like the following; please refer to the codec, resource\n(including executor) and relation documentation for details on the specifics."),(0,s.kt)("p",null,"Remember: you can auto-generate this."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},'import { sql } from "pg-sql2";\nimport { context, object } from "grafast";\nimport {\n  PgExecutor,\n  TYPES,\n  makePgResourceOptions,\n  makeRegistry,\n  makeRegistryBuilder,\n  recordCodec,\n} from "@dataplan/pg";\n\n// The executor is responsible for talking to the database. If you have\n// multiple databases, you will have multiple executors (one per database).\nconst executor = new PgExecutor({\n  name: "default",\n  context() {\n    return object({ withPgClient: context().get("withPgClient") });\n  },\n});\n\n// Represents the type of the \'forums\' table:\nconst forumsCodec = recordCodec({\n  name: "forums",\n  identifier: sql`forums`,\n  attributes: {\n    id: {\n      codec: TYPES.uuid,\n      notNull: true,\n      hasDefault: true,\n    },\n    name: {\n      codec: TYPES.citext,\n      notNull: true,\n    },\n  },\n});\n\n// Represents the \'forums\' table, including knowledge of its primary key:\nconst forumsResourceOptions = makePgResourceOptions({\n  name: "forums",\n  executor,\n  codec: forumsCodec,\n  from: sql`forums`,\n  uniques: [{ attributes: ["id"], isPrimary: true }],\n});\n\n// Represents the type of the \'messages\' table:\nconst messagesCodec = recordCodec({\n  name: "messages",\n  identifier: sql`messages`,\n  attributes: {\n    id: {\n      codec: TYPES.int,\n      notNull: true,\n      hasDefault: true,\n    },\n    forum_id: {\n      codec: TYPES.int,\n      notNull: true,\n    },\n    message: {\n      codec: TYPES.text,\n      notNull: true,\n    },\n  },\n});\n\n// Represents the \'messages\' table:\nconst messagesResourceOptions = makePgResourceOptions({\n  name: "messages",\n  executor,\n  codec: messagesCodec,\n  from: sql`messages`,\n  uniques: [{ isPrimary: true, attributes: ["id"] }],\n});\n\n// The builder tracks all the types so you end up with a strongly-typed registry\nconst builder = makeRegistryBuilder()\n  // First add our codecs\n  .addCodec(forumsCodec)\n  .addCodec(messagesCodec)\n\n  // Then add our resources\n  .addResource(forumsResourceOptions)\n  .addResource(messagesResourceOptions)\n\n  // A message relates to a single forum:\n  .addRelation(messagesCodec, "forum", forumsResourceOptions, {\n    localAttributes: ["forum_id"],\n    remoteAttributes: ["id"],\n    isUnique: true,\n  })\n\n  // A forum can have many messages:\n  .addRelation(forumsCodec, "messages", messagesResourceOptions, {\n    localAttributes: ["id"],\n    remoteAttributes: ["forum_id"],\n    // The foreign key reference is defined on \'messages\', so we\'re the one\n    // that\'s referenced by a foreign key\n    isReferencee: true,\n  });\n\n// Finally build the registry:\nconst registry = makeRegistry(builder.getRegistryConfig());\n')),(0,s.kt)("h2",{id:"example-schema"},"Example schema"),(0,s.kt)("p",null,"Given the above registry, you might create a schema with plans something like this:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},'const { forums, messages } = registry.pgResources;\n\nconst typeDefs = /* GraphQL */ `\n  type Query {\n    forumById(id: Int!): Forum\n  }\n\n  type Forum {\n    id: Int!\n    name: String!\n    messages: [Message!]!\n  }\n\n  type Message {\n    id: Int!\n    message: String!\n    forum: Forum!\n  }\n`;\n\nconst plans = {\n  Query: {\n    forumById(_, { $id }) {\n      return forums.get({ id: $id });\n    },\n  },\n  Forum: {\n    messages($forum) {\n      return messages.find({ forum_id: $forum.get("id") });\n      // OR: return $forum.manyRelation("messages");\n    },\n  },\n  Message: {\n    forum($message) {\n      return forums.get({ id: $message.get("forum_id") });\n      // OR: return $message.singleRelation("forum");\n    },\n  },\n};\n\nimport { makeGrafastSchema } from "grafast";\nconst schema = makeGrafastSchema({ typeDefs, plans });\n')),(0,s.kt)("admonition",{type:"note"},(0,s.kt)("p",{parentName:"admonition"},"Although this simple ORM-like appearance looks like it would trigger multiple\nSQL statements, in most cases Grafast and ",(0,s.kt)("inlineCode",{parentName:"p"},"@dataplan/pg")," working in concert\nwill result in the plan being analyzed and the requests being automatically\ncombined via joins and/or subqueries to produce a highly efficient SQL query")),(0,s.kt)("p",null,"(TODO: test this works.)"))}p.isMDXComponent=!0}}]);