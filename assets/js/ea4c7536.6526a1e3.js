"use strict";(self.webpackChunk_localrepo_postgraphile_website=self.webpackChunk_localrepo_postgraphile_website||[]).push([[2472],{30876:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>y});var r=t(2784);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function u(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=r.createContext({}),l=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},d=function(e){var n=l(e.components);return r.createElement(s.Provider,{value:n},e.children)},c="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,d=u(e,["components","mdxType","originalType","parentName"]),c=l(t),m=i,y=c["".concat(s,".").concat(m)]||c[m]||p[m]||a;return t?r.createElement(y,o(o({ref:n},d),{},{components:t})):r.createElement(y,o({ref:n},d))}));function y(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,o=new Array(a);o[0]=m;var u={};for(var s in n)hasOwnProperty.call(n,s)&&(u[s]=n[s]);u.originalType=e,u[c]="string"==typeof e?e:i,o[1]=u;for(var l=2;l<a;l++)o[l]=t[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},62243:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>u,toc:()=>l});var r=t(7896),i=(t(2784),t(30876));const a={layout:"page",path:"/postgraphile/function-gallery/",title:"Database Function Gallery",showExamples:"functions"},o=void 0,u={unversionedId:"function-gallery",id:"version-4.x/function-gallery",title:"Database Function Gallery",description:"Below you'll find some examples of various PostgreSQL functions, and their",source:"@site/versioned_docs/version-4.x/function-gallery.md",sourceDirName:".",slug:"/function-gallery",permalink:"/postgraphile/current/function-gallery",draft:!1,editUrl:"https://github.com/graphile/crystal/tree/main/postgraphile/website/versioned_docs/version-4.x/function-gallery.md",tags:[],version:"4.x",frontMatter:{layout:"page",path:"/postgraphile/function-gallery/",title:"Database Function Gallery",showExamples:"functions"},sidebar:"docs",previous:{title:"Database Function Restrictions",permalink:"/postgraphile/current/function-restrictions"},next:{title:"Enums",permalink:"/postgraphile/current/enums"}},s={},l=[{value:"Custom Queries",id:"custom-queries",level:2},{value:"Logged in user field",id:"logged-in-user-field",level:3},{value:"Computed Columns",id:"computed-columns",level:2},{value:"User primary email",id:"user-primary-email",level:3},{value:"Custom Mutations",id:"custom-mutations",level:2},{value:"Insert multiple records",id:"insert-multiple-records",level:3}],d={toc:l},c="wrapper";function p(e){let{components:n,...t}=e;return(0,i.kt)(c,(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Below you'll find some examples of various PostgreSQL functions, and their\neffects on PostGraphile."),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"This page is a WIP - sorry that it's hard to read right now, we will definitely\nbe tidying it up! If you want to help with this, please pop into our\n",(0,i.kt)("a",{parentName:"em",href:"http://discord.gg/graphile"},"discord chat")," and volunteer!")),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"All these diffs are automatically produced using the functions as written.")),(0,i.kt)("h2",{id:"custom-queries"},"Custom Queries"),(0,i.kt)("h3",{id:"logged-in-user-field"},"Logged in user field"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"create function viewer()\nreturns users\nas $$\n  select *\n  from users\n  where id = current_user_id();\n  /*\n   * current_user_id() is a function\n   * that returns the logged in user's\n   * id, e.g. by extracting from the JWT\n   * or indicated via pgSettings.\n   */\n$$ language sql stable set search_path from current;\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-diff"},'--- Original GraphQL Schema\n+++ Modified GraphQL Schema\n@@ -1795,6 +1795,7 @@\n\n   """Chosen by fair dice roll. Guaranteed to be random. XKCD#221"""\n   randomNumber: Int\n+  viewer: User\n\n   """Reads a single `Forum` using its globally unique `ID`."""\n   forumByNodeId(\n')),(0,i.kt)("h2",{id:"computed-columns"},"Computed Columns"),(0,i.kt)("h3",{id:"user-primary-email"},"User primary email"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},'/*\n * Returns the primary email of the\n * current user; for all other users\n * this function will return null.\n */\ncreate function "users_primaryEmail"(u users)\nreturns text\nas $$\n  select email\n  from user_emails\n  where user_id = current_user_id()\n  and user_id = u.id\n  and is_verified is true\n  order by id asc\n  limit 1;\n$$ language sql stable set search_path from current;\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-diff"},'--- Original GraphQL Schema\n+++ Modified GraphQL Schema\n@@ -3130,6 +3130,7 @@\n     """\n     condition: QuizEntryCondition\n   ): QuizEntriesConnection!\n+  primaryEmail: String\n }\n\n """\n')),(0,i.kt)("h2",{id:"custom-mutations"},"Custom Mutations"),(0,i.kt)("h3",{id:"insert-multiple-records"},"Insert multiple records"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"/**\n * Occasionally you'll want to create a bunch of rows in different tables in a\n * single mutation. Here's an example of how to do that.\n *\n * Pretend we're registering quiz entries, and we want to store each answer in\n * its own table as we want to be able to operate on the answers independently\n * later.\n *\n * This means we want:\n *\n *  1. A mutation that takes input data for inserting one quiz entry and\n *  multiple answers.\n *  2. A function that inserts a new quiz entry, inserts an answer for each\n *  answer provided in the input data, and connects each answer to the created\n *  quiz entry.\n *  3. Finally, we want the function to return the inserted quiz entry itself.\n */\n\n/**\n * This type is used for input in the mutation\n */\ncreate type quiz_entry_input as (\n  question text,\n  answer int\n);\n\n/**\n * Here's the function that gets turned into a \"custom mutation\"\n */\ncreate function add_quiz_entry(\n  quiz_id int,\n  answers quiz_entry_input[]\n)\nreturns quiz_entry\nas $$\n  declare\n    q quiz_entry;\n    a quiz_entry_answer;\n  begin\n    insert into quiz_entry(user_id, quiz_id)\n      values(current_user_id(), quiz_id)\n      returning * into q;\n\n    foreach a in array answers loop\n      insert into quiz_entry_answer(quiz_entry_id, question, answer)\n        values (quiz_id, a.question, a.answer);\n    end loop;\n\n    return q;\n  end;\n$$ language plpgsql volatile strict set search_path from current;\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-diff"},'--- Original GraphQL Schema\n+++ Modified GraphQL Schema\n@@ -1,3 +1,41 @@\n+"""All input for the `addQuizEntry` mutation."""\n+input AddQuizEntryInput {\n+  """\n+  An arbitrary string value with no semantic meaning. Will be included in the\n+  payload verbatim. May be used to track mutations by the client.\n+  """\n+  clientMutationId: String\n+  quizId: Int!\n+  answers: [QuizEntryInputRecordInput]!\n+}\n+\n+"""The output of our `addQuizEntry` mutation."""\n+type AddQuizEntryPayload {\n+  """\n+  The exact same `clientMutationId` that was provided in the mutation input,\n+  unchanged and unused. May be used by a client to track mutations.\n+  """\n+  clientMutationId: String\n+  quizEntry: QuizEntry\n+\n+  """\n+  Our root query field type. Allows us to run any query from our mutation payload.\n+  """\n+  query: Query\n+\n+  """Reads a single `User` that is related to this `QuizEntry`."""\n+  user: User\n+\n+  """Reads a single `Quiz` that is related to this `QuizEntry`."""\n+  quiz: Quiz\n+\n+  """An edge for our `QuizEntry`. May be used by Relay 1."""\n+  quizEntryEdge(\n+    """The method to use when ordering `QuizEntry`."""\n+    orderBy: [QuizEntriesOrderBy!] = [PRIMARY_KEY_ASC]\n+  ): QuizEntriesEdge\n+}\n+\n """\n A floating point number that requires more precision than IEEE 754 binary 64\n """\n@@ -1472,6 +1510,12 @@\n     """\n     input: DeleteUserByUsernameInput!\n   ): DeleteUserPayload\n+  addQuizEntry(\n+    """\n+    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object\u2019s fields.\n+    """\n+    input: AddQuizEntryInput!\n+  ): AddQuizEntryPayload\n\n   """\n   If you\'ve forgotten your password, give us one of your email addresses and we\'\n@@ -2115,6 +2159,12 @@\n   quizId: Int!\n }\n\n+"""An input for mutations affecting `QuizEntryInputRecord`"""\n+input QuizEntryInputRecordInput {\n+  question: String\n+  answer: Int\n+}\n+\n """\n Represents an update to a `QuizEntry`. Fields that are set will be updated.\n """\n')))}p.isMDXComponent=!0}}]);