"use strict";(self.webpackChunk_localrepo_graphile_build_website=self.webpackChunk_localrepo_graphile_build_website||[]).push([[894],{876:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>g});var n=r(2784);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var p=n.createContext({}),s=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},u=function(e){var t=s(e.components);return n.createElement(p.Provider,{value:t},e.children)},c="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=s(r),d=a,g=c["".concat(p,".").concat(d)]||c[d]||h[d]||i;return r?n.createElement(g,o(o({ref:t},u),{},{components:r})):n.createElement(g,o({ref:t},u))}));function g(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=d;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[c]="string"==typeof e?e:a,o[1]=l;for(var s=2;s<i;s++)o[s]=r[s];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},9189:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var n=r(7896),a=(r(2784),r(876));const i={},o="Graphile Build pg",l={unversionedId:"index",id:"index",title:"Graphile Build pg",description:"graphile-build-pg is a collection of graphile-build plugins that extend",source:"@site/graphile-build-pg/index.md",sourceDirName:".",slug:"/",permalink:"/graphile-build-pg/",draft:!1,editUrl:"https://github.com/graphile/crystal/tree/main/graphile-build/website/graphile-build-pg/index.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar"},p={},s=[],u={toc:s},c="wrapper";function h(e){let{components:t,...r}=e;return(0,a.kt)(c,(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"graphile-build-pg"},"Graphile Build pg"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"graphile-build-pg")," is a collection of ",(0,a.kt)("a",{parentName:"p",href:"/graphile-build/"},"graphile-build")," plugins that extend\nyour GraphQL schema with types and fields based on the tables, views, functions\nand other resources in your PostgreSQL database."),(0,a.kt)("p",null,"This is achieved by introspecting your database with ",(0,a.kt)("a",{parentName:"p",href:"https://star.graphile.org/pg-introspection/"},"pg-introspection")," and\nthen building a ",(0,a.kt)("a",{parentName:"p",href:"https://grafast.org/grafast/step-library/dataplan-pg/"},"@dataplan/pg")," registry (composed of codecs, resources and\nrelations) for these entities. Then our plugins inspect this registry and\ncreates the relevant GraphQL types, fields, and ",(0,a.kt)("a",{parentName:"p",href:"https://grafast.org"},"Gra",(0,a.kt)("em",{parentName:"a"},"fast"))," plan resolver\nfunctions. The result is a high-performance, powerful, auto-generated but highly\nflexible GraphQL schema."),(0,a.kt)("p",null,"If you don't want to use your database introspection results to generate the\nschema, you can instead build the registry yourself giving you full control over\nwhat goes into your GraphQL API whilst still saving you significant effort\nversus writing the schema without auto-generation."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"graphile-build-pg")," is a core component of ",(0,a.kt)("a",{parentName:"p",href:"https://postgraphile.org"},"PostGraphile"),", a library that\nhelps you craft your ideal, incredibly performant, best practices GraphQL API\nbacked primarily by a PostgreSQL database with minimal developer effort."),(0,a.kt)("h1",{id:"about"},"About"),(0,a.kt)("p",null,"Thanks to Gra",(0,a.kt)("em",{parentName:"p"},"fast"),"\u2018","s query planning capabilities, the plugins in this package do not exhibit the N+1 query problem common in many database-based GraphQL APIs; for all but the flattest GraphQL queries these plugins typically significantly outperform ",(0,a.kt)("inlineCode",{parentName:"p"},"DataLoader"),"-based solutions ","\u2014"," and the more complex your GraphQL query becomes the greater the benefit."))}h.isMDXComponent=!0}}]);