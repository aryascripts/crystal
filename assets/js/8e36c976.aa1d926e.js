"use strict";(self.webpackChunk_localrepo_grafast_website=self.webpackChunk_localrepo_grafast_website||[]).push([[3095],{30876:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>u});var a=n(2784);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=a.createContext({}),s=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=s(e.components);return a.createElement(i.Provider,{value:t},e.children)},m="mdxType",g={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},y=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,i=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),m=s(n),y=r,u=m["".concat(i,".").concat(y)]||m[y]||g[y]||l;return n?a.createElement(u,o(o({ref:t},c),{},{components:n})):a.createElement(u,o({ref:t},c))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,o=new Array(l);o[0]=y;var p={};for(var i in t)hasOwnProperty.call(t,i)&&(p[i]=t[i]);p.originalType=e,p[m]="string"==typeof e?e:r,o[1]=p;for(var s=2;s<l;s++)o[s]=n[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}y.displayName="MDXCreateElement"},70816:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>o,default:()=>g,frontMatter:()=>l,metadata:()=>p,toc:()=>s});var a=n(7896),r=(n(2784),n(30876));const l={},o="pgSingleTablePolymorphic",p={unversionedId:"step-library/dataplan-pg/pgSingleTablePolymorphic",id:"step-library/dataplan-pg/pgSingleTablePolymorphic",title:"pgSingleTablePolymorphic",description:"This step class gives just one of many ways of supporting polymorphism in",source:"@site/grafast/step-library/dataplan-pg/pgSingleTablePolymorphic.md",sourceDirName:"step-library/dataplan-pg",slug:"/step-library/dataplan-pg/pgSingleTablePolymorphic",permalink:"/grafast/step-library/dataplan-pg/pgSingleTablePolymorphic",draft:!1,editUrl:"https://github.com/graphile/crystal/tree/main/grafast/website/grafast/step-library/dataplan-pg/pgSingleTablePolymorphic.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"pgPolymorphic",permalink:"/grafast/step-library/dataplan-pg/pgPolymorphic"},next:{title:"pgUnionAll",permalink:"/grafast/step-library/dataplan-pg/pgUnionAll"}},i={},s=[],c={toc:s},m="wrapper";function g(e){let{components:t,...n}=e;return(0,r.kt)(m,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"pgsingletablepolymorphic"},"pgSingleTablePolymorphic"),(0,r.kt)("p",null,"This step class gives just one of many ways of supporting polymorphism in\n",(0,r.kt)("inlineCode",{parentName:"p"},"@dataplan/pg"),"; we recommend that you read the ",(0,r.kt)("a",{parentName:"p",href:"./polymorphism"},"polymorphism"),"\ndocumentation before deciding whether or not you need this step - most likely\nit is better to use the ",(0,r.kt)("inlineCode",{parentName:"p"},'mode: "single"')," polymorphism setting on the underlying\ncodec instead."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"pgSingleTablePolymorphic")," is a very simple way of representing a polymorphic\ntype where all of the underlying values are stored in the same table. For\nexample you might have an ",(0,r.kt)("inlineCode",{parentName:"p"},"animals")," table that stores details of all of your\ncats, dogs and fish; such as:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"create table animals (\n  id serial primary key,\n  type text not null,\n  name text not null,\n  date_of_birth date not null,\n  number_of_lives boolean,\n  wags_tail boolean,\n  freshwater boolean\n);\n")),(0,r.kt)("p",null,"In GraphQL we might represent this as an ",(0,r.kt)("inlineCode",{parentName:"p"},"Animal")," interface, with\nimplementations ",(0,r.kt)("inlineCode",{parentName:"p"},"Cat"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"Dog")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"Fish"),"."),(0,r.kt)("p",null,"You call ",(0,r.kt)("inlineCode",{parentName:"p"},"pgSingleTablePolymorphic($typeName, $row)")," passing a step indicating\nthe GraphQL type name, and a step representing the row from the table; for\nexample:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const $animal = animalsResource.get({ id: constant(1) });\n\n// 'Cat', 'Dog' or 'Fish'; use a lambda step to transform the values if\n// necessary.\nconst $typeName = $animal.get(\"type\");\n\nreturn pgSingleTablePolymorphic($typeName, $animal);\n")))}g.isMDXComponent=!0}}]);