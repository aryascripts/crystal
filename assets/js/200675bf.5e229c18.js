"use strict";(self.webpackChunk_localrepo_postgraphile_website=self.webpackChunk_localrepo_postgraphile_website||[]).push([[8188],{30876:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var r=n(2784);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),g=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=g(e.components);return r.createElement(s.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),c=g(n),m=a,d=c["".concat(s,".").concat(m)]||c[m]||u[m]||o;return n?r.createElement(d,i(i({ref:t},p),{},{components:n})):r.createElement(d,i({ref:t},p))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[c]="string"==typeof e?e:a,i[1]=l;for(var g=2;g<o;g++)i[g]=n[g];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},47115:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>g});var r=n(7896),a=(n(2784),n(30876));const o={layout:"page",path:"/postgraphile/aggregates/",title:"Aggregates"},i=void 0,l={unversionedId:"aggregates",id:"version-4.x/aggregates",title:"Aggregates",description:"PostGraphile has support in its plugin system for powerful aggregates. This",source:"@site/versioned_docs/version-4.x/aggregates.md",sourceDirName:".",slug:"/aggregates",permalink:"/postgraphile/current/aggregates",draft:!1,editUrl:"https://github.com/graphile/crystal/tree/main/postgraphile/website/versioned_docs/version-4.x/aggregates.md",tags:[],version:"4.x",frontMatter:{layout:"page",path:"/postgraphile/aggregates/",title:"Aggregates"},sidebar:"docs",previous:{title:"Views",permalink:"/postgraphile/current/views"},next:{title:"PostgreSQL Indexes",permalink:"/postgraphile/current/postgresql-indexes"}},s={},g=[{value:"Aggregates ignore pagination info",id:"aggregates-ignore-pagination-info",level:3},{value:"Aggregates only work on Relay connection",id:"aggregates-only-work-on-relay-connection",level:3}],p={toc:g},c="wrapper";function u(e){let{components:t,...n}=e;return(0,a.kt)(c,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"PostGraphile has support in its plugin system for powerful aggregates. This\nsystem was only introduced in 4.4 and is not well documented yet; should you\nneed aggregates good starting points are:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The\n",(0,a.kt)("a",{parentName:"li",href:"https://github.com/graphile/graphile-engine/blob/2353cf94867a88d76062ab274a30ce930a30aab7/packages/graphile-build-pg/src/plugins/PgConnectionTotalCount.js"},"built in ",(0,a.kt)("inlineCode",{parentName:"a"},"PgConnectionTotalCountPlugin")),"\nwhich adds a ",(0,a.kt)("inlineCode",{parentName:"li"},"totalCount")," aggregate to connections, counting all rows that\nmatch the criteria (ignoring pagination info)"),(0,a.kt)("li",{parentName:"ul"},"The ",(0,a.kt)("a",{parentName:"li",href:"https://github.com/graphile/pg-aggregates"},"@graphile/pg-aggregates"),"\nmodule which adds ",(0,a.kt)("inlineCode",{parentName:"li"},"sum")," aggregates to the schema (more to come)"),(0,a.kt)("li",{parentName:"ul"},"The ",(0,a.kt)("a",{parentName:"li",href:"http://discord.gg/graphile"},"Discord chat")," (feel free to @benjie in\n","#","help-and-support)")),(0,a.kt)("h3",{id:"aggregates-ignore-pagination-info"},"Aggregates ignore pagination info"),(0,a.kt)("p",null,"Aggregates are performed over the ",(0,a.kt)("strong",{parentName:"p"},"entire collection")," - not just the data that\nwould be returned if you were to query the nodes. This means they ignore the\n",(0,a.kt)("inlineCode",{parentName:"p"},"first"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"last"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"before"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"after")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"offset")," arguments. This is deliberate\n(if you only need aggregates over the data that matches your pagination\ninformation then you could calculate these on the client)."),(0,a.kt)("h3",{id:"aggregates-only-work-on-relay-connection"},"Aggregates only work on Relay connection"),(0,a.kt)("p",null,"If you're using ",(0,a.kt)("inlineCode",{parentName:"p"},'simpleCollections: "only"')," you can override it on a\nper-collection basis with the\n",(0,a.kt)("a",{parentName:"p",href:"./smart-comments/#simple-collections"},(0,a.kt)("inlineCode",{parentName:"a"},"@simpleCollections")," smart comment"),"."))}u.isMDXComponent=!0}}]);