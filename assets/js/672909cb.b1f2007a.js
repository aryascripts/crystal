"use strict";(self.webpackChunk_localrepo_postgraphile_website=self.webpackChunk_localrepo_postgraphile_website||[]).push([[8508],{30876:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var a=n(2784);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),u=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=u(n),c=i,h=m["".concat(s,".").concat(c)]||m[c]||d[c]||r;return n?a.createElement(h,o(o({ref:t},p),{},{components:n})):a.createElement(h,o({ref:t},p))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=c;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[m]="string"==typeof e?e:i,o[1]=l;for(var u=2;u<r;u++)o[u]=n[u];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},79356:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var a=n(7896),i=(n(2784),n(30876));const r={layout:"page",path:"/postgraphile/crud-mutations/",title:"CRUD mutations"},o=void 0,l={unversionedId:"crud-mutations",id:"crud-mutations",title:"CRUD mutations",description:'CRUD, or "Create, Read, Update, Delete", is a common paradigm in data',source:"@site/postgraphile/crud-mutations.md",sourceDirName:".",slug:"/crud-mutations",permalink:"/postgraphile/next/crud-mutations",draft:!1,editUrl:"https://github.com/graphile/crystal/tree/main/postgraphile/website/postgraphile/crud-mutations.md",tags:[],version:"current",frontMatter:{layout:"page",path:"/postgraphile/crud-mutations/",title:"CRUD mutations"},sidebar:"docs",previous:{title:"Filtering",permalink:"/postgraphile/next/filtering"},next:{title:'Globally Unique Object Identification ("id" / "nodeId")',permalink:"/postgraphile/next/node-id"}},s={},u=[{value:"Designing mutations",id:"designing-mutations",level:3},{value:"CRUD mutation fields",id:"crud-mutation-fields",level:3},{value:"Examples",id:"examples",level:3},{value:"If mutations don&#39;t show up...",id:"if-mutations-dont-show-up",level:3}],p={toc:u},m="wrapper";function d(e){let{components:t,...n}=e;return(0,i.kt)(m,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,'CRUD, or "Create, Read, Update, Delete", is a common paradigm in data\nmanipulation APIs; "CRUD Mutations" refer to all but the "R". PostGraphile will\nautomatically add CRUD mutations to the schema for each table that has the\nrelevant database permissions.'),(0,i.kt)("h3",{id:"designing-mutations"},"Designing mutations"),(0,i.kt)("p",null,"CRUD mutations can easily be disabled by disabling the ",(0,i.kt)("inlineCode",{parentName:"p"},"create"),",\n",(0,i.kt)("inlineCode",{parentName:"p"},"update")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"delete")," behaviors in your preset:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="graphile.config.mjs"',title:'"graphile.config.mjs"'},'export default {\n  // ...\n  schema: {\n    defaultBehavior: "-insert -update -delete",\n  },\n};\n')),(0,i.kt)("p",null,"You might do this if you prefer to define all of your mutations yourself (e.g.\nwith ",(0,i.kt)("a",{parentName:"p",href:"./custom-mutations/"},"custom mutations"),")."),(0,i.kt)("p",null,"It's a common misconception for people unfamiliar with PostGraphile that its\nmain feature is the CRUD mutations. In actuality, a very significant portion of\nusers (including the maintainer) hardly ever use the CRUD mutations.\nPostGraphile encourages you to write the best GraphQL API that you can, so\nbefore designing your mutations we strongly recommend that you read Marc-Andr\xe9\nGiroux's excellent ",(0,i.kt)("a",{parentName:"p",href:"https://xuorig.medium.com/graphql-mutation-design-anemic-mutations-dd107ba70496"},"GraphQL Mutation Design: Anemic\nMutations"),"\narticle."),(0,i.kt)("p",null,"PostGraphile gives you a lot of ways to define your own mutations (from\n",(0,i.kt)("a",{parentName:"p",href:"./custom-mutations/"},"database functions"),", to ",(0,i.kt)("a",{parentName:"p",href:"./make-extend-schema-plugin/"},"schema\nextensions"),", to ",(0,i.kt)("a",{parentName:"p",href:"./extending"},"custom plugins"),"),\nso you can pick whichever pattern you and your team are most comfortable with."),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"You might be wondering, ",'"',"What value do users see in PostGraphile if not the\nCRUD mutations?",'"'," These users typically recognize PostGraphile's significant\nefficiency gains in the query schema ","\u2014"," meaning they can handle larger\namounts of traffic and don't need to concern themselves with the complexities\nof caches and cache invalidation for a lot longer. There's also the consistency afforded\nthrough (and time saved by) autogeneration; the GraphQL best practices enabled\nby the out-of-the box schema; and the easy schema-wide changes via the plugin\nand behavior systems. These are just some of the well-known key features of PostGraphile.")),(0,i.kt)("h3",{id:"crud-mutation-fields"},"CRUD mutation fields"),(0,i.kt)("p",null,"Using the ",(0,i.kt)("inlineCode",{parentName:"p"},"users")," table from the ",(0,i.kt)("a",{parentName:"p",href:"./tables/"},"parent article"),", depending on the\nPostGraphile settings you use (and the permissions you've granted), you might\nget the following mutations:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"createUser - Creates a single ",(0,i.kt)("inlineCode",{parentName:"li"},"User"),".\n",(0,i.kt)("a",{parentName:"li",href:"./examples/#Mutations__Create"},"See example"),"."),(0,i.kt)("li",{parentName:"ul"},"updateUser - Updates a single ",(0,i.kt)("inlineCode",{parentName:"li"},"User")," using its globally unique id and a patch."),(0,i.kt)("li",{parentName:"ul"},"updateUserById - Updates a single ",(0,i.kt)("inlineCode",{parentName:"li"},"User")," using a unique key and a patch.\n",(0,i.kt)("a",{parentName:"li",href:"./examples/#Mutations__Update"},"See example"),"."),(0,i.kt)("li",{parentName:"ul"},"updateUserByUsername - Updates a single ",(0,i.kt)("inlineCode",{parentName:"li"},"User")," using a unique key and a patch."),(0,i.kt)("li",{parentName:"ul"},"deleteUser - Deletes a single ",(0,i.kt)("inlineCode",{parentName:"li"},"User")," using its globally unique id."),(0,i.kt)("li",{parentName:"ul"},"deleteUserById - Deletes a single ",(0,i.kt)("inlineCode",{parentName:"li"},"User")," using a unique key.\n",(0,i.kt)("a",{parentName:"li",href:"./examples/#Mutations__Delete"},"See example"),"."),(0,i.kt)("li",{parentName:"ul"},"deleteUserByUsername - Deletes a single ",(0,i.kt)("inlineCode",{parentName:"li"},"User")," using a unique key.")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"The ",(0,i.kt)("inlineCode",{parentName:"strong"},"update")," and ",(0,i.kt)("inlineCode",{parentName:"strong"},"delete")," mutations are created only if the table contains a\n",(0,i.kt)("inlineCode",{parentName:"strong"},"primary key")," column.")),(0,i.kt)("p",null,'You also get the following query fields ("Read"):'),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"user - Returns a single ",(0,i.kt)("inlineCode",{parentName:"li"},"User")," using its globally unique ",(0,i.kt)("inlineCode",{parentName:"li"},"ID"),"."),(0,i.kt)("li",{parentName:"ul"},"userById - Reads a single ",(0,i.kt)("inlineCode",{parentName:"li"},"User")," using its globally unique ",(0,i.kt)("inlineCode",{parentName:"li"},"ID"),"."),(0,i.kt)("li",{parentName:"ul"},"userByUsername - Reads a single ",(0,i.kt)("inlineCode",{parentName:"li"},"User")," using its unique ",(0,i.kt)("inlineCode",{parentName:"li"},"username"),"."),(0,i.kt)("li",{parentName:"ul"},"allUsers - Returns a ",(0,i.kt)("a",{parentName:"li",href:"./connections/"},"connection")," enabling pagination through\na set of (visible) ",(0,i.kt)("inlineCode",{parentName:"li"},"User"),".")),(0,i.kt)("h3",{id:"examples"},"Examples"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-graphql"},'# Create a User and get back details of the record we created\nmutation {\n  createUser(\n    input: { user: { id: 1, name: "Bilbo Baggins", username: "bilbo" } }\n  ) {\n    user {\n      id\n      name\n      username\n      createdAt\n    }\n  }\n}\n\n# Update Bilbo using the user.id primary key\nmutation {\n  updateUserById(\n    input: { id: 1, userPatch: { about: "An adventurous hobbit" } }\n  ) {\n    user {\n      id\n      name\n      username\n      about\n      createdAt\n    }\n  }\n}\n\n# Delete Bilbo using the unique user.username column and return the mutation ID\nmutation {\n  deleteUserByUsername(input: { username: "bilbo" }) {\n    deletedUserId\n  }\n}\n')),(0,i.kt)("h3",{id:"if-mutations-dont-show-up"},"If mutations don't show up..."),(0,i.kt)("p",null,"First of all, check for errors being output from your PostGraphile server. If\nthere are no errors, here's some reasons that mutations might not show up in the\ngenerated schema:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Your behaviors (e.g. ",(0,i.kt)("inlineCode",{parentName:"li"},'defaultBehavior: "-create -update -delete"')," or ",(0,i.kt)("inlineCode",{parentName:"li"},"@behavior -create -update -delete")," smart comments on the tables) may be disabling them"),(0,i.kt)("li",{parentName:"ul"},"Insufficient permissions on the tables"),(0,i.kt)("li",{parentName:"ul"},"Tables not in an exposed schema"),(0,i.kt)("li",{parentName:"ul"},"Views instead of tables"),(0,i.kt)("li",{parentName:"ul"},"Missing primary keys (though 'create' mutations will still be added in this\ncase)"),(0,i.kt)("li",{parentName:"ul"},"If you only see mutations using primary key: You might be using the\n",(0,i.kt)("inlineCode",{parentName:"li"},"PrimaryKeyMutationsOnlyPlugin"))),(0,i.kt)("p",null,"If you're new to GraphQL, perhaps you're looking in the wrong place? In Ruru (the\nGraph",(0,i.kt)("em",{parentName:"p"},"i"),"QL interface), open the docs on the right and go to the root. Select the\n",(0,i.kt)("inlineCode",{parentName:"p"},"Mutation")," type to see the available mutations. If you try to execute a mutation\n(e.g. using autocomplete) you must use the ",(0,i.kt)("inlineCode",{parentName:"p"},"mutation")," operation type when\ncomposing the request:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-graphql"},"mutation {\n  createThing...\n}\n")),(0,i.kt)("p",null,"otherwise GraphQL will interpret the request as a ",(0,i.kt)("inlineCode",{parentName:"p"},"query"),"."))}d.isMDXComponent=!0}}]);