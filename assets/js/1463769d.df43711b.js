"use strict";(self.webpackChunk_localrepo_postgraphile_website=self.webpackChunk_localrepo_postgraphile_website||[]).push([[1445],{30876:(e,t,r)=>{r.d(t,{Zo:()=>l,kt:()=>h});var n=r(2784);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function g(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),p=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},l=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,l=g(e,["components","mdxType","originalType","parentName"]),c=p(r),f=a,h=c["".concat(s,".").concat(f)]||c[f]||u[f]||o;return r?n.createElement(h,i(i({ref:t},l),{},{components:r})):n.createElement(h,i({ref:t},l))}));function h(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=f;var g={};for(var s in t)hasOwnProperty.call(t,s)&&(g[s]=t[s]);g.originalType=e,g[c]="string"==typeof e?e:a,i[1]=g;for(var p=2;p<o;p++)i[p]=r[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}f.displayName="MDXCreateElement"},48480:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>g,toc:()=>p});var n=r(7896),a=(r(2784),r(30876));const o={layout:"page",path:"/postgraphile/aggregates/",title:"Aggregates"},i=void 0,g={unversionedId:"aggregates",id:"aggregates",title:"Aggregates",description:"PostGraphile's engine has support for powerful aggregates. The",source:"@site/postgraphile/aggregates.md",sourceDirName:".",slug:"/aggregates",permalink:"/postgraphile/next/aggregates",draft:!1,editUrl:"https://github.com/graphile/crystal/tree/main/postgraphile/website/postgraphile/aggregates.md",tags:[],version:"current",frontMatter:{layout:"page",path:"/postgraphile/aggregates/",title:"Aggregates"},sidebar:"docs",previous:{title:"Refs",permalink:"/postgraphile/next/refs"},next:{title:"PostgreSQL indexes",permalink:"/postgraphile/next/postgresql-indexes"}},s={},p=[{value:"Aggregates ignore pagination info",id:"aggregates-ignore-pagination-info",level:3},{value:"Aggregates only work on Relay connection",id:"aggregates-only-work-on-relay-connection",level:3}],l={toc:p},c="wrapper";function u(e){let{components:t,...r}=e;return(0,a.kt)(c,(0,n.Z)({},l,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"PostGraphile's engine has support for powerful aggregates. The\n",(0,a.kt)("a",{parentName:"p",href:"https://github.com/graphile/pg-aggregates"},"@graphile/pg-aggregates")," module\nadds various aggregates to the schema, and gives you the ability to add more\nvia plugins. Aggregates are located under connection fields."),(0,a.kt)("h3",{id:"aggregates-ignore-pagination-info"},"Aggregates ignore pagination info"),(0,a.kt)("p",null,"Aggregates are performed over the ",(0,a.kt)("strong",{parentName:"p"},"entire collection")," represented by the\nfield and its filters - not just the data that would be returned if you were to\nquery the nodes. This means they ignore the ",(0,a.kt)("inlineCode",{parentName:"p"},"first"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"last"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"before"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"after"),"\nand ",(0,a.kt)("inlineCode",{parentName:"p"},"offset")," arguments. This is deliberate (if you only need aggregates over\nthe data that matches your pagination information then you could calculate\nthese on the client)."),(0,a.kt)("h3",{id:"aggregates-only-work-on-relay-connection"},"Aggregates only work on Relay connection"),(0,a.kt)("p",null,"Thanks to their expansibility, relay ",(0,a.kt)("a",{parentName:"p",href:"./connections"},"connections")," were the\nperfect place to add aggregates support. If you're using a behavior\nconfiguration that prefers lists over connections (e.g. ",(0,a.kt)("inlineCode",{parentName:"p"},"-connection +list"),")\nthen you can override it on a per-collection basis with the ",(0,a.kt)("a",{parentName:"p",href:"./smart-tags/#behavior"},(0,a.kt)("inlineCode",{parentName:"a"},"@behavior\n+connection")," smart tag"),"."))}u.isMDXComponent=!0}}]);