"use strict";(self.webpackChunk_localrepo_grafast_website=self.webpackChunk_localrepo_grafast_website||[]).push([[5039],{30876:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>d});var a=n(2784);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),s=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},m=function(e){var t=s(e.components);return a.createElement(l.Provider,{value:t},e.children)},c="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},y=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,m=p(e,["components","mdxType","originalType","parentName"]),c=s(n),y=r,d=c["".concat(l,".").concat(y)]||c[y]||h[y]||o;return n?a.createElement(d,i(i({ref:t},m),{},{components:n})):a.createElement(d,i({ref:t},m))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=y;var p={};for(var l in t)hasOwnProperty.call(t,l)&&(p[l]=t[l]);p.originalType=e,p[c]="string"==typeof e?e:r,i[1]=p;for(var s=2;s<o;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}y.displayName="MDXCreateElement"},39751:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>h,frontMatter:()=>o,metadata:()=>p,toc:()=>s});var a=n(7896),r=(n(2784),n(30876));const o={},i="polymorphicBranch",p={unversionedId:"step-library/standard-steps/polymorphicBranch",id:"step-library/standard-steps/polymorphicBranch",title:"polymorphicBranch",description:"The polymorphicBranch step is a utility step to handles generic polymorphic",source:"@site/grafast/step-library/standard-steps/polymorphicBranch.md",sourceDirName:"step-library/standard-steps",slug:"/step-library/standard-steps/polymorphicBranch",permalink:"/grafast/step-library/standard-steps/polymorphicBranch",draft:!1,editUrl:"https://github.com/graphile/crystal/tree/main/grafast/website/grafast/step-library/standard-steps/polymorphicBranch.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"object",permalink:"/grafast/step-library/standard-steps/object"},next:{title:"remapKeys",permalink:"/grafast/step-library/standard-steps/remapKeys"}},l={},s=[{value:"The matchers object",id:"the-matchers-object",level:2},{value:"Example",id:"example",level:2}],m={toc:s},c="wrapper";function h(e){let{components:t,...n}=e;return(0,r.kt)(c,(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"polymorphicbranch"},"polymorphicBranch"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"polymorphicBranch")," step is a utility step to handles generic polymorphic\nbranching."),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"When building your own steps it may be better to implement the ",(0,r.kt)("inlineCode",{parentName:"p"},"planForType"),"\nmethod on your step classes as explained in\n",(0,r.kt)("a",{parentName:"p",href:"/grafast/polymorphism#polymorphic-capable-steps"},"polymorphism"),".")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"polymorphicBranch")," accepts two parameters:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"The step representing the data to branch on,"),(0,r.kt)("li",{parentName:"ol"},"A ",(0,r.kt)("inlineCode",{parentName:"li"},"matchers")," object detailing the types supported and how to match them.")),(0,r.kt)("h2",{id:"the-matchers-object"},"The matchers object"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"// This type is for illustrative purposes only; the actual type is slightly\n// more complex\ntype PolymorphicTypeMatchers = {\n  [typeName: string]: {\n    match?(obj: any): boolean;\n    plan?($obj: ExecutableStep): ExecutableStep;\n  };\n};\n")),(0,r.kt)("p",null,'The matchers object is a map from type names supported (string) to the\nassociated "matcher" object for that type. For each type name, ',(0,r.kt)("inlineCode",{parentName:"p"},"typeName"),', the\n"matcher" object has two properties, both of which are optional:'),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"match(obj)")," - return ",(0,r.kt)("inlineCode",{parentName:"li"},"true")," if the object ",(0,r.kt)("inlineCode",{parentName:"li"},"obj")," is of the type being matched\n(",(0,r.kt)("inlineCode",{parentName:"li"},"typeName"),"); otherwise ",(0,r.kt)("inlineCode",{parentName:"li"},"false"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"If unset, defaults to ",(0,r.kt)("inlineCode",{parentName:"li"},"(obj) => obj.__typename === typeName")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"plan($obj)")," - assuming the data represented by the step ",(0,r.kt)("inlineCode",{parentName:"li"},"$obj")," is of the\ntype being matched, return a step that represents this type",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"If unset, defaults to ",(0,r.kt)("inlineCode",{parentName:"li"},"($obj) => $obj"))))),(0,r.kt)("h2",{id:"example"},"Example"),(0,r.kt)("p",null,"Imagine we want to represent a database of animals (which we're using an array\nto simulate). Since the different types of animal all have a ",(0,r.kt)("inlineCode",{parentName:"p"},"name")," but have\ndifferent data, we're going to use an interface to represent ",(0,r.kt)("inlineCode",{parentName:"p"},"Animal")," and then\nwe'll use ",(0,r.kt)("inlineCode",{parentName:"p"},"polymorphicBranch")," to narrow the object to the right type:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import { makeGrafastSchema, polymorphicBranch, access, lambda } from "grafast";\n\n// Our database of animals\nconst ANIMALS = [\n  { type: "feline", name: "Artie", colour: "ginger" },\n  { type: "feline", name: "Brontie", colour: "tortoise shell" },\n  { type: "canine", name: "Captain", wagsTail: true },\n  { type: "hamster", data: { name: "Hammy", type: "winter white dwarf" } },\n];\n\nconst schema = makeGrafastSchema({\n  typeDefs: /* GraphQL */ `\n    interface Animal {\n      name: String!\n    }\n    type Cat implements Animal {\n      name: String!\n      colour: String!\n    }\n    type Dog implements Animal {\n      name: String!\n      wagsTail: Boolean!\n    }\n    type Hamster implements Animal {\n      name: String!\n      type: String!\n    }\n\n    type Query {\n      animal(id: Int!): Animal\n    }\n  `,\n  plans: {\n    Query: {\n      animal(_, { $id }) {\n        const $animal = lambda($id, (id) => ANIMALS[id - 1]);\n        return polymorphicBranch($animal, {\n          Cat: {\n            match: (obj) => obj.type === "feline",\n          },\n          Dog: {\n            match: (obj) => obj.type === "canine",\n          },\n          Hamster: {\n            match: (obj) => obj.type === "hamster",\n            // Notice the shape of `Hamster` is different, so we need to\n            // transform the object to represent a hamster. For other types\n            // this might even involve fetching details from a remote data\n            // source.\n            plan: ($obj) => access($obj, "data"),\n          },\n        });\n      },\n    },\n  },\n});\n')))}h.isMDXComponent=!0}}]);