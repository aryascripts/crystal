"use strict";(self.webpackChunk_localrepo_postgraphile_website=self.webpackChunk_localrepo_postgraphile_website||[]).push([[89],{30876:(e,r,t)=>{t.d(r,{Zo:()=>c,kt:()=>u});var n=t(2784);function a(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function s(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function o(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?s(Object(t),!0).forEach((function(r){a(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function l(e,r){if(null==e)return{};var t,n,a=function(e,r){if(null==e)return{};var t,n,a={},s=Object.keys(e);for(n=0;n<s.length;n++)t=s[n],r.indexOf(t)>=0||(a[t]=e[t]);return a}(e,r);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)t=s[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var p=n.createContext({}),i=function(e){var r=n.useContext(p),t=r;return e&&(t="function"==typeof e?e(r):o(o({},r),e)),t},c=function(e){var r=i(e.components);return n.createElement(p.Provider,{value:r},e.children)},g="mdxType",m={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},h=n.forwardRef((function(e,r){var t=e.components,a=e.mdxType,s=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),g=i(t),h=a,u=g["".concat(p,".").concat(h)]||g[h]||m[h]||s;return t?n.createElement(u,o(o({ref:r},c),{},{components:t})):n.createElement(u,o({ref:r},c))}));function u(e,r){var t=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var s=t.length,o=new Array(s);o[0]=h;var l={};for(var p in r)hasOwnProperty.call(r,p)&&(l[p]=r[p]);l.originalType=e,l[g]="string"==typeof e?e:a,o[1]=l;for(var i=2;i<s;i++)o[i]=t[i];return n.createElement.apply(null,o)}return n.createElement.apply(null,t)}h.displayName="MDXCreateElement"},30730:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>p,contentTitle:()=>o,default:()=>m,frontMatter:()=>s,metadata:()=>l,toc:()=>i});var n=t(7896),a=(t(2784),t(30876));const s={title:"Usage - Library"},o="Using PostGraphile as a Library",l={unversionedId:"usage-library",id:"usage-library",title:"Usage - Library",description:"Library mode is the most popular way of running PostGraphile; it gives more",source:"@site/postgraphile/usage-library.md",sourceDirName:".",slug:"/usage-library",permalink:"/postgraphile/next/usage-library",draft:!1,editUrl:"https://github.com/graphile/crystal/tree/main/postgraphile/website/postgraphile/usage-library.md",tags:[],version:"current",frontMatter:{title:"Usage - Library"},sidebar:"docs",previous:{title:"Usage - Command Line",permalink:"/postgraphile/next/usage-cli"},next:{title:"Usage - Schema Only",permalink:"/postgraphile/next/usage-schema"}},p={},i=[{value:"PostGraphile instance",id:"postgraphile-instance",level:2},{value:"<code>pgl.createServ(grafserv)</code>",id:"pglcreateservgrafserv",level:3},{value:"<code>pgl.getSchemaResult()</code>",id:"pglgetschemaresult",level:3},{value:"<code>pgl.getSchema()</code>",id:"pglgetschema",level:3},{value:"<code>pgl.getResolvedPreset()</code>",id:"pglgetresolvedpreset",level:3},{value:"<code>pgl.release()</code>",id:"pglrelease",level:3}],c={toc:i},g="wrapper";function m(e){let{components:r,...t}=e;return(0,a.kt)(g,(0,n.Z)({},c,t,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"using-postgraphile-as-a-library"},"Using PostGraphile as a Library"),(0,a.kt)("p",null,"Library mode is the most popular way of running PostGraphile; it gives more\npower than using the CLI (see ",(0,a.kt)("a",{parentName:"p",href:"./usage-cli/"},"CLI usage"),") because you can\nleverage the capabilities and ecosystems of your chosen Node.js webserver\n(Express, Koa, Fastify, etc), but is more fully featured than ",(0,a.kt)("a",{parentName:"p",href:"./usage-schema/"},"Schema-only\nUsage"),"."),(0,a.kt)("h2",{id:"postgraphile-instance"},"PostGraphile instance"),(0,a.kt)("p",null,"Library mode is configured using a preset (see ",(0,a.kt)("a",{parentName:"p",href:"/postgraphile/next/config"},"Configuration")," for\nthe options) and returns a PostGraphile instance ",(0,a.kt)("inlineCode",{parentName:"p"},"pgl")," which has various\nmethods you can use depending on what you're trying to do."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="pgl.js"',title:'"pgl.js"'},'import preset from "./graphile.config.js";\nimport postgraphile from "postgraphile";\n\n// Our PostGraphile instance:\nexport const pgl = postgraphile(preset);\n')),(0,a.kt)("h3",{id:"pglcreateservgrafserv"},(0,a.kt)("inlineCode",{parentName:"h3"},"pgl.createServ(grafserv)")),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://grafast.org/grafserv/"},"Grafserv")," supports a number of different servers in the JS ecosystem, you\nshould import the ",(0,a.kt)("inlineCode",{parentName:"p"},"grafserv")," function from the relevant grafserv subpath:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'import { grafserv } from "postgraphile/grafserv/express/v4";\n// OR: import { grafserv } from "postgraphile/grafserv/node";\n// OR: import { grafserv } from "postgraphile/grafserv/koa/v2";\n// OR: import { grafserv } from "postgraphile/grafserv/fastify/v4";\n')),(0,a.kt)("p",null,"Then create your ",(0,a.kt)("inlineCode",{parentName:"p"},"serv")," instance by passing this to the ",(0,a.kt)("inlineCode",{parentName:"p"},"pgl.createServ()"),"\nmethod:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const serv = pgl.createServ(grafserv);\n")),(0,a.kt)("p",null,"This Grafserv instance (",(0,a.kt)("inlineCode",{parentName:"p"},"serv"),") can be mounted inside of your chosen server -\nfor instructions on how to do that, please see the relevant entry for your\nserver of choice in ",(0,a.kt)("a",{parentName:"p",href:"https://grafast.org/grafserv/"},"the Grafserv\ndocumentation"),"; typically there's a\n",(0,a.kt)("inlineCode",{parentName:"p"},"serv.addTo(...)")," method you can use."),(0,a.kt)("p",null,"Here's an example with Node's HTTP server:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="example-node.js"',title:'"example-node.js"'},'import { createServer } from "node:http";\nimport { grafserv } from "postgraphile/grafserv/node";\nimport { pgl } from "./pgl.js";\n\nconst serv = pgl.createServ(grafserv);\n\nconst server = createServer();\nserver.on("error", (e) => {\n  console.error(e);\n});\n\nserv.addTo(server).catch((e) => {\n  console.error(e);\n  process.exit(1);\n});\n\nserver.listen(5678);\n\nconsole.log("Server listening at http://localhost:5678");\n')),(0,a.kt)("p",null,"And an example for Express:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="example-express.js"',title:'"example-express.js"'},'import { createServer } from "node:http";\nimport express from "express";\nimport { grafserv } from "postgraphile/grafserv/express/v4";\nimport { pgl } from "./pgl.js";\n\nconst serv = pgl.createServ(grafserv);\n\nconst app = express();\nconst server = createServer(app);\nserver.on("error", () => {});\nserv.addTo(app, server).catch((e) => {\n  console.error(e);\n  process.exit(1);\n});\nserver.listen(5678);\n\nconsole.log("Server listening at http://localhost:5678");\n')),(0,a.kt)("p",null,"For information about using this ",(0,a.kt)("inlineCode",{parentName:"p"},"serv")," instance with Connect, Express, Koa, Fastify,\nRestify, or any other HTTP servers, please see the ",(0,a.kt)("a",{parentName:"p",href:"https://grafast.org/grafserv/"},"Grafserv\ndocumentation"),"."),(0,a.kt)("h3",{id:"pglgetschemaresult"},(0,a.kt)("inlineCode",{parentName:"h3"},"pgl.getSchemaResult()")),(0,a.kt)("p",null,"Returns a promise to the schema result - an object containing:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"schema")," - the GraphQL schema"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"resolvedPreset")," - the resolved preset")),(0,a.kt)("p",null,"Note that this may change over time, e.g. in watch mode."),(0,a.kt)("h3",{id:"pglgetschema"},(0,a.kt)("inlineCode",{parentName:"h3"},"pgl.getSchema()")),(0,a.kt)("p",null,"Shortcut to ",(0,a.kt)("inlineCode",{parentName:"p"},"(await pgl.getSchemaResult()).schema")," - a promise to the GraphQL\nschema the instance represents (may change due to watch mode)."),(0,a.kt)("h3",{id:"pglgetresolvedpreset"},(0,a.kt)("inlineCode",{parentName:"h3"},"pgl.getResolvedPreset()")),(0,a.kt)("p",null,"Get the current resolved preset that PostGraphile is using. Synchronous."),(0,a.kt)("h3",{id:"pglrelease"},(0,a.kt)("inlineCode",{parentName:"h3"},"pgl.release()")),(0,a.kt)("p",null,"Call this when you don't need the PostGraphile instance any more and it will\nrelease any resources it holds (for example schema watching, etc)."))}m.isMDXComponent=!0}}]);