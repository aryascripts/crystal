"use strict";(self.webpackChunk_localrepo_postgraphile_website=self.webpackChunk_localrepo_postgraphile_website||[]).push([[689],{30876:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>d});var n=a(2784);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),p=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},u=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},g=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),m=p(a),g=r,d=m["".concat(s,".").concat(g)]||m[g]||c[g]||i;return a?n.createElement(d,o(o({ref:t},u),{},{components:a})):n.createElement(d,o({ref:t},u))}));function d(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,o=new Array(i);o[0]=g;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[m]="string"==typeof e?e:r,o[1]=l;for(var p=2;p<i;p++)o[p]=a[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}g.displayName="MDXCreateElement"},64237:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>c,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var n=a(7896),r=(a(2784),a(30876));const i={title:"V5 New Feature Summary"},o="Version 5 New Feature Summary",l={unversionedId:"migrating-from-v4/v5-new-feature-summary",id:"migrating-from-v4/v5-new-feature-summary",title:"V5 New Feature Summary",description:'One of the main aims for PostGraphile V5 was to replace the cumbersome "lookahead engine"',source:"@site/postgraphile/migrating-from-v4/v5-new-feature-summary.md",sourceDirName:"migrating-from-v4",slug:"/migrating-from-v4/v5-new-feature-summary",permalink:"/postgraphile/next/migrating-from-v4/v5-new-feature-summary",draft:!1,editUrl:"https://github.com/graphile/crystal/tree/main/postgraphile/website/postgraphile/migrating-from-v4/v5-new-feature-summary.md",tags:[],version:"current",frontMatter:{title:"V5 New Feature Summary"},sidebar:"docs",previous:{title:"Migrating from V4",permalink:"/postgraphile/next/migrating-from-v4/"},next:{title:"makePluginByCombiningPlugins",permalink:"/postgraphile/next/migrating-from-v4/make-plugin-by-combining-plugins"}},s={},p=[],u={toc:p},m="wrapper";function c(e){let{components:t,...i}=e;return(0,r.kt)(m,(0,n.Z)({},u,i,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"version-5-new-feature-summary"},"Version 5 New Feature Summary"),(0,r.kt)("p",null,'One of the main aims for PostGraphile V5 was to replace the cumbersome "lookahead engine"\nwith something much more pleasant and powerful. After many iterations, we ultimately invented\n',(0,r.kt)("a",{parentName:"p",href:"https://grafast.org/"},"Gra",(0,r.kt)("em",{parentName:"a"},"fast")),": a new planning and execution engine for GraphQL."),(0,r.kt)("p",null,"Since the lookahead system underpinned everything in Version 4 of PostGraphile, replacing it\nmeant rebuilding everything from the ground up, so we took the opportunity to fix a huge number\nof other snags and suboptimal experiences in Version 4 - also adding in many capabilities which\nweren't possible, and changing some of the default behaviors."),(0,r.kt)("p",null,"Ultimately, Version 5 brings a number of new paradigms to PostGraphile, and along with that many\nnew features. The following list is a summary of those new features but is by no means complete!"),(0,r.kt)("h1",{id:"features-new-to-version-5"},"Features new to Version 5"),(0,r.kt)("div",{class:"featureSummary"},(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Lookahead replaced by advanced GraphQL query planning via new ",(0,r.kt)("a",{parentName:"li",href:"https://grafast.org/grafast/"},"Gra",(0,r.kt)("em",{parentName:"a"},"fast")," engine"))),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Every GraphQL request can get an associated plan diagram to ease understanding and debugging"),(0,r.kt)("figure",null,(0,r.kt)("p",null,(0,r.kt)("a",{target:"_blank",href:a(14181).Z},(0,r.kt)("img",{alt:"A Grafast plan diagram for an AllPosts query",src:a(31967).Z,width:"2024",height:"1832"}))),(0,r.kt)("figcaption",null,(0,r.kt)("p",null,"An autogenerated Gra",(0,r.kt)("em",{parentName:"p"},"fast")," plan diagram for the displayed GraphQL query. Plan diagrams detail the steps required to complete a GraphQL request and show how the data flows between them. See ",(0,r.kt)("a",{parentName:"p",href:"https://grafast.org/grafast/plan-diagrams"},'"Plan Diagrams"')," in the Gra",(0,r.kt)("em",{parentName:"p"},"fast")," documentation for more details.")))),(0,r.kt)("details",null,(0,r.kt)("summary",null,(0,r.kt)("p",null,"Massively improved SQL query generation: smaller, simpler, easier to understand, more performant")),(0,r.kt)("figure",null,(0,r.kt)("p",null,(0,r.kt)("a",{target:"_blank",href:a(6).Z},(0,r.kt)("img",{alt:"A GraphQL query for AllPosts",src:a(42019).Z,width:"3200",height:"1800"}))),(0,r.kt)("figcaption",null,(0,r.kt)("p",null,"An example of the vast improvement in the autogenerated SQL queries in Version 5 as compared to Version 4 for the same query. Generated SQL is now easier to understand and debug, and the V5 SQL query shown is twice as fast as the V4 SQL query.")))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Ability to cache certain SQL queries ","[experimental]"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/postgraphile/next/polymorphism"},"Polymorphism support"),", both in the engine and for Postgres autogeneration"),(0,r.kt)("li",{parentName:"ul"},"Incremental delivery support ","[experimental]"," - now possible to use ",(0,r.kt)("inlineCode",{parentName:"li"},"@stream")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"@defer"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"In addition to improving page load times by delaying delivery of expensive fields, this can be used to unlock previously impossible use cases - e.g. streaming huge amounts of data (e.g. to generate CSVs from reporting or similar)"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/postgraphile/next/behavior"},'New "behavior" system')," allows more precise control over how schema is generated",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Massively reduces the need for manually removing fields from the schema"))),(0,r.kt)("li",{parentName:"ul"},"Significantly reduced load on PostgreSQL database")),(0,r.kt)("details",null,(0,r.kt)("summary",null,(0,r.kt)("p",null,"Connections are now as cheap as lists unless using connection-specific features (which are also cheaper)")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},'Thanks to new planning system, "hasNextPage" / "hasPreviousPage" can be achieved by just fetching an extra row'),(0,r.kt)("li",{parentName:"ul"},"Cursors are much cheaper"))),(0,r.kt)("details",null,(0,r.kt)("summary",null,(0,r.kt)("p",null,"Export your schema as executable code ","[experimental]")),(0,r.kt)("p",null,"Great for serverless:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"no run-time introspection"),(0,r.kt)("li",{parentName:"ul"},"fewer dependencies"),(0,r.kt)("li",{parentName:"ul"},"lower memory usage"),(0,r.kt)("li",{parentName:"ul"},"near-instant startup (great for serverless)")),(0,r.kt)("p",null,"Also helps with understanding how the system/plans/etc works; and enables a path to migrate away from auto-generated should you later want to"),(0,r.kt)("p",null,"See ",(0,r.kt)("a",{parentName:"p",href:"/postgraphile/next/exporting-schema"},'"Exporting your schema"')," for more information.")),(0,r.kt)("details",null,(0,r.kt)("summary",null,(0,r.kt)("p",null,"makeExtendSchemaPlugin now massively improved")),(0,r.kt)("p",null,"No more ",(0,r.kt)("inlineCode",{parentName:"p"},"selectGraphQLResultFromTable"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"@requires"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"@pgQuery")," or other hacks to abstract away the complicated lookahead system. Instead, use straightforward declarative code for all these concerns, integrating deeply and automatically with the Gra",(0,r.kt)("em",{parentName:"p"},"fast")," operation plan"),(0,r.kt)("p",null,"Extending auto-generated types should always work, independent of plugin order"),(0,r.kt)("p",null,"User data and Postgres leaf data (e.g. column values) can be used interchangeably and the planning system will automatically optimize Postgres data (via inlining) if it can")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},'Much easier to add "computed columns" in user code, which significantly increases performance by not having Postgres do this work'),(0,r.kt)("li",{parentName:"ul"},"Even if you query remote data sources (e.g. Stripe) in fields within a list, when you come back to postgres everything is automatically re-batched so no introduction of N+1 problem"),(0,r.kt)("li",{parentName:"ul"},'Unified plugins: no "server plugins" vs "schema plugins" any more'),(0,r.kt)("li",{parentName:"ul"},"Presets: easily share plugin lists and configuration options between servers, and still perform local customization easily"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/postgraphile/next/config"},"Consolidated configuration")," across CLI, library and schema-only usage; no more postgraphilerc.")),(0,r.kt)("details",null,(0,r.kt)("summary",null,(0,r.kt)("p",null,"Generate personalized documentation based on which plugins/presets you're using")),(0,r.kt)("figure",null,(0,r.kt)("p",null,(0,r.kt)("a",{target:"_blank",href:a(51588).Z},(0,r.kt)("img",{alt:"Cropped screenshot of &#39;graphile config options&#39;",src:a(36054).Z,width:"1931",height:"1053"}))),(0,r.kt)("figcaption",null,"Screenshot of part of the coloured markdown output from executing ",(0,r.kt)("code",null,"graphile config options")," showing the options available to be set inside the config file.")),(0,r.kt)("figure",null,(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Initial output of the `graphile inflection list` command",src:a(25708).Z,width:"654",height:"289"})),(0,r.kt)("figcaption",null,"Screenshot showing the initial output of the ",(0,r.kt)("code",null,"graphile inflection list")," command, including a summary of the available inflectors and their arguments.")),(0,r.kt)("figure",null,(0,r.kt)("p",null,(0,r.kt)("img",{alt:"More detailed output from later in the `graphile inflection list` command",src:a(35669).Z,width:"598",height:"454"})),(0,r.kt)("figcaption",null,"Screenshot from lower down in the output of the ",(0,r.kt)("code",null,"graphile inflection list")," command, detailing each inflector, its documentation and its rough TypeScript definition.")),(0,r.kt)("figure",null,(0,r.kt)("p",null,(0,r.kt)("a",{target:"_blank",href:a(11992).Z},(0,r.kt)("img",{alt:"Cropped screenshot of &#39;graphile config print&#39;",src:a(91805).Z,width:"1893",height:"1148"}))),(0,r.kt)("figcaption",null,"Screenshot of part of the coloured output from executing ",(0,r.kt)("code",null,"graphile config print")," showing the options that the local configuration file is using.")),(0,r.kt)("p",null,"(More to come!)")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Better Relay support via ",(0,r.kt)("inlineCode",{parentName:"li"},"postgraphile/presets/relay")),(0,r.kt)("li",{parentName:"ul"},"Massively enhanced TypeScript support"),(0,r.kt)("li",{parentName:"ul"},"Fully implements the latest ",(0,r.kt)("a",{parentName:"li",href:"https://graphql.github.io/graphql-over-http/draft/"},"GraphQL-over-HTTP specification draft")),(0,r.kt)("li",{parentName:"ul"},"Ability to perform JOINs in SQL"),(0,r.kt)("li",{parentName:"ul"},"No ",(0,r.kt)("inlineCode",{parentName:"li"},"RETURNING *")," on mutations, so column-level select grants don't break mutations"),(0,r.kt)("li",{parentName:"ul"},"Write-only columns now supported in mutations")),(0,r.kt)("details",null,(0,r.kt)("summary",null,(0,r.kt)("p",null,"Use separate transactions in the same GraphQL request")),(0,r.kt)("p",null,"Parts of mutations can now use a connection string with elevated privileges without transaction isolation causing these changes to not be reflected in the mutation payload")),(0,r.kt)("details",null,(0,r.kt)("summary",null,(0,r.kt)("p",null,"Massive enhancements to no-ignore-indexes")),(0,r.kt)("p",null,"Including ability to overrule, and only preventing the expensive backwards relations whilst still allowing the cheap forwards relations.")),(0,r.kt)("details",null,(0,r.kt)("summary",null,(0,r.kt)("p",null,"Bespoke support for major Node.js web frameworks, fitting naturally into each of their workflows")),(0,r.kt)("p",null,"Even makes use of things like vendor-specific websocket modules (e.g. ",(0,r.kt)("inlineCode",{parentName:"p"},"@fastify/websocket")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"koa-websocket"),") for deeply integrated websocket support")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Theoretically easier to use with other GraphQL servers (assuming that they allow you to replace the 'execute' method)"),(0,r.kt)("li",{parentName:"ul"},"Multiple (postgres) databases in same GraphQL schema")),(0,r.kt)("details",null,(0,r.kt)("summary",null,(0,r.kt)("p",null,"New strongly typed PostgreSQL introspection library ",(0,r.kt)("inlineCode",{parentName:"p"},"pg-introspection"))),(0,r.kt)("p",null,"Now generated from Postgres documentation and strongly typed (view postgres docs when hovering an introspection value in your editor!), plus much simpler so should work better with other postgres-alikes \ud83e\udd1e")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Optionally define your resources (tables, functions, views, etc) manually and generate the schema from them (enables generation from DDL or model objects)"),(0,r.kt)("li",{parentName:"ul"},"Better capabilities for allowing changes to your underlying Postgres tables without causing breaking changes to GraphQL API"),(0,r.kt)("li",{parentName:"ul"},"Use your choice of Postgres client"),(0,r.kt)("li",{parentName:"ul"},"Change your PostgreSQL connection string at runtime (assuming you have multiple identical databases - sometimes used for multitenancy)"),(0,r.kt)("li",{parentName:"ul"},"Optionally use alternative authorization techniques (don't need to use RLS) ","[experimental]"),(0,r.kt)("li",{parentName:"ul"},"Better support for various Postgres types"),(0,r.kt)("li",{parentName:"ul"},"Don't convert unknown types to ",(0,r.kt)("inlineCode",{parentName:"li"},"String"),", instead omit them"),(0,r.kt)("li",{parentName:"ul"},'In graphile-build, GraphQL types are registered at "init" time, so ',(0,r.kt)("inlineCode",{parentName:"li"},"build.getTypeByName")," no longer affected by plugin ordering concerns"),(0,r.kt)("li",{parentName:"ul"},"Various other plugin ordering issues eliminated or reduced"),(0,r.kt)("li",{parentName:"ul"},"Overhauled inflection system: more consistent, simpler to achieve common tasks"),(0,r.kt)("li",{parentName:"ul"},"Use ",(0,r.kt)("inlineCode",{parentName:"li"},"sql")," directly for making SQL fragments, rather than needing ",(0,r.kt)("inlineCode",{parentName:"li"},"sql.fragment")," (reduces code verbosity)"),(0,r.kt)("li",{parentName:"ul"},"GraphQL v16 support"),(0,r.kt)("li",{parentName:"ul"},"GraphiQL v2 support via ",(0,r.kt)("a",{parentName:"li",href:"https://grafast.org/ruru/"},"Ruru")," (which can now be used standalone)"),(0,r.kt)("li",{parentName:"ul"},"Planning information stored directly into GraphQL schema objects - removing a field now removes all its behaviors (re-introducing a field with the same name will not cause problems like it did in V4)"))))}c.isMDXComponent=!0},51588:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/files/graphile-config-options-screenshot-3b1600840a76c7877ffdc429babee129.png"},11992:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/files/graphile-config-print-screenshot-b777b5ff361f7ae94952d098ce955ec5.png"},14181:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/files/2023-04-26-mermaid-diagram-24e7d632d46178a99b3c8063d64f5e54.png"},6:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/files/2023-04-26-v4-v5-comparison-1315f1de634b5e9dbd3debab6af81748.png"},36054:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/graphile-config-options-screenshot-3b1600840a76c7877ffdc429babee129.png"},91805:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/graphile-config-print-screenshot-b777b5ff361f7ae94952d098ce955ec5.png"},25708:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/graphile-inflection-list-1-76eb4ebb28f154b5d981cd72ef6428f7.png"},35669:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/graphile-inflection-list-2-e624e35bb541cadc7bb88fcba406c3c6.png"},31967:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/2023-04-26-mermaid-diagram-24e7d632d46178a99b3c8063d64f5e54.png"},42019:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/2023-04-26-v4-v5-comparison-1315f1de634b5e9dbd3debab6af81748.png"}}]);