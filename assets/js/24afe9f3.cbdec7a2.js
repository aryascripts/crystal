"use strict";(self.webpackChunk_localrepo_grafast_website=self.webpackChunk_localrepo_grafast_website||[]).push([[2256],{30876:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>y});var i=r(2784);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,i)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,i,n=function(e,t){if(null==e)return{};var r,i,n={},a=Object.keys(e);for(i=0;i<a.length;i++)r=a[i],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)r=a[i],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var l=i.createContext({}),d=function(e){var t=i.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},p=function(e){var t=d(e.components);return i.createElement(l.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},g=i.forwardRef((function(e,t){var r=e.components,n=e.mdxType,a=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),c=d(r),g=n,y=c["".concat(l,".").concat(g)]||c[g]||u[g]||a;return r?i.createElement(y,o(o({ref:t},p),{},{components:r})):i.createElement(y,o({ref:t},p))}));function y(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var a=r.length,o=new Array(a);o[0]=g;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[c]="string"==typeof e?e:n,o[1]=s;for(var d=2;d<a;d++)o[d]=r[d];return i.createElement.apply(null,o)}return i.createElement.apply(null,r)}g.displayName="MDXCreateElement"},6261:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>d});var i=r(7896),n=(r(2784),r(30876));const a={sidebar_position:1},o="Registry",s={unversionedId:"step-library/dataplan-pg/registry/index",id:"step-library/dataplan-pg/registry/index",title:"Registry",description:"The registry contains all of the codecs,",source:"@site/grafast/step-library/dataplan-pg/registry/index.md",sourceDirName:"step-library/dataplan-pg/registry",slug:"/step-library/dataplan-pg/registry/",permalink:"/grafast/step-library/dataplan-pg/registry/",draft:!1,editUrl:"https://github.com/graphile/crystal/tree/main/grafast/website/grafast/step-library/dataplan-pg/registry/index.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"@dataplan/pg",permalink:"/grafast/step-library/dataplan-pg/"},next:{title:"Codecs",permalink:"/grafast/step-library/dataplan-pg/registry/codecs"}},l={},d=[{value:"makeRegistryBuilder()",id:"makeregistrybuilder",level:2},{value:"RegistryBuilder.addCodec(codec)",id:"registrybuilderaddcodeccodec",level:3},{value:"RegistryBuilder.addResource(resourceOptions)",id:"registrybuilderaddresourceresourceoptions",level:3},{value:"RegistryBuilder.addRelation(codec, name, resourceOptions, details)",id:"registrybuilderaddrelationcodec-name-resourceoptions-details",level:3},{value:"RegistryBuilder.getRegistryConfig()",id:"registrybuildergetregistryconfig",level:3},{value:"makeRegistry(registryConfig)",id:"makeregistryregistryconfig",level:2},{value:"PgRegistry",id:"pgregistry",level:2},{value:"Registry.pgCodecs",id:"registrypgcodecs",level:3},{value:"Registry.pgResources",id:"registrypgresources",level:3},{value:"Registry.pgRelations",id:"registrypgrelations",level:3}],p={toc:d},c="wrapper";function u(e){let{components:t,...r}=e;return(0,n.kt)(c,(0,i.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"registry"},"Registry"),(0,n.kt)("p",null,"The registry contains all of the ",(0,n.kt)("a",{parentName:"p",href:"./codecs"},"codecs"),",\n",(0,n.kt)("a",{parentName:"p",href:"./resources"},"resources")," and ",(0,n.kt)("a",{parentName:"p",href:"./relations"},"relations")," that you want\n",(0,n.kt)("inlineCode",{parentName:"p"},"@dataplan/pg")," to know about."),(0,n.kt)("p",null,"Though writing the registry by hand gives you full control over how your\ndatabase is represented, it's more common to auto-generate it - this gives you\na fully type safe registry in moments. Of course, you can auto-generate your\nfirst version of it, and then take over maintenance from that point on should\nyou wish."),(0,n.kt)("p",null,"(TODO: detail autogeneration.)"),(0,n.kt)("h2",{id:"makeregistrybuilder"},"makeRegistryBuilder()"),(0,n.kt)("p",null,'We recommend that you use the registry builder to build the registry, this\nenables you to use a comfortable "builder" syntax and maintain types\nthroughout.'),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},'import { makeRegistryBuilder } from "@dataplan/pg";\n')),(0,n.kt)("p",null,"The registry builder has the following main methods:"),(0,n.kt)("h3",{id:"registrybuilderaddcodeccodec"},"RegistryBuilder.addCodec(codec)"),(0,n.kt)("p",null,"Adds a codec to the builder."),(0,n.kt)("p",null,"For more details on codecs, see ",(0,n.kt)("a",{parentName:"p",href:"./codecs"},"codecs"),"."),(0,n.kt)("h3",{id:"registrybuilderaddresourceresourceoptions"},"RegistryBuilder.addResource(resourceOptions)"),(0,n.kt)("p",null,"Add resource options to the registry builder. Note that the building of the\nregistry itself is what produces the resource that you use at runtime, so\nyou're just passing the resource options here."),(0,n.kt)("p",null,"For more details on resources, see ",(0,n.kt)("a",{parentName:"p",href:"./resources"},"resources"),"."),(0,n.kt)("h3",{id:"registrybuilderaddrelationcodec-name-resourceoptions-details"},"RegistryBuilder.addRelation(codec, name, resourceOptions, details)"),(0,n.kt)("p",null,"Adds a relationship named ",(0,n.kt)("inlineCode",{parentName:"p"},"name")," between ",(0,n.kt)("inlineCode",{parentName:"p"},"codec")," and the resource represented\nby ",(0,n.kt)("inlineCode",{parentName:"p"},"resourceOptions"),". ",(0,n.kt)("inlineCode",{parentName:"p"},"details")," contains the breakdown of the relationship:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"localAttributes")," - the attributes of ",(0,n.kt)("inlineCode",{parentName:"li"},"codec")," that do the referencing in this relation"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"remoteAttributes")," - the attributes of ",(0,n.kt)("inlineCode",{parentName:"li"},"resourceOptions.codec")," that are referenced by this relation"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"isUnique")," - true if this relation can return at most one result, otherwise false. Always true on the referencing side."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"isReferencee")," - true if this relation was defined on the table represented by ",(0,n.kt)("inlineCode",{parentName:"li"},"resourceOptions.codec")," rather than the table represented by ",(0,n.kt)("inlineCode",{parentName:"li"},"codec"))),(0,n.kt)("p",null,"For more details on relations, see ",(0,n.kt)("a",{parentName:"p",href:"./relations"},"relations"),"."),(0,n.kt)("h3",{id:"registrybuildergetregistryconfig"},"RegistryBuilder.getRegistryConfig()"),(0,n.kt)("p",null,"Returns the registry config, to feed into ",(0,n.kt)("inlineCode",{parentName:"p"},"makeRegistry"),"."),(0,n.kt)("h2",{id:"makeregistryregistryconfig"},"makeRegistry(registryConfig)"),(0,n.kt)("p",null,"Returns a new registry by building all the resources and relations in\n",(0,n.kt)("inlineCode",{parentName:"p"},"registryConfig"),"."),(0,n.kt)("h2",{id:"pgregistry"},"PgRegistry"),(0,n.kt)("p",null,"The PgRegistry produced by ",(0,n.kt)("inlineCode",{parentName:"p"},"makeRegistry")," will have three properties:"),(0,n.kt)("h3",{id:"registrypgcodecs"},"Registry.pgCodecs"),(0,n.kt)("p",null,"An object map of all the codecs in your registry (the keys are the names of the\ncodecs)."),(0,n.kt)("h3",{id:"registrypgresources"},"Registry.pgResources"),(0,n.kt)("p",null,"An object map of all the resources in your registry (the keys are the names of\nthe resources)."),(0,n.kt)("h3",{id:"registrypgrelations"},"Registry.pgRelations"),(0,n.kt)("p",null,"An object map from the codec name to the relations for that codec, where the\nrelations are represented as an object map from the relation name to the\nrelation details."),(0,n.kt)("p",null,"It's rare that you'd need to use this directly."))}u.isMDXComponent=!0}}]);