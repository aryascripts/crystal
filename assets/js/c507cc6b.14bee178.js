"use strict";(self.webpackChunk_localrepo_postgraphile_website=self.webpackChunk_localrepo_postgraphile_website||[]).push([[2026],{30876:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var a=n(2784);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=p(n),h=r,m=d["".concat(s,".").concat(h)]||d[h]||c[h]||i;return n?a.createElement(m,o(o({ref:t},u),{},{components:n})):a.createElement(m,o({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=h;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[d]="string"==typeof e?e:r,o[1]=l;for(var p=2;p<i;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},71673:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>c,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var a=n(7896),r=(n(2784),n(30876));const i={layout:"page",path:"/postgraphile/required-knowledge/",title:"Required Knowledge"},o=void 0,l={unversionedId:"required-knowledge",id:"version-4.x/required-knowledge",title:"Required Knowledge",description:"WORK IN PROGRESS: PR's welcome!",source:"@site/versioned_docs/version-4.x/required-knowledge.md",sourceDirName:".",slug:"/required-knowledge",permalink:"/postgraphile/current/required-knowledge",draft:!1,editUrl:"https://github.com/graphile/crystal/tree/main/postgraphile/website/versioned_docs/version-4.x/required-knowledge.md",tags:[],version:"4.x",frontMatter:{layout:"page",path:"/postgraphile/required-knowledge/",title:"Required Knowledge"},sidebar:"docs",previous:{title:"Requirements",permalink:"/postgraphile/current/requirements"},next:{title:"Quick Start Guide",permalink:"/postgraphile/current/quick-start-guide"}},s={},p=[{value:"Database - basics",id:"database---basics",level:3},{value:"Case insensitive unless quoted",id:"case-insensitive-unless-quoted",level:4},{value:"The word <code>user</code> is reserved",id:"the-word-user-is-reserved",level:4},{value:"PostgreSQL doc versioning",id:"postgresql-doc-versioning",level:4},{value:"Defining tables",id:"defining-tables",level:4},{value:"Creating roles",id:"creating-roles",level:4},{value:"Granting permissions",id:"granting-permissions",level:4},{value:"Creating security policies",id:"creating-security-policies",level:4},{value:"Recommended path",id:"recommended-path",level:4}],u={toc:p},d="wrapper";function c(e){let{components:t,...n}=e;return(0,r.kt)(d,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"WORK IN PROGRESS"),": PR's welcome!"),(0,r.kt)("p",null,"PostGraphile builds upon other technologies such as PostgreSQL and GraphQL, and\nthe PostGraphile documentation doesn't cover these topics in depth as they are\nwell documented elsewhere."),(0,r.kt)("p",null,"This page aims to outline some of the things you might want to do with\nPostGraphile and what knowledge you may need (and where to get it) to do those\nthings well."),(0,r.kt)("h3",{id:"database---basics"},"Database - basics"),(0,r.kt)("p",null,"Below outlines some of the SQL syntax and features you will probably want to be\nfamiliar with to make the most of your PostGraphile usage. PostGraphile is\nunopinionated in how you manage your database, so you may not need to be able to\nwrite this syntax depending on what technologies you use to manage your DB (for\nexample, you might use a graphical tool), but if you can read it then it will\nhelp you to read the PostGraphile documentation."),(0,r.kt)("h4",{id:"case-insensitive-unless-quoted"},"Case insensitive unless quoted"),(0,r.kt)("p",null,"SQL is case insensitive, both keywords and identifiers, so the following are all\nequivalent:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"select * from users")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"SELECT * FROM USERS")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"SeLeCt * FrOm UsErS"))),(0,r.kt)("p",null,"This means a column like ",(0,r.kt)("inlineCode",{parentName:"p"},"userId")," will actually come out as ",(0,r.kt)("inlineCode",{parentName:"p"},"userid"),". To make an\nidentifier (table/column/function/etc name) case sensitive, wrap it in double\nquotes:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},'select * from "Users"'))),(0,r.kt)("p",null,'Benjie tends to prefer the lowercase syntax because it\'s easier to read and not\nas "shouty".'),(0,r.kt)("p",null,"It's common to use snake_case as the naming convention in SQL because of this\ncase-insensitivity, to save having to escape all the identifiers."),(0,r.kt)("h4",{id:"the-word-user-is-reserved"},"The word ",(0,r.kt)("inlineCode",{parentName:"h4"},"user")," is reserved"),(0,r.kt)("p",null,"If you want to call your table ",(0,r.kt)("inlineCode",{parentName:"p"},"user")," you need to escape it; e.g."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'create table "user" ( ... );\n')),(0,r.kt)("p",null,"Here's a full list of reserved keywords:\n",(0,r.kt)("a",{parentName:"p",href:"https://www.postgresql.org/docs/current/sql-keywords-appendix.html"},"https://www.postgresql.org/docs/current/sql-keywords-appendix.html")),(0,r.kt)("p",null,"Most keywords are singular, which is why Benjie prefers to use plurals when\nnaming tables as it helps avoid potential keyword clashes."),(0,r.kt)("h4",{id:"postgresql-doc-versioning"},"PostgreSQL doc versioning"),(0,r.kt)("p",null,"PostgreSQL docs are found at ",(0,r.kt)("inlineCode",{parentName:"p"},"https://postgresql.org/docs/VERSION/..."),". Often\nwhen you google you will be taken to out of date docs, like those for version\n9.1 or 8.3 or similar. At the top of every documentation page are links to jump\nto the same page in the different PostgreSQL versions. Always make sure you are\nreferring to the docs in the version of PostgreSQL that you are using."),(0,r.kt)("p",null,"In our documentation, we always try and link to ",(0,r.kt)("inlineCode",{parentName:"p"},"/docs/current/...")," which is a\nspecial URL that always shows the latest stable version of PostgreSQL. If you\nare using an older version you should make sure to switch to the older docs."),(0,r.kt)("h4",{id:"defining-tables"},"Defining tables"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"create table users (\n  id serial primary key,\n  username citext not null unique check(username ~ '^[a-z][a-z0-9]+$'),\n  first_name text,\n  last_name text,\n  created_at timestamptz not null default now(),\n  updated_at timestamptz not null default now()\n);\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"create table")," statement:\n",(0,r.kt)("a",{parentName:"li",href:"https://www.postgresql.org/docs/current/sql-createtable.html"},"https://www.postgresql.org/docs/current/sql-createtable.html")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"serial"),' data type is effectively an "auto-increment" field (for primary key):\n',(0,r.kt)("a",{parentName:"li",href:"https://www.postgresql.org/docs/current/datatype-numeric.html#DATATYPE-SERIAL"},"https://www.postgresql.org/docs/current/datatype-numeric.html#DATATYPE-SERIAL")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"not null"),":\n",(0,r.kt)("a",{parentName:"li",href:"https://www.postgresql.org/docs/current/ddl-constraints.html#id-1.5.4.6.6"},"https://www.postgresql.org/docs/current/ddl-constraints.html#id-1.5.4.6.6")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"unique")," is a shorthand for creating a unique constraint on the column:\n",(0,r.kt)("a",{parentName:"li",href:"https://www.postgresql.org/docs/current/ddl-constraints.html#DDL-CONSTRAINTS-UNIQUE-CONSTRAINTS"},"https://www.postgresql.org/docs/current/ddl-constraints.html#DDL-CONSTRAINTS-UNIQUE-CONSTRAINTS")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"check")," is a shorthand for creating a check constraint on the table:\n",(0,r.kt)("a",{parentName:"li",href:"https://www.postgresql.org/docs/current/ddl-constraints.html#DDL-CONSTRAINTS-CHECK-CONSTRAINTS"},"https://www.postgresql.org/docs/current/ddl-constraints.html#DDL-CONSTRAINTS-CHECK-CONSTRAINTS")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"~")," is the case-sensitive POSIX regexp comparison operator:\n",(0,r.kt)("a",{parentName:"li",href:"https://www.postgresql.org/docs/current/functions-matching.html#FUNCTIONS-POSIX-REGEXP"},"https://www.postgresql.org/docs/current/functions-matching.html#FUNCTIONS-POSIX-REGEXP")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"timestamptz")," is short for ",(0,r.kt)("inlineCode",{parentName:"li"},"timestamp with time zone")," which reads the offset\nyou provide and converts to UTC for storage. Note the timezone you save is\nLOST (despite the name of the type) so if you wish to store the timezone\noffset itself you should do so in a separate column. You should always use\nthis date type:\n",(0,r.kt)("a",{parentName:"li",href:"https://wiki.postgresql.org/wiki/Don't_Do_This#Don.27t_use_timestamp_.28without_time_zone.29"},"https://wiki.postgresql.org/wiki/Don't_Do_This#Don.27t_use_timestamp_.28without_time_zone.29")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"default")," if the column is not specified, what should its value default to\n(only applies to ",(0,r.kt)("inlineCode",{parentName:"li"},"INSERT"),")")),(0,r.kt)("h4",{id:"creating-roles"},"Creating roles"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"create role my_superuser with login password 'password here' superuser;\ncreate role app_authenticator with login password 'password here' noinherit;\ncreate role app_visitor;\ngrant app_visitor to app_authenticator;\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"create role")," statement:\n",(0,r.kt)("a",{parentName:"li",href:"https://www.postgresql.org/docs/current/sql-createrole.html"},"https://www.postgresql.org/docs/current/sql-createrole.html")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"login")," - enables login"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"password '...'")," - sets the password (note passwords are encrypted by default)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"noinherit")," - if you are a role with noinherit then you do not inherit the\npermissions from the roles that you have been granted, though you may still\nswitch into them (via ",(0,r.kt)("inlineCode",{parentName:"li"},"set [local] role other_role;"),") to use those privileges.\nThis is useful for the PostGraphile user because it means that it cannot\nactually take any actions without first switching into another role (e.g.\n",(0,r.kt)("inlineCode",{parentName:"li"},"app_visitor")," or ",(0,r.kt)("inlineCode",{parentName:"li"},"app_admin"),").")),(0,r.kt)("h4",{id:"granting-permissions"},"Granting permissions"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"grant\n  select,\n  insert (column_1, column_2),\n  update (column_2, column_3),\n  delete\non my_table to app_visitor;\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"grant")," statement: ",(0,r.kt)("a",{parentName:"li",href:"https://www.postgresql.org/docs/current/sql-grant.html"},"https://www.postgresql.org/docs/current/sql-grant.html")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"select"),": we don't recommend using column-level select grants (because it\nprevents ",(0,r.kt)("inlineCode",{parentName:"li"},"select *")," from working, and has knock-on consequences for mutations\nand functions)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"insert (col1, col2)")," / ",(0,r.kt)("inlineCode",{parentName:"li"},"update (col1, col2)"),": we recommend that you always\nwhitelist the writable columns; do not ",(0,r.kt)("inlineCode",{parentName:"li"},"grant insert on my_table")," as that will\nallow inserting into any column including primary key, timestamps, etc.\nCombine this with PostGraphile's ",(0,r.kt)("inlineCode",{parentName:"li"},"--no-ignore-rbac")," to have a more carefully\nhoned GraphQL schema."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"delete"),": column-level grants don't make sense on delete.")),(0,r.kt)("h4",{id:"creating-security-policies"},"Creating security policies"),(0,r.kt)("p",null,"Check out our Row-Level security infosheet here:\n",(0,r.kt)("a",{parentName:"p",href:"https://learn.graphile.org/docs/PostgreSQL_Row_Level_Security_Infosheet.pdf"},"https://learn.graphile.org/docs/PostgreSQL_Row_Level_Security_Infosheet.pdf")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"-- Without this line, even if you define security policies, they will not be enforced\nalter table my_table enable row level security;\n\ncreate policy manage_own on my_table for all using ( author_id = current_user_id() );\ncreate policy must_be_verified on my_table as restrictive for insert using ( current_user_is_verified() );\ncreate policy admin_delete on my_table for delete using ( current_user_is_admin() );\ncreate policy friend_insert on my_other_table for insert with check ( are_friends(author_id, user_id) );\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"create policy")," statement:\n",(0,r.kt)("a",{parentName:"li",href:"https://www.postgresql.org/docs/current/sql-createpolicy.html"},"https://www.postgresql.org/docs/current/sql-createpolicy.html")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"as restrictive"),": by default policies are 'permissive' and only one must pass;\nrestrictive policies require at least one permissive policy to pass and ",(0,r.kt)("em",{parentName:"li"},"all"),"\nrestrictive policies to pass"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"for all")," / ",(0,r.kt)("inlineCode",{parentName:"li"},"for select")," / ",(0,r.kt)("inlineCode",{parentName:"li"},"for insert")," / ",(0,r.kt)("inlineCode",{parentName:"li"},"for update")," / ",(0,r.kt)("inlineCode",{parentName:"li"},"for delete"),": what\noperations does this policy apply to (note: there's no\n",(0,r.kt)("inlineCode",{parentName:"li"},"FOR INSERT AND UPDATE")," - you either have to use ",(0,r.kt)("inlineCode",{parentName:"li"},"ALL")," or define multiple\npolicies, one per operation)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"using")," - check to apply against PRE-EXISTING ROW to see if you can do the\naction (doesn't make sense for ",(0,r.kt)("inlineCode",{parentName:"li"},"INSERT"),")"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"with check")," - check to apply against NEWLY-UPDATED ROW to see if you can do\nthat action (doesn't make sense for ",(0,r.kt)("inlineCode",{parentName:"li"},"SELECT")," or ",(0,r.kt)("inlineCode",{parentName:"li"},"DELETE"),")"),(0,r.kt)("li",{parentName:"ul"},"NOTE: if ",(0,r.kt)("inlineCode",{parentName:"li"},"with check")," is not specified then the ",(0,r.kt)("inlineCode",{parentName:"li"},"using")," clause will also be\nused for ",(0,r.kt)("inlineCode",{parentName:"li"},"with check")," automatically.")),(0,r.kt)("h4",{id:"recommended-path"},"Recommended path"),(0,r.kt)("p",null,"A good way to tackle and make sense of PostGraphile is to go through these\nsteps:"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"./"},(0,r.kt)("strong",{parentName:"a"},"Introduction"))),(0,r.kt)("p",null,"Describes why you would want to go with this approach in the first place and\nwhat the benefits and features of using PostGraphile are. Do not be deterred if\nyou find this daunting and are not used to using this much ",(0,r.kt)("inlineCode",{parentName:"p"},"SQL"),". Using the\ndatabase as the application layer is a fairly modern and unfamiliar concept, but\nby adopting it there are many benefits you may reap by being close to the data,\nas well as leveraging the declarative nature of SQL."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"./quick-start-guide/"},(0,r.kt)("strong",{parentName:"a"},"Quick start"))),(0,r.kt)("p",null,"Walks you through installing the required software such as ",(0,r.kt)("inlineCode",{parentName:"p"},"node")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"postgres"),"\nand creating of a database that PostGraphile will be connecting to."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"./postgresql-schema-design/"},(0,r.kt)("strong",{parentName:"a"},"Schema Design"))),(0,r.kt)("p",null,"Whether you have or have not built databases before, this section gives valuable\nadvice about how to design a solid database. Topics include naming conventions,\nnamespacing with schemas, managing access with roles and policies, handling\nmigrations and much more. If these words are unfamiliar to you, do not worry, it\nwill be clear once you have built a database following this guide."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"./running-postgraphile-in-docker/"},(0,r.kt)("strong",{parentName:"a"},"PostGraphile-in-docker"))),(0,r.kt)("p",null,"PostGraphile does not require Docker, and is very at home in a pure Node.js\nenvironment, so if you're not big on Docker you can skip this one!"),(0,r.kt)("p",null,"If you develop using Docker, this will run through the building of a GraphQL API\nfor a forum-like website. It goes through installation through to example\nqueries and mutations to issue to PostGraphile."))}c.isMDXComponent=!0}}]);