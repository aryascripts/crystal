"use strict";(self.webpackChunk_localrepo_graphile_build_website=self.webpackChunk_localrepo_graphile_build_website||[]).push([[647],{876:(e,t,n)=>{n.d(t,{Zo:()=>h,kt:()=>m});var o=n(2784);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,i=function(e,t){if(null==e)return{};var n,o,i={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=o.createContext({}),p=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},h=function(e){var t=p(e.components);return o.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},c=o.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,h=l(e,["components","mdxType","originalType","parentName"]),u=p(n),c=i,m=u["".concat(s,".").concat(c)]||u[c]||d[c]||a;return n?o.createElement(m,r(r({ref:t},h),{},{components:n})):o.createElement(m,r({ref:t},h))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,r=new Array(a);r[0]=c;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:i,r[1]=l;for(var p=2;p<a;p++)r[p]=n[p];return o.createElement.apply(null,r)}return o.createElement.apply(null,n)}c.displayName="MDXCreateElement"},3066:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>d,frontMatter:()=>a,metadata:()=>l,toc:()=>p});var o=n(7896),i=(n(2784),n(876));const a={title:"Hooks",sidebar_position:3},r=void 0,l={unversionedId:"hooks",id:"hooks",title:"Hooks",description:"The most common thing for a plugin to do is to register schema hooks.",source:"@site/graphile-build/hooks.md",sourceDirName:".",slug:"/hooks",permalink:"/graphile-build/hooks",draft:!1,editUrl:"https://github.com/graphile/crystal/tree/main/graphile-build/website/graphile-build/hooks.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"Hooks",sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Plugins",permalink:"/graphile-build/plugins"},next:{title:"All Hooks",permalink:"/graphile-build/all-hooks"}},s={},p=[{value:"Stages of the build process",id:"stages-of-the-build-process",level:3},{value:"Build object (<code>Build</code>)",id:"build-object-build",level:4},{value:"Context object (<code>Context</code>)",id:"context-object-context",level:4},{value:"Namespaces",id:"namespaces",level:3}],h={toc:p},u="wrapper";function d(e){let{components:t,...n}=e;return(0,i.kt)(u,(0,o.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"The most common thing for a plugin to do is to register schema hooks."),(0,i.kt)("p",null,"The GraphQL hooks allow you to manipulate the argument (specification) that is\nbeing passed to the GraphQL object constructors before the objects are\nconstructed. You can think of hooks as wrappers around the original object\nspec, like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const MyType = newWithHooks(GraphQLObjectType, spec);\n\n// is equivalent to:\n\nconst MyType = new GraphQLObjectType(hook3(hook2(hook1(spec))));\n")),(0,i.kt)("p",null,"Plugins declare which hooks they'd like to register as seen in ",(0,i.kt)("a",{parentName:"p",href:"./plugins"},"the plugin documentation"),"."),(0,i.kt)("p",null,"Every hook callback function must synchronously return a value - either the\nvalue that it was passed in as the first argument or a derivative of it.\nGenerally we prefer the input object to be mutated for performance reasons."),(0,i.kt)("p",null,"Hook functions for a given hook name run by default in the order they were\nregistered, which is why the order of plugins is sometimes relevant, however\nplugin authors are encouraged to use the ",(0,i.kt)("inlineCode",{parentName:"p"},"graphile-config")," features to declare\nthe ",(0,i.kt)("inlineCode",{parentName:"p"},"before"),"/",(0,i.kt)("inlineCode",{parentName:"p"},"after")," for either their plugins or the individual hooks."),(0,i.kt)("h3",{id:"stages-of-the-build-process"},"Stages of the build process"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"hookName")," that you register the function for must match\n",(0,i.kt)("a",{parentName:"p",href:"/graphile-build/all-hooks/"},"one of the supported hooks"),"."),(0,i.kt)("p",null,"The general flow is:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"A new ",(0,i.kt)("a",{parentName:"li",href:"/graphile-build/build-object/"},"Build object")," with the basic\nfunctionality is created"),(0,i.kt)("li",{parentName:"ol"},"The ",(0,i.kt)("inlineCode",{parentName:"li"},"build")," hook allows plugins to add new utility methods to the ",(0,i.kt)("inlineCode",{parentName:"li"},"build"),"\nobject itself, or overwrite previously declared ones."),(0,i.kt)("li",{parentName:"ol"},"A ",(0,i.kt)("inlineCode",{parentName:"li"},"Behavior")," instance is added to the Build object, and behaviors for all the relevant entities are registered."),(0,i.kt)("li",{parentName:"ol"},"The build object is frozen to prevent further modification."),(0,i.kt)("li",{parentName:"ol"},"The ",(0,i.kt)("inlineCode",{parentName:"li"},"init")," hook acts as the setup phase where all possible types should be\nregistered via ",(0,i.kt)("inlineCode",{parentName:"li"},"build.registerObjectType"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"build.registerUnionType"),", etc."),(0,i.kt)("li",{parentName:"ol"},"The schema is constructed internally using ",(0,i.kt)("inlineCode",{parentName:"li"},"newWithHooks(GraphQLSchema, \u2026)"),",\nwhere the ",(0,i.kt)("inlineCode",{parentName:"li"},"query"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"mutation")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"subscription")," root operations are\nprovided by the respective default plugins (e.g. ",(0,i.kt)("inlineCode",{parentName:"li"},"QueryPlugin"),"). This in\nturn triggers all the various hooks to be called in a recursive fashion as\ntypes, fields, arguments and so on are created."),(0,i.kt)("li",{parentName:"ol"},"The ",(0,i.kt)("inlineCode",{parentName:"li"},"finalize")," hook allows plugins to replace the schema that has been built\nwith an alternative (likely derivative) schema, should that be desired. It\nalso opens an opportunity to do something with the built schema (for example\nlog it out) before it is returned.")),(0,i.kt)("p",null,"This hook system makes the library both powerful and flexible, at the expense of\ntraceability - instead of having a clear declarative ",(0,i.kt)("inlineCode",{parentName:"p"},"import"),", the origin of a\ncalled method might be in any of the used plugins, or even multiple ones. See\n",(0,i.kt)("a",{parentName:"p",href:"https://postgraphile.org/postgraphile/current/debugging/#debug-envvars"},"PostGraphile's ",(0,i.kt)("em",{parentName:"a"},"Debugging")," instructions"),"\nfor how to alleviate this."),(0,i.kt)("p",null,"Hook callback functions will be called with 3 arguments:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"The input object (e.g. the spec that would be passed to the\nGraphQLObjectType constructor)"),(0,i.kt)("li",{parentName:"ol"},"The ",(0,i.kt)("inlineCode",{parentName:"li"},"Build")," object (see below)"),(0,i.kt)("li",{parentName:"ol"},"The ",(0,i.kt)("inlineCode",{parentName:"li"},"Context")," object (see below) which contains a ",(0,i.kt)("inlineCode",{parentName:"li"},"scope")," property")),(0,i.kt)("h4",{id:"build-object-build"},"Build object (",(0,i.kt)("inlineCode",{parentName:"h4"},"Build"),")"),(0,i.kt)("p",null,"The ",(0,i.kt)("a",{parentName:"p",href:"/graphile-build/build-object/"},"Build Object")," contains a number of helpers\nand sources of information relevant to the current build of the GraphQL API. If\nyou're in watch mode then every time a new schema is generated a new build\nobject will be used."),(0,i.kt)("p",null,"Plugins may extend the ",(0,i.kt)("inlineCode",{parentName:"p"},"build")," object via the ",(0,i.kt)("inlineCode",{parentName:"p"},"build")," hook. Once the ",(0,i.kt)("inlineCode",{parentName:"p"},"build"),"\nhook is complete the build object is frozen."),(0,i.kt)("p",null,"The most commonly used methods are:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"build.extend(obj1, obj2)")," - returns a new object based on a non-destructive\nmerge of ",(0,i.kt)("inlineCode",{parentName:"li"},"obj1")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"obj2")," (will not overwrite keys!) - normally used at the\nreturn value for a hook"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"build.graphql")," - equivalent to ",(0,i.kt)("inlineCode",{parentName:"li"},"require('graphql')"),", but helps ensure GraphQL\nversion clashes do not occur"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"build.inflection")," - carries all the inflector functions for names")),(0,i.kt)("p",null,"See ",(0,i.kt)("a",{parentName:"p",href:"/graphile-build/build-object/"},"Build Object")," for more."),(0,i.kt)("h4",{id:"context-object-context"},"Context object (",(0,i.kt)("inlineCode",{parentName:"h4"},"Context"),")"),(0,i.kt)("p",null,"The ",(0,i.kt)("a",{parentName:"p",href:"/graphile-build/context-object/"},"Context Object")," contains the information\nrelevant to the current hook. Most importantly it contains the ",(0,i.kt)("inlineCode",{parentName:"p"},"scope")," (an\nobject based on the third argument passed to ",(0,i.kt)("inlineCode",{parentName:"p"},"newWithHooks"),") but it also\ncontains a number of other useful things. Here's some of the more commonly used\nones:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"scope")," - an object based on the third argument to ",(0,i.kt)("inlineCode",{parentName:"li"},"newWithHooks")," or\n",(0,i.kt)("inlineCode",{parentName:"li"},"fieldWithHooks"),"; for deeper hooks (such as ",(0,i.kt)("inlineCode",{parentName:"li"},"GraphQLObjectType_fields_field"),")\nthe scope from shallower hooks (such as ",(0,i.kt)("inlineCode",{parentName:"li"},"GraphQLObjectType"),") are merged in."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Self")," - only available on deferred hooks (those that are called after the\nobject is created, e.g.",(0,i.kt)("inlineCode",{parentName:"li"},"GraphQLObjectType:fields"),") this is the object that has\nbeen created, allowing recursive references."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"fieldWithHooks(scope, spec)")," - on ",(0,i.kt)("inlineCode",{parentName:"li"},"GraphQLObjectType_fields"),", used for\nadding a field if you need access to the field helpers (or want to define a\nscope)")),(0,i.kt)("h3",{id:"namespaces"},"Namespaces"),(0,i.kt)("p",null,"Properties added to the ",(0,i.kt)("inlineCode",{parentName:"p"},"Build")," object or set on the ",(0,i.kt)("inlineCode",{parentName:"p"},"Context.scope")," should be\nnamespaced so that they do not conflict; for example ",(0,i.kt)("inlineCode",{parentName:"p"},"postgraphile")," uses the\n",(0,i.kt)("inlineCode",{parentName:"p"},"pg")," namespace: ",(0,i.kt)("inlineCode",{parentName:"p"},"pgSql"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"pgIntrospection"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"isPgTableType"),", etc"))}d.isMDXComponent=!0}}]);