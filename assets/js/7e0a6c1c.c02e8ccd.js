"use strict";(self.webpackChunk_localrepo_graphile_build_website=self.webpackChunk_localrepo_graphile_build_website||[]).push([[172],{876:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var o=n(2784);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,o,i=function(e,t){if(null==e)return{};var n,o,i={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=o.createContext({}),s=function(e){var t=o.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=s(e.components);return o.createElement(c.Provider,{value:t},e.children)},d="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,c=e.parentName,p=a(e,["components","mdxType","originalType","parentName"]),d=s(n),u=i,f=d["".concat(c,".").concat(u)]||d[u]||h[u]||r;return n?o.createElement(f,l(l({ref:t},p),{},{components:n})):o.createElement(f,l({ref:t},p))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,l=new Array(r);l[0]=u;var a={};for(var c in t)hasOwnProperty.call(t,c)&&(a[c]=t[c]);a.originalType=e,a[d]="string"==typeof e?e:i,l[1]=a;for(var s=2;s<r;s++)l[s]=n[s];return o.createElement.apply(null,l)}return o.createElement.apply(null,n)}u.displayName="MDXCreateElement"},76:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>r,metadata:()=>a,toc:()=>s});var o=n(7896),i=(n(2784),n(876));const r={layout:"page",path:"/graphile-build/context-object/",title:"The Context Object",sidebar_position:7},l=void 0,a={unversionedId:"context-object",id:"context-object",title:"The Context Object",description:"Whereas the Build object is the same for all hooks (except the build hook",source:"@site/graphile-build/context-object.md",sourceDirName:".",slug:"/context-object",permalink:"/graphile-build/context-object",draft:!1,editUrl:"https://github.com/graphile/crystal/tree/main/graphile-build/website/graphile-build/context-object.md",tags:[],version:"current",sidebarPosition:7,frontMatter:{layout:"page",path:"/graphile-build/context-object/",title:"The Context Object",sidebar_position:7},sidebar:"tutorialSidebar",previous:{title:"The Build Object",permalink:"/graphile-build/build-object"}},c={},s=[{value:"<code>scope</code>",id:"scope",level:3},{value:"<code>Self</code>",id:"self",level:3},{value:"<code>fieldWithHooks(scope, spec)</code>",id:"fieldwithhooksscope-spec",level:3}],p={toc:s},d="wrapper";function h(e){let{components:t,...n}=e;return(0,i.kt)(d,(0,o.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Whereas the ",(0,i.kt)("inlineCode",{parentName:"p"},"Build")," object is the same for all hooks (except the ",(0,i.kt)("inlineCode",{parentName:"p"},"build")," hook\nwhich constructs it) within an individual build, the ",(0,i.kt)("inlineCode",{parentName:"p"},"Context")," object changes\nfor each hook. Different hooks have different values available to them on the\n",(0,i.kt)("inlineCode",{parentName:"p"},"Context")," object; you can explore what they are through TypeScript auto-completion."),(0,i.kt)("p",null,"The main ones are:"),(0,i.kt)("h3",{id:"scope"},(0,i.kt)("inlineCode",{parentName:"h3"},"scope")),(0,i.kt)("p",null,"An object based on the second argument to ",(0,i.kt)("inlineCode",{parentName:"p"},"register*Type")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"fieldWithHooks")," -\nthis is useful for filtering which objects a particular hook should apply to."),(0,i.kt)("p",null,"For deeper hooks (such as ",(0,i.kt)("inlineCode",{parentName:"p"},"GraphQLObjectType_fields_field"),") the scope from\nshallower hooks (such as ",(0,i.kt)("inlineCode",{parentName:"p"},"GraphQLObjectType"),") are merged in; it's thus\nadvisable to ensure that field hooks contain the word ",(0,i.kt)("inlineCode",{parentName:"p"},"field")," in each of the\nscopes added, and so on."),(0,i.kt)("p",null,"For example you might use a hook such as this to add a description to the\n",(0,i.kt)("inlineCode",{parentName:"p"},"clientMutationId")," field on all mutation input objects:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'const MyPlugin = {\n  name: "MyPlugin",\n  version: "0.0.0",\n\n  schema: {\n    hooks: {\n      GraphQLInputObjectType_fields_field(\n        field,\n        { extend },\n        { scope: { isMutationInput, fieldName } },\n      ) {\n        // highlight-start\n        if (\n          !isMutationInput ||\n          fieldName !== "clientMutationId" ||\n          field.description != null\n        ) {\n          return field;\n        }\n        return extend(field, {\n          description:\n            "An arbitrary string value with no semantic meaning. " +\n            "Will be included in the payload verbatim. " +\n            "May be used to track mutations by the client.",\n        });\n        // highlight-end\n      },\n    },\n  },\n};\n')),(0,i.kt)("h3",{id:"self"},(0,i.kt)("inlineCode",{parentName:"h3"},"Self")),(0,i.kt)("p",null,"Whilst only available on hooks that are called after the object is created (e.g.\n",(0,i.kt)("inlineCode",{parentName:"p"},"GraphQLObjectType_fields"),"), this field is useful because it contains the object\nthat has been created; allowing circular references to be built. A common\nuse-case for this is the root ",(0,i.kt)("inlineCode",{parentName:"p"},"Query")," object referencing itself with the ",(0,i.kt)("inlineCode",{parentName:"p"},"query"),"\nfield to work around some issues in Relay 1."),(0,i.kt)("h3",{id:"fieldwithhooksscope-spec"},(0,i.kt)("inlineCode",{parentName:"h3"},"fieldWithHooks(scope, spec)")),(0,i.kt)("p",null,"Available on hooks ",(0,i.kt)("inlineCode",{parentName:"p"},"GraphQLObjectType_fields")," and\n",(0,i.kt)("inlineCode",{parentName:"p"},"GraphQLInputObjectType_fields"),", this function is useful for providing scopes\nso that fields can be hooked by other plugins. If you don't call this, it will\nbe called for you at a later time."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'const MyPlugin = {\n  name: "MyPlugin",\n  version: "0.0.0",\n\n  schema: {\n    hooks: {\n      GraphQLInputObjectType_fields(fields, build, context) {\n        const {\n          extend,\n          graphql: { GraphQLNonNull, GraphQLString },\n        } = build;\n        // highlight-next-line\n        const { fieldWithHooks } = context;\n        // TODO: if (...) return fields;\n        return extend(\n          fields,\n          {\n            // highlight-start\n            helloWorld: fieldWithHooks(\n              // The scope\n              { fieldName: "helloWorld", isHelloWorldField: true },\n\n              // The spec generator\n              () => ({\n                type: new GraphQLNonNull(GraphQLString),\n                plan() {\n                  return constant("Hello World");\n                },\n              }),\n            ),\n            // highlight-end\n          },\n          "Adding helloWorld from \'MyPlugin\'",\n        );\n      },\n    },\n  },\n};\n')))}h.isMDXComponent=!0}}]);