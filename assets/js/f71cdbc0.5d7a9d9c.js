"use strict";(self.webpackChunk_localrepo_postgraphile_website=self.webpackChunk_localrepo_postgraphile_website||[]).push([[1499],{30876:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>d});var r=n(2784);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},c="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),c=p(n),m=i,d=c["".concat(l,".").concat(m)]||c[m]||h[m]||a;return n?r.createElement(d,o(o({ref:t},u),{},{components:n})):r.createElement(d,o({ref:t},u))}));function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[c]="string"==typeof e?e:i,o[1]=s;for(var p=2;p<a;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},74578:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>p});var r=n(7896),i=(n(2784),n(30876));const a={layout:"page",path:"/postgraphile/realtime/",title:"PostGraphile Realtime"},o=void 0,s={unversionedId:"realtime",id:"version-4.x/realtime",title:"PostGraphile Realtime",description:"Every application is different, and no more so than when it comes to their",source:"@site/versioned_docs/version-4.x/realtime.md",sourceDirName:".",slug:"/realtime",permalink:"/postgraphile/current/realtime",draft:!1,editUrl:"https://github.com/graphile/crystal/tree/main/postgraphile/website/versioned_docs/version-4.x/realtime.md",tags:[],version:"4.x",frontMatter:{layout:"page",path:"/postgraphile/realtime/",title:"PostGraphile Realtime"},sidebar:"docs",previous:{title:"Security",permalink:"/postgraphile/current/security"},next:{title:"GraphQL Subscriptions",permalink:"/postgraphile/current/subscriptions"}},l={},p=[{value:"Subscriptions",id:"subscriptions",level:3},{value:"Live queries EXPERIMENTAL",id:"live-queries-experimental",level:3}],u={toc:p},c="wrapper";function h(e){let{components:t,...n}=e;return(0,i.kt)(c,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Every application is different, and no more so than when it comes to their\nrealtime requirements. Some applications are read-heavy, others write-heavy, and\nothers are collaborative and need to put in effort to avoid conflicts between\nmultiple people editing the same things at the same time (e.g. Google Docs)."),(0,i.kt)("p",null,"PostGraphile focusses on customisability and extensibility; rather than giving a\none-size-fits-all solution, we provide the baseline subscriptions and live\nqueries functionality in core, and the rest is achieved by adding and combining\nplugins - the official ones, ones made by the community, or ones you've\ndeveloped in-house. This enables you to use whatever technology best suits your\nrequirements to provide the realtime features to PostGraphile."),(0,i.kt)("p",null,'First, though, there are two main types of real-time provided by PostGraphile \u2014\n"subscriptions" (which are event based) and "live queries" (which are reactive).'),(0,i.kt)("h3",{id:"subscriptions"},"Subscriptions"),(0,i.kt)("p",null,'"Subscriptions" are a way of having a new message proactively sent to the client\nautomatically whenever a particular event occurs on the server side, such as:'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"subscription {\n  chatMessageAdded(channel: 27) {\n    id\n    message\n    author { id name avatarUrl }\n    timestamp\n  }\n}\n")),(0,i.kt)("p",null,"This example subscription would result in a new response whenever a new message\nis added to channel ",(0,i.kt)("inlineCode",{parentName:"p"},"27"),". Note that a normal subscription such as this one only\ntriggers when the event occurs (i.e. chat message added) - it does not trigger\nwhen the message is edited, or if the author changes their avatar."),(0,i.kt)("p",null,"Subscriptions are part of the latest GraphQL specification, and are well\nsupported by many clients."),(0,i.kt)("p",null,"When to use subscriptions:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"When you know exactly what events will trigger an update"),(0,i.kt)("li",{parentName:"ul"},'When you care about an event (e.g. "broadcast") rather than a change in state'),(0,i.kt)("li",{parentName:"ul"},"When performance and scalability is a strong concern")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"./subscriptions/"},"Find out more about subscriptions in PostGraphile"),"."),(0,i.kt)("h3",{id:"live-queries-experimental"},"Live queries ","[EXPERIMENTAL]"),(0,i.kt)("p",null,'"Live queries" allow you to be notified whenever the result of a selection set\nwould differ. For example, given the PostGraphile live query request:'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-graphql"},'subscription {\n  allUsersList(condition: { firstName: "Alice" }) {\n    id\n    name\n    friendsList {\n      id\n      name\n    }\n  }\n}\n')),(0,i.kt)("p",null,"a new result set will be automatically sent to the client time any of the\nreturned Alices change, when an Alice is added or removed, when an Alice gains\nor loses a friend, or when one of the Alice's friends' names change - anything\nthat'd result in a change to the original response."),(0,i.kt)("p",null,"Live queries are not part of the GraphQL specification (yet) and each backend\nimplements them in different ways. We use the ",(0,i.kt)("inlineCode",{parentName:"p"},"subscription")," operation type to\nmaximise compatibility with your existing tooling, rather than using a\ndirective-based approach. Your client will not know the difference between a\nsubscription and a live query - that's the server's concern."),(0,i.kt)("p",null,"When to use live queries:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"If you want to automatically update your page whenever a piece of data on the\nserver changes (e.g. a realtime graph of stock prices)"),(0,i.kt)("li",{parentName:"ul"},"When you want to batching multiple updates together, for example if your\nclient is being overwhelmed due to too many events firing"),(0,i.kt)("li",{parentName:"ul"},"When you have a small query you want to monitor (the smaller the query the\nbetter for live queries because the entire result is re-calculated and sent\nevery time a change occurs - this is quite the opposite of normal GraphQL)"),(0,i.kt)("li",{parentName:"ul"},"When you want to fawn over the power of GraphQL \ud83e\udd24")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"./live-queries/"},"Find out more about live queries in PostGraphile"),"."))}h.isMDXComponent=!0}}]);