"use strict";(self.webpackChunk_localrepo_postgraphile_website=self.webpackChunk_localrepo_postgraphile_website||[]).push([[7534],{30876:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var r=n(2784);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),s=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=s(e.components);return r.createElement(c.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=s(n),f=o,m=u["".concat(c,".").concat(f)]||u[f]||d[f]||i;return n?r.createElement(m,a(a({ref:t},p),{},{components:n})):r.createElement(m,a({ref:t},p))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=f;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[u]="string"==typeof e?e:o,a[1]=l;for(var s=2;s<i;s++)a[s]=n[s];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},74104:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var r=n(7896),o=(n(2784),n(30876));const i={layout:"page",path:"/postgraphile/connections/",title:"Connections"},a=void 0,l={unversionedId:"connections",id:"version-4.x/connections",title:"Connections",description:"When a GraphQL field is expected to return a large list of database records, we",source:"@site/versioned_docs/version-4.x/connections.md",sourceDirName:".",slug:"/connections",permalink:"/postgraphile/current/connections",draft:!1,editUrl:"https://github.com/graphile/crystal/tree/main/postgraphile/website/versioned_docs/version-4.x/connections.md",tags:[],version:"4.x",frontMatter:{layout:"page",path:"/postgraphile/connections/",title:"Connections"},sidebar:"docs",previous:{title:"Relations",permalink:"/postgraphile/current/relations"},next:{title:"Filtering",permalink:"/postgraphile/current/filtering"}},c={},s=[{value:"Advice",id:"advice",level:3}],p={toc:s},u="wrapper";function d(e){let{components:t,...n}=e;return(0,o.kt)(u,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"When a GraphQL field is expected to return a large list of database records, we\ntypically implement a connection adhering to the\n",(0,o.kt)("a",{parentName:"p",href:"https://facebook.github.io/relay/graphql/connections.htm"},"Relay Cursor Connections Specification"),"\n(with a few enhancements). This connection allows you to perform cursor-based\npagination with ease, and is seen as a GraphQL best practice."),(0,o.kt)("p",null,"The enhancements that we apply on top of Relay's connection spec include:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"totalCount")," - the total number of records matching the query (excluding\ncursor/limit/offset constraints)"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"nodes")," - just the nodes (no ",(0,o.kt)("inlineCode",{parentName:"li"},"edge")," wrapper) useful if you don't need the\ncursor for every entry and want a simple data structure"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"PageInfo.startCursor")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"PageInfo.endCursor")," - useful for pagination if you\nuse ",(0,o.kt)("inlineCode",{parentName:"li"},"nodes { ... }")," rather than ",(0,o.kt)("inlineCode",{parentName:"li"},"edges { cursor, node { ... } }"))),(0,o.kt)("p",null,"Many connections (specifically those coming from tables, views and relations)\nsupport ",(0,o.kt)("a",{parentName:"p",href:"./filtering/"},"filtering")," the return results with a conditon."),(0,o.kt)("h3",{id:"advice"},"Advice"),(0,o.kt)("p",null,"If you prefer a simpler list interface over GraphQL connections then you can\nenable that either along-side our connections (",(0,o.kt)("inlineCode",{parentName:"p"},"both"),") or exclusively (",(0,o.kt)("inlineCode",{parentName:"p"},"only"),")\nusing our ",(0,o.kt)("a",{parentName:"p",href:"./usage-cli/"},(0,o.kt)("inlineCode",{parentName:"a"},"--simple-collections [omit|both|only]")," option"),"."))}d.isMDXComponent=!0}}]);