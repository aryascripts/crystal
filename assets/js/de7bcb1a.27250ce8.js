"use strict";(self.webpackChunk_localrepo_postgraphile_website=self.webpackChunk_localrepo_postgraphile_website||[]).push([[7236],{30876:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var a=n(2784);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),u=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=u(e.components);return a.createElement(l.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),c=u(n),d=r,h=c["".concat(l,".").concat(d)]||c[d]||m[d]||i;return n?a.createElement(h,o(o({ref:t},p),{},{components:n})):a.createElement(h,o({ref:t},p))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[c]="string"==typeof e?e:r,o[1]=s;for(var u=2;u<i;u++)o[u]=n[u];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},6242:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>s,toc:()=>u});var a=n(7896),r=(n(2784),n(30876));const i={layout:"page",path:"/postgraphile/computed-columns/",title:"Computed Columns"},o=void 0,s={unversionedId:"computed-columns",id:"computed-columns",title:"Computed Columns",description:'"Computed columns" add what appears to be an extra column (field) to the GraphQL',source:"@site/postgraphile/computed-columns.md",sourceDirName:".",slug:"/computed-columns",permalink:"/postgraphile/next/computed-columns",draft:!1,editUrl:"https://github.com/graphile/crystal/tree/main/postgraphile/website/postgraphile/computed-columns.md",tags:[],version:"current",frontMatter:{layout:"page",path:"/postgraphile/computed-columns/",title:"Computed Columns"},sidebar:"docs",previous:{title:"Database Functions",permalink:"/postgraphile/next/functions"},next:{title:"Custom Queries",permalink:"/postgraphile/next/custom-queries"}},l={},u=[{value:"Example",id:"example",level:3},{value:"Advice",id:"advice",level:3}],p={toc:u},c="wrapper";function m(e){let{components:t,...n}=e;return(0,r.kt)(c,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,'"Computed columns" add what appears to be an extra column (field) to the GraphQL\ntable type, but, unlike an actual column, the value for this field is the result\nof calling a function defined in the PostgreSQL schema. This function will\nautomatically be exposed to the resultant GraphQL schema as a field on the type;\nit can accept arguments that influence its result, and may return either a\nscalar, record, list or a set. Sets (denoted by ',(0,r.kt)("inlineCode",{parentName:"p"},"RETURNS SETOF ..."),") are exposed\nas ",(0,r.kt)("a",{parentName:"p",href:"./connections/"},"connections")," or lists, depending on the behavior configuration."),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"We inline these function calls into the original ",(0,r.kt)("inlineCode",{parentName:"p"},"SELECT")," statement for\nefficiency, so no additional SQL queries need to be issued to the database.\nThat said, SQL function calls do have a performance overhead, which can build\nup if you're doing this on thousands of rows. PostgreSQL can ",(0,r.kt)("a",{parentName:"p",href:"https://wiki.postgresql.org/wiki/Inlining_of_SQL_functions"},"sometimes inline\nyour SQL functions"),"\nfor great performance, but if this fails and you're seeing performance issues\nyou might want to investigate using\n",(0,r.kt)("a",{parentName:"p",href:"./make-extend-schema-plugin"},(0,r.kt)("inlineCode",{parentName:"a"},"makeExtendSchemaPlugin"))," instead.")),(0,r.kt)("p",null,"To create a function that PostGraphile will recognize as a computed column, it\nmust obey the following rules:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"adhere to\n",(0,r.kt)("a",{parentName:"li",href:"./function-restrictions/"},"common PostGraphile function restrictions")),(0,r.kt)("li",{parentName:"ul"},"name must begin with the name of the table it applies to, followed by an\nunderscore (",(0,r.kt)("inlineCode",{parentName:"li"},"_"),")"),(0,r.kt)("li",{parentName:"ul"},"first parameter must be the table type"),(0,r.kt)("li",{parentName:"ul"},"must NOT return ",(0,r.kt)("inlineCode",{parentName:"li"},"VOID")),(0,r.kt)("li",{parentName:"ul"},"must be marked as ",(0,r.kt)("inlineCode",{parentName:"li"},"STABLE")," (or ",(0,r.kt)("inlineCode",{parentName:"li"},"IMMUTABLE"),", though that tends to be less\ncommon)"),(0,r.kt)("li",{parentName:"ul"},"must be defined in the same PostgreSQL schema as the table")),(0,r.kt)("p",null,"For example, assuming a table called ",(0,r.kt)("inlineCode",{parentName:"p"},"person")," exists, the function:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE FUNCTION person_full_name(person person) RETURNS text AS $$\n  SELECT person.given_name || ' ' || person.family_name\n$$ LANGUAGE sql STABLE;\n")),(0,r.kt)("p",null,"Will create a computed column for your table named ",(0,r.kt)("inlineCode",{parentName:"p"},"person"),", which can be\nqueried like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql",metastring:"{5}","{5}":!0},"{\n  personById(id: \u2026) {\n    # nodeId, id, ...\n\n    fullName # A computed column, but the client doesn\u2019t even know!\n  }\n}\n")),(0,r.kt)("h3",{id:"example"},"Example"),(0,r.kt)("p",null,"This example creates two computed columns, one returning a simple varchar and\nthe other a connection. Note that ",(0,r.kt)("inlineCode",{parentName:"p"},"||")," in PostgreSQL is string concatenation."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql",metastring:"{14-17,20-27}","{14-17,20-27}":!0},"create table my_schema.users (\n  id serial not null primary key,\n  first_name varchar not null,\n  last_name varchar not null\n);\n\ncreate table my_schema.friendships (\n  user_id integer not null,\n  target_id integer not null,\n  primary key (user_id, target_id)\n);\n\n-- Creates `User.name` string field\ncreate function my_schema.users_name(u my_schema.users)\nreturns varchar as $$\n  select u.first_name || ' ' || u.last_name;\n$$ language sql stable;\n\n-- Creates `User.friends` connection\ncreate function my_schema.users_friends(u my_schema.users)\nreturns setof my_schema.users as $$\n  select users.*\n  from my_schema.users\n  inner join my_schema.friendships\n  on (friendships.target_id = users.id)\n  where friendships.user_id = u.id;\n$$ language sql stable;\n")),(0,r.kt)("p",null,"You can add parameters to your computed column field by declaring additional\nparameters in your PostgreSQL function:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql",metastring:"{1,4}","{1,4}":!0},"-- Creates `User.greet(greeting: String)` string field\ncreate function my_schema.users_greet(\n  u my_schema.users,  --- required table type parameter, unexposed\n  greeting text       --- additional parameter, will be exposed\n) returns text as $$\n  select greeting || ', ' || u.first_name || ' ' || u.last_name || '!';\n$$ language sql stable strict;\n")),(0,r.kt)("p",null,"which can be queried like:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql",metastring:"{3}","{3}":!0},'{\n  userById(id: \u2026) {\n    greet(greeting: "Greetings and salutations")\n  }\n}\n')),(0,r.kt)("h3",{id:"advice"},"Advice"),(0,r.kt)("p",null,"See the advice in ",(0,r.kt)("a",{parentName:"p",href:"./custom-queries/#advice"},"the Custom Queries article"),"."))}m.isMDXComponent=!0}}]);