"use strict";(self.webpackChunk_localrepo_postgraphile_website=self.webpackChunk_localrepo_postgraphile_website||[]).push([[8281],{30876:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var r=n(2784);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},u="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=p(n),m=a,d=u["".concat(l,".").concat(m)]||u[m]||h[m]||i;return n?r.createElement(d,o(o({ref:t},c),{},{components:n})):r.createElement(d,o({ref:t},c))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:a,o[1]=s;for(var p=2;p<i;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},40681:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var r=n(7896),a=(n(2784),n(30876));const i={layout:"page",path:"/postgraphile/realtime/",title:"PostGraphile Realtime"},o=void 0,s={unversionedId:"realtime",id:"realtime",title:"PostGraphile Realtime",description:"Every application is different, and no more so than when it comes to their",source:"@site/postgraphile/realtime.md",sourceDirName:".",slug:"/realtime",permalink:"/postgraphile/next/realtime",draft:!1,editUrl:"https://github.com/graphile/crystal/tree/main/postgraphile/website/postgraphile/realtime.md",tags:[],version:"current",frontMatter:{layout:"page",path:"/postgraphile/realtime/",title:"PostGraphile Realtime"},sidebar:"docs",previous:{title:"Security",permalink:"/postgraphile/next/security"},next:{title:"GraphQL Subscriptions",permalink:"/postgraphile/next/subscriptions"}},l={},p=[{value:"Subscriptions",id:"subscriptions",level:3}],c={toc:p},u="wrapper";function h(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Every application is different, and no more so than when it comes to their\nrealtime requirements. Some applications are read-heavy, others write-heavy, and\nothers are collaborative and need to put in effort to avoid conflicts between\nmultiple people editing the same things at the same time (e.g. Google Docs)."),(0,a.kt)("p",null,"PostGraphile focusses on customisability and extensibility; rather than giving a\none-size-fits-all solution, we provide the baseline subscription\nfunctionality in core, and the rest is achieved by adding and combining\nplugins - the official ones, ones made by the community, or ones you've\ndeveloped in-house. This enables you to use whatever technology best suits your\nrequirements to provide the realtime features to PostGraphile."),(0,a.kt)("h3",{id:"subscriptions"},"Subscriptions"),(0,a.kt)("p",null,'"Subscriptions" are a way of having a new message proactively sent to the client\nautomatically whenever a particular event occurs on the server side, such as:'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"subscription {\n  chatMessageAdded(channel: 27) {\n    id\n    message\n    author { id name avatarUrl }\n    timestamp\n  }\n}\n")),(0,a.kt)("p",null,"This example subscription would result in a new response whenever a new message\nis added to channel ",(0,a.kt)("inlineCode",{parentName:"p"},"27"),". Note that a normal subscription such as this one only\ntriggers when the event occurs (i.e. chat message added) - it does not trigger\nwhen the message is edited, or if the author changes their avatar."),(0,a.kt)("p",null,"Subscriptions are part of the latest GraphQL specification, and are well\nsupported by many clients."),(0,a.kt)("p",null,"Use subscriptions when:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"You need to update your UI based on events happening in the system"),(0,a.kt)("li",{parentName:"ul"},"You know which events should trigger an update"),(0,a.kt)("li",{parentName:"ul"},"Performance and scalability is important to you")),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"./subscriptions/"},"Find out more about subscriptions in PostGraphile"),"."))}h.isMDXComponent=!0}}]);