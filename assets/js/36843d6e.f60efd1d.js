"use strict";(self.webpackChunk_localrepo_postgraphile_website=self.webpackChunk_localrepo_postgraphile_website||[]).push([[9362],{30876:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>d});var n=a(2784);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var i=n.createContext({}),p=function(e){var t=n.useContext(i),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},u=function(e){var t=p(e.components);return n.createElement(i.Provider,{value:t},e.children)},c="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=p(a),m=r,d=c["".concat(i,".").concat(m)]||c[m]||h[m]||o;return a?n.createElement(d,s(s({ref:t},u),{},{components:a})):n.createElement(d,s({ref:t},u))}));function d(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,s=new Array(o);s[0]=m;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l[c]="string"==typeof e?e:r,s[1]=l;for(var p=2;p<o;p++)s[p]=a[p];return n.createElement.apply(null,s)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},82009:(e,t,a)=>{a.d(t,{Z:()=>s});var n=a(2784),r=a(524);const o={tabItem:"tabItem_OMyP"};function s(e){let{children:t,hidden:a,className:s}=e;return n.createElement("div",{role:"tabpanel",className:(0,r.Z)(o.tabItem,s),hidden:a},t)}},77336:(e,t,a)=>{a.d(t,{Z:()=>w});var n=a(7896),r=a(2784),o=a(524),s=a(24126),l=a(7267),i=a(32424),p=a(42244),u=a(24155);function c(e){return function(e){return r.Children.map(e,(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:a,attributes:n,default:r}}=e;return{value:t,label:a,attributes:n,default:r}}))}function h(e){const{values:t,children:a}=e;return(0,r.useMemo)((()=>{const e=t??c(a);return function(e){const t=(0,p.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,a])}function m(e){let{value:t,tabValues:a}=e;return a.some((e=>e.value===t))}function d(e){let{queryString:t=!1,groupId:a}=e;const n=(0,l.k6)(),o=function(e){let{queryString:t=!1,groupId:a}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!a)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return a??null}({queryString:t,groupId:a});return[(0,i._X)(o),(0,r.useCallback)((e=>{if(!o)return;const t=new URLSearchParams(n.location.search);t.set(o,e),n.replace({...n.location,search:t.toString()})}),[o,n])]}function g(e){const{defaultValue:t,queryString:a=!1,groupId:n}=e,o=h(e),[s,l]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:a}=e;if(0===a.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!m({value:t,tabValues:a}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${a.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const n=a.find((e=>e.default))??a[0];if(!n)throw new Error("Unexpected error: 0 tabValues");return n.value}({defaultValue:t,tabValues:o}))),[i,p]=d({queryString:a,groupId:n}),[c,g]=function(e){let{groupId:t}=e;const a=function(e){return e?`docusaurus.tab.${e}`:null}(t),[n,o]=(0,u.Nk)(a);return[n,(0,r.useCallback)((e=>{a&&o.set(e)}),[a,o])]}({groupId:n}),b=(()=>{const e=i??c;return m({value:e,tabValues:o})?e:null})();(0,r.useLayoutEffect)((()=>{b&&l(b)}),[b]);return{selectedValue:s,selectValue:(0,r.useCallback)((e=>{if(!m({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);l(e),p(e),g(e)}),[p,g,o]),tabValues:o}}var b=a(89741);const f={tabList:"tabList_M0Dn",tabItem:"tabItem_ysIP"};function k(e){let{className:t,block:a,selectedValue:l,selectValue:i,tabValues:p}=e;const u=[],{blockElementScrollPositionUntilNextRender:c}=(0,s.o5)(),h=e=>{const t=e.currentTarget,a=u.indexOf(t),n=p[a].value;n!==l&&(c(t),i(n))},m=e=>{let t=null;switch(e.key){case"Enter":h(e);break;case"ArrowRight":{const a=u.indexOf(e.currentTarget)+1;t=u[a]??u[0];break}case"ArrowLeft":{const a=u.indexOf(e.currentTarget)-1;t=u[a]??u[u.length-1];break}}t?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":a},t)},p.map((e=>{let{value:t,label:a,attributes:s}=e;return r.createElement("li",(0,n.Z)({role:"tab",tabIndex:l===t?0:-1,"aria-selected":l===t,key:t,ref:e=>u.push(e),onKeyDown:m,onClick:h},s,{className:(0,o.Z)("tabs__item",f.tabItem,s?.className,{"tabs__item--active":l===t})}),a??t)})))}function y(e){let{lazy:t,children:a,selectedValue:n}=e;const o=(Array.isArray(a)?a:[a]).filter(Boolean);if(t){const e=o.find((e=>e.props.value===n));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},o.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==n}))))}function v(e){const t=g(e);return r.createElement("div",{className:(0,o.Z)("tabs-container",f.tabList)},r.createElement(k,(0,n.Z)({},e,t)),r.createElement(y,(0,n.Z)({},e,t)))}function w(e){const t=(0,b.Z)();return r.createElement(v,(0,n.Z)({key:String(t)},e))}},45176:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>u,contentTitle:()=>i,default:()=>d,frontMatter:()=>l,metadata:()=>p,toc:()=>c});var n=a(7896),r=(a(2784),a(30876)),o=a(77336),s=a(82009);const l={layout:"page",path:"/postgraphile/quick-start-guide/",title:"Quick start guide"},i=void 0,p={unversionedId:"quick-start-guide",id:"quick-start-guide",title:"Quick start guide",description:"This quick start guide will walk you through spinning up your first PostGraphile",source:"@site/postgraphile/quick-start-guide.md",sourceDirName:".",slug:"/quick-start-guide",permalink:"/postgraphile/next/quick-start-guide",draft:!1,editUrl:"https://github.com/graphile/crystal/tree/main/postgraphile/website/postgraphile/quick-start-guide.md",tags:[],version:"current",frontMatter:{layout:"page",path:"/postgraphile/quick-start-guide/",title:"Quick start guide"},sidebar:"docs",previous:{title:"Exporting your schema",permalink:"/postgraphile/next/exporting-schema"},next:{title:"Registry",permalink:"/postgraphile/next/registry"}},u={},c=[{value:"Table of Contents",id:"table-of-contents",level:3},{value:"Install Node",id:"install-node",level:3},{value:"Install PostgreSQL",id:"install-postgresql",level:3},{value:"Create a Database",id:"create-a-database",level:3},{value:"Install PostGraphile",id:"install-postgraphile",level:3},{value:"Running PostGraphile",id:"running-postgraphile",level:3},{value:"Configuring PostGraphile",id:"configuring-postgraphile",level:3},{value:"Writing GraphQL Queries",id:"writing-graphql-queries",level:3}],h={toc:c},m="wrapper";function d(e){let{components:t,...a}=e;return(0,r.kt)(m,(0,n.Z)({},h,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"This quick start guide will walk you through spinning up your first PostGraphile\nserver, including installing the prerequisites such as Node and PostgreSQL."),(0,r.kt)("h3",{id:"table-of-contents"},"Table of Contents"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#install-node"},"Install Node")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#install-postgresql"},"Install PostgreSQL")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#create-a-database"},"Create a Database")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#install-postgraphile"},"Install PostGraphile"))),(0,r.kt)("h3",{id:"install-node"},"Install Node"),(0,r.kt)("p",null,"You need to be running Node.js v8.6 or higher to run PostGraphile. You can check\nyour current version of Node by running ",(0,r.kt)("inlineCode",{parentName:"p"},"node --version"),". If you're running a\nrecent version you can skip this section."),(0,r.kt)("p",null,"There's many ways of installing node; if you're on macOS you might prefer\ninstalling with ",(0,r.kt)("a",{parentName:"p",href:"https://brew.sh/"},"homebrew")," via ",(0,r.kt)("inlineCode",{parentName:"p"},"brew install node"),"; if you're\non a unix-based system you might like to\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/creationix/nvm"},"use the ",(0,r.kt)("inlineCode",{parentName:"a"},"nvm")," tool"),". Failing these, if\nyou're using OS X or Windows, use one of the installers from the\n",(0,r.kt)("a",{parentName:"p",href:"https://nodejs.org/en/download/"},"Node.js download page"),". Make sure you select\nthe version labelled LTS. Linux users can scroll down the page and find the\nversion that works with their system."),(0,r.kt)("p",null,"Once installed run ",(0,r.kt)("inlineCode",{parentName:"p"},"node -v")," in a terminal to check your version. It must be\n16.20.0 or higher."),(0,r.kt)("h3",{id:"install-postgresql"},"Install PostgreSQL"),(0,r.kt)("p",null,"We need a PostgreSQL database to connect to. You can skip this section if you\nalready have PostgreSQL version ",(0,r.kt)("inlineCode",{parentName:"p"},"11.0")," or higher installed. If you do not use a\nlocal PostgreSQL server then you'll need to modify the commands that follow to\naccount for this."),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"PostgreSQL does not need to be installed on the same machine, but you'll have a\nbetter development experience if it is. Try and minimise database connection\nlatency - do not use a database on the other side of the planet from you!")),(0,r.kt)("p",null,"If you are running on macOS, it is recommended that you install and use\n",(0,r.kt)("a",{parentName:"p",href:"http://postgresapp.com/"},"PostgreSQL.app"),". If you are on another platform, go to\nthe ",(0,r.kt)("a",{parentName:"p",href:"https://www.postgresql.org/download/"},"PostgreSQL download page")," to pick up\na copy of PostgreSQL. The latest LTS version is probably a good choice, but please\nrefer to ",(0,r.kt)("a",{parentName:"p",href:"./requirements/"},"the requirements documentation"),"."),(0,r.kt)("p",null,"After that, make sure your copy of PostgreSQL is running locally by running\n",(0,r.kt)("inlineCode",{parentName:"p"},"psql postgres:///")," in a terminal (the three slashes is deliberate - we're\ndeliberately not specifying a host so it uses the defaults (either a unix\nsocket or hostname: localhost, port: 5432)."),(0,r.kt)("p",null,"If you get something like this returned then PostgreSQL is successfully\ninstalled:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'$ psql "postgres:///"\n\npsql: FATAL:  database "username" does not exist\n')),(0,r.kt)("p",null,'however, if you receive a "Connection refused" error then that indicates your\nPostgreSQL server is not running, or not reachable:'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'$ psql "postgres:///"\n\npsql: could not connect to server: Connection refused\n')),(0,r.kt)("p",null,"If you want to connect to a different database within PostgreSQL, just add the\ndatabase name to the end of the connection string:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'$ psql postgres:///testdb # Connects to the `testdb` database on your local machine\n$ psql "postgres://user:password@somehost:2345/somedb"  # Connects to the `somedb` database at `postgres://somehost:2345` using login with `user` and `password`\n')),(0,r.kt)("p",null,"Read the documentation on\n",(0,r.kt)("a",{parentName:"p",href:"https://www.postgresql.org/docs/current/static/libpq-connect.html#LIBPQ-CONNSTRING"},"PostgreSQL connection strings"),"\nto learn more about alternative formats (including using a password)."),(0,r.kt)("h3",{id:"create-a-database"},"Create a Database"),(0,r.kt)("p",null,"Next, create a database. You can do this by using the terminal:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"$ createdb mydb\n")),(0,r.kt)("p",null,'This will create a PostgreSQL database called "mydb". You can read more about\nthis on the\n',(0,r.kt)("a",{parentName:"p",href:"https://www.postgresql.org/docs/current/static/tutorial-createdb.html"},"PostgreSQL Documentation site"),".\nNow you can run ",(0,r.kt)("inlineCode",{parentName:"p"},"psql")," with your database URL and get a SQL prompt:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'$ psql "postgres:///mydb"\npsql (14.*)\nType "help" for help.\n\n=#\n')),(0,r.kt)("p",null,"Run the following query to make sure things are working smoothly:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"=# select 1 + 1 as two;\n two\n-----\n   2\n(1 row)\n\n=#\n")),(0,r.kt)("h3",{id:"install-postgraphile"},"Install PostGraphile"),(0,r.kt)("p",null,"Use your package manager of choice to install the ",(0,r.kt)("inlineCode",{parentName:"p"},"postgraphile")," module:\n",(0,r.kt)("a",{parentName:"p",href:"https://docs.npmjs.com/getting-started/installing-node"},"npm"),":"),(0,r.kt)(o.Z,{groupId:"npm2yarn",mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"npm",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm install --save postgraphile@beta\n"))),(0,r.kt)(s.Z,{value:"yarn",label:"Yarn",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"yarn add postgraphile@beta\n"))),(0,r.kt)(s.Z,{value:"pnpm",label:"pnpm",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"pnpm add postgraphile@beta\n")))),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"We do not recommend installing PostGraphile globally (e.g. with the ",(0,r.kt)("inlineCode",{parentName:"p"},"-g")," flag\nto ",(0,r.kt)("inlineCode",{parentName:"p"},"npm"),") - local installs are preferred. Though it may seem simpler to use\nglobal installs at first, it will become more complicated and give you hard to\ndebug errors, so even if you're new to Node we suggest you get used to local\ninstalls.")),(0,r.kt)("h3",{id:"running-postgraphile"},"Running PostGraphile"),(0,r.kt)("p",null,"To run PostGraphile, since we've installed ",(0,r.kt)("inlineCode",{parentName:"p"},"postgraphile")," locally, we need to\nuse the ",(0,r.kt)("inlineCode",{parentName:"p"},"npx")," command (or ",(0,r.kt)("inlineCode",{parentName:"p"},"yarn")," if you prefer) so that the system can find the\nlocal binary. We then pass a standard preset, and the same URL that you used\nfor ",(0,r.kt)("inlineCode",{parentName:"p"},"psql")," with the database name added:"),(0,r.kt)(o.Z,{groupId:"npm2yarn",mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"npm",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'# Connect to the `mydb` database within the local PostgreSQL server\n$ npx postgraphile -P postgraphile/presets/amber -c "postgres:///mydb"\n\n# Connect to a database that requires SSL/TLS\n$ npx postgraphile -P postgraphile/presets/amber -c "postgres://securehost:5432/db?ssl=true"\n\n# Connect to the `somedb` database within the PostgreSQL at somehost port 2345\n$ npx postgraphile -P postgraphile/presets/amber -c "postgres://somehost:2345/somedb"\n'))),(0,r.kt)(s.Z,{value:"yarn",label:"Yarn",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'# Connect to the `mydb` database within the local PostgreSQL server\n$ npx postgraphile -P postgraphile/presets/amber -c "postgres:///mydb"\n\n# Connect to a database that requires SSL/TLS\n$ npx postgraphile -P postgraphile/presets/amber -c "postgres://securehost:5432/db?ssl=true"\n\n# Connect to the `somedb` database within the PostgreSQL at somehost port 2345\n$ npx postgraphile -P postgraphile/presets/amber -c "postgres://somehost:2345/somedb"\n'))),(0,r.kt)(s.Z,{value:"pnpm",label:"pnpm",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'# Connect to the `mydb` database within the local PostgreSQL server\n$ npx postgraphile -P postgraphile/presets/amber -c "postgres:///mydb"\n\n# Connect to a database that requires SSL/TLS\n$ npx postgraphile -P postgraphile/presets/amber -c "postgres://securehost:5432/db?ssl=true"\n\n# Connect to the `somedb` database within the PostgreSQL at somehost port 2345\n$ npx postgraphile -P postgraphile/presets/amber -c "postgres://somehost:2345/somedb"\n')))),(0,r.kt)("p",null,"You can also run PostGraphile with the watch flag:"),(0,r.kt)(o.Z,{groupId:"npm2yarn",mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"npm",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'$ npx postgraphile -P postgraphile/presets/amber -c "postgres:///mydb" --watch\n'))),(0,r.kt)(s.Z,{value:"yarn",label:"Yarn",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'$ npx postgraphile -P postgraphile/presets/amber -c "postgres:///mydb" --watch\n'))),(0,r.kt)(s.Z,{value:"pnpm",label:"pnpm",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'$ npx postgraphile -P postgraphile/presets/amber -c "postgres:///mydb" --watch\n')))),(0,r.kt)("p",null,"With the ",(0,r.kt)("inlineCode",{parentName:"p"},"--watch")," flag, PostGraphile will automatically update your GraphQL API\nwhenever the PostgreSQL schemas you are introspecting change."),(0,r.kt)("h3",{id:"configuring-postgraphile"},"Configuring PostGraphile"),(0,r.kt)("p",null,"Having to enter all these flags each time can become cumbersome, so we'll\ncreate a ",(0,r.kt)("inlineCode",{parentName:"p"},"graphile.config.mjs")," file to store our configuration."),(0,r.kt)("p",null,"A minimal config so you just don't need the ",(0,r.kt)("inlineCode",{parentName:"p"},"-P postgraphile/presets/amber")," would be be:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="graphile.config.mjs"',title:'"graphile.config.mjs"'},'import { PostGraphileAmberPreset } from "postgraphile/presets/amber";\nexport default { extends: [PostGraphileAmberPreset] };\n')),(0,r.kt)("p",null,"An configuration equivalent to the CLI with the watch flag above would be:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="graphile.config.mjs"',title:'"graphile.config.mjs"'},'import { PostGraphileAmberPreset } from "postgraphile/presets/amber";\nimport { makePgService } from "postgraphile/adaptors/pg";\n\n/** @type {GraphileConfig.Preset} */\nconst preset = {\n  extends: [PostGraphileAmberPreset],\n  pgServices: [makePgService({ connectionString: "postgres:///mydb" })],\n  grafserv: { watch: true },\n};\n\nexport default preset;\n')),(0,r.kt)("p",null,"(Read more about ",(0,r.kt)("inlineCode",{parentName:"p"},"graphile.config.mjs"),", including how to write it in\nTypeScript, in the ",(0,r.kt)("a",{parentName:"p",href:"/postgraphile/next/config"},"Configuration documentation"),".)"),(0,r.kt)("p",null,"With this configuration in place, we no longer need to pass the flags, so we\ncan just run PostGraphile as:"),(0,r.kt)(o.Z,{groupId:"npm2yarn",mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"npm",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"$ npx postgraphile\n"))),(0,r.kt)(s.Z,{value:"yarn",label:"Yarn",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"$ npx postgraphile\n"))),(0,r.kt)(s.Z,{value:"pnpm",label:"pnpm",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"$ npx postgraphile\n")))),(0,r.kt)("h3",{id:"writing-graphql-queries"},"Writing GraphQL Queries"),(0,r.kt)("p",null,"Running PostGraphile will give you a URL:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Server listening on port 5678 at http://127.0.0.1:5678/graphql\n")),(0,r.kt)("p",null,"You can visit this URL in your web browser to see the\n",(0,r.kt)("a",{parentName:"p",href:"https://grafast.org/ruru"},"Ruru")," (a Gra",(0,r.kt)("em",{parentName:"p"},"fast")," flavoured\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/graphql/graphiql"},"GraphiQL")," IDE) interface, or you can\nissue GraphQL requests to this URL using a GraphQL client of your choosing."),(0,r.kt)("p",null,"Well done \u2014 you've got PostGraphile up and running!"))}d.isMDXComponent=!0}}]);