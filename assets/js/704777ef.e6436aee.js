"use strict";(self.webpackChunk_localrepo_postgraphile_website=self.webpackChunk_localrepo_postgraphile_website||[]).push([[9958],{30876:(e,t,n)=>{n.d(t,{Zo:()=>h,kt:()=>d});var a=n(2784);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},h=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,h=s(e,["components","mdxType","originalType","parentName"]),u=p(n),m=r,d=u["".concat(l,".").concat(m)]||u[m]||c[m]||i;return n?a.createElement(d,o(o({ref:t},h),{},{components:n})):a.createElement(d,o({ref:t},h))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:r,o[1]=s;for(var p=2;p<i;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},4825:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>c,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var a=n(7896),r=(n(2784),n(30876));const i={},o="Usage",s={unversionedId:"usage",id:"usage",title:"Usage",description:"There's three main ways of using PostGraphile: a CLI that you can run with",source:"@site/postgraphile/usage.md",sourceDirName:".",slug:"/usage",permalink:"/postgraphile/next/usage",draft:!1,editUrl:"https://github.com/graphile/crystal/tree/main/postgraphile/website/postgraphile/usage.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Introduction",permalink:"/postgraphile/next/"},next:{title:"Usage - Command Line",permalink:"/postgraphile/next/usage-cli"}},l={},p=[{value:"CLI",id:"cli",level:2},{value:"Library",id:"library",level:2},{value:"Schema",id:"schema",level:2},{value:"Use the config, Luke!",id:"use-the-config-luke",level:2},{value:"Which one should I use?",id:"which-one-should-i-use",level:2}],h={toc:p},u="wrapper";function c(e){let{components:t,...n}=e;return(0,r.kt)(u,(0,a.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"usage"},"Usage"),(0,r.kt)("p",null,"There's three main ways of using PostGraphile: a ",(0,r.kt)("strong",{parentName:"p"},"CLI")," that you can run with\nminimal effort, the ",(0,r.kt)("strong",{parentName:"p"},"library mode")," that we expect most users will ultimately\nwant to use, and ",(0,r.kt)("strong",{parentName:"p"},"schema-only mode")," which gives you the most control (but\nalso the most responsibilities). Each of these layers builds on top of the\nlayer below it, so it's fairly easy to move between them. We've also made sure\nthat they are each configured via the same ",(0,r.kt)("a",{parentName:"p",href:"/postgraphile/next/config"},"preset system")," so you\ncan move from one to another with minimal effort."),(0,r.kt)("h2",{id:"cli"},"CLI"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/postgraphile/next/usage-cli"},(0,r.kt)("strong",{parentName:"a"},"PostGraphile CLI"))," is the most user-friendly way to try\nPostGraphile, but also the most limited: it accepts a few command line options,\nwill load your ",(0,r.kt)("a",{parentName:"p",href:"/postgraphile/next/config"},"config file"),", and spins up a Node ",(0,r.kt)("inlineCode",{parentName:"p"},"http")," server (or cluster\nthereof) to host the Grafserv instance from the PostGraphile library (see\nnext). The CLI does not integrate with existing Node.js servers, so if you need\nthat you'll want to use library mode."),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("strong",{parentName:"p"},"Most users should start with this layer"),", and many users use it successfully\nin production. If you don't need to leverage much of the Node.js ecosystem in\nyour API then you may find it's sufficient for your needs.")),(0,r.kt)("h2",{id:"library"},"Library"),(0,r.kt)("p",null,"The ",(0,r.kt)("a",{parentName:"p",href:"/postgraphile/next/usage-library"},(0,r.kt)("strong",{parentName:"a"},"PostGraphile library"))," builds your GraphQL schema (see\nnext), possibly in watch mode, and lets you access it or retrieve a ",(0,r.kt)("a",{parentName:"p",href:"https://grafast.org/grafserv"},"Grafserv"),"\ninstance. You can mount the Grafserv instance in Node's ",(0,r.kt)("inlineCode",{parentName:"p"},"http")," server, or as a\nmiddleware in any of a number of Node.js web servers, such as Connect, Express,\nKoa, Fastify, Restify, etc."),(0,r.kt)("p",null,"Grafserv is responsible for receiving, deciphering, and validating the GraphQL\nHTTP request from the user according to the options supplied; building the\nGraphQL ",(0,r.kt)("inlineCode",{parentName:"p"},"context")," (which includes things such as authentication details); and\nthen sending the query along with the GraphQL schema (see next) to ",(0,r.kt)("a",{parentName:"p",href:"https://grafast.org/grafast"},"Gra",(0,r.kt)("em",{parentName:"a"},"fast")),"\nto be executed."),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("strong",{parentName:"p"},"About 70% of PostGraphile users end up using this layer in their\napplications"),". Using PostGraphile as a middleware like this is the recommended\nsetup for most folks - it allows you to combine your PostGraphile GraphQL server\nwith anything else your Node server needs to provide (e.g. authentication,\nsession management, logging, rate limiting, other endpoints, etc) and leverage\nthe full power of the Node.js ecosystem.")),(0,r.kt)("h2",{id:"schema"},"Schema"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/postgraphile/next/usage-schema"},(0,r.kt)("strong",{parentName:"a"},"PostGraphile schema-only mode"),' ("schema-only")')," focusses\non building the GraphQL schema containing all your types, fields and plans\n(Gra",(0,r.kt)("em",{parentName:"p"},"fast"),"'s replacement for resolvers). The plans inside the schema take care\nof configuring a PG client with the relevant settings when needed, so the\nschema can be used without lifecycle management (though you will need to be\nsure to pass a suitable context)."),(0,r.kt)("p",null,"Thanks to PostGraphile's ",(0,r.kt)("a",{parentName:"p",href:"/postgraphile/next/exporting-schema"},"exportable schema support")," you\ncan even write an executable version of this GraphQL schema to disk as JavaScript -\nthis file will not depend on ",(0,r.kt)("inlineCode",{parentName:"p"},"postgraphile"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"graphile-build"),",\n",(0,r.kt)("inlineCode",{parentName:"p"},"graphile-build-pg"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"graphile-utils"),' or other "build time" schema concerns -\nit will only contain references to what is necessary for it to execute in\nproduction, such as ',(0,r.kt)("inlineCode",{parentName:"p"},"graphql"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"grafast"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"@dataplan/pg")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"jsonwebtoken"),"."),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("strong",{parentName:"p"},"Few users need this"),", but it is helpful for server-side GraphQL resolution\nwithout the overhead of a network layer.")),(0,r.kt)("h2",{id:"use-the-config-luke"},"Use the config, Luke!"),(0,r.kt)("p",null,"By storing ",(0,r.kt)("a",{parentName:"p",href:"/postgraphile/next/config"},"your configuration")," into a ",(0,r.kt)("inlineCode",{parentName:"p"},"graphile.config.js")," (or\nsimilar) file, you will be able to run PostGraphile in any of these three modes\nand still leverage a similar setup in each. This file also saves us from having\nto offer 72 different CLI flags like we did in V4, instead only offering the\nmost essential options."),(0,r.kt)("h2",{id:"which-one-should-i-use"},"Which one should I use?"),(0,r.kt)("p",null,"We recommend that you start with the PostGraphile CLI and then quickly move to\nthe PostGraphile middleware if you need deeper integration with Node.js."),(0,r.kt)("p",null,"Which layer would you like to read more about?"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/postgraphile/next/usage-cli"},(0,r.kt)("strong",{parentName:"a"},"CLI"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/postgraphile/next/usage-library"},(0,r.kt)("strong",{parentName:"a"},"Middleware"),' ("library")')),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/postgraphile/next/usage-schema"},(0,r.kt)("strong",{parentName:"a"},"GraphQL schema"),' ("schema-only")')),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/postgraphile/next/config"},"Configuration"))))}c.isMDXComponent=!0}}]);