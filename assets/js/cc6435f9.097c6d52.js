"use strict";(self.webpackChunk_localrepo_postgraphile_website=self.webpackChunk_localrepo_postgraphile_website||[]).push([[6311],{30876:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>h});var r=t(2784);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),d=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=d(e.components);return r.createElement(s.Provider,{value:n},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},c=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=d(t),c=a,h=u["".concat(s,".").concat(c)]||u[c]||m[c]||i;return t?r.createElement(h,o(o({ref:n},p),{},{components:t})):r.createElement(h,o({ref:n},p))}));function h(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=c;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[u]="string"==typeof e?e:a,o[1]=l;for(var d=2;d<i;d++)o[d]=t[d];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}c.displayName="MDXCreateElement"},54621:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>l,toc:()=>d});var r=t(7896),a=(t(2784),t(30876));const i={layout:"page",path:"/postgraphile/make-add-pg-table-order-by-plugin/",title:"makeAddPgTableOrderByPlugin (graphile-utils v4.4.5+)"},o=void 0,l={unversionedId:"make-add-pg-table-order-by-plugin",id:"version-4.x/make-add-pg-table-order-by-plugin",title:"makeAddPgTableOrderByPlugin (graphile-utils v4.4.5+)",description:"WARNING: _this plugin generator doesn't currently have any tests, so it's",source:"@site/versioned_docs/version-4.x/make-add-pg-table-order-by-plugin.md",sourceDirName:".",slug:"/make-add-pg-table-order-by-plugin",permalink:"/postgraphile/current/make-add-pg-table-order-by-plugin",draft:!1,editUrl:"https://github.com/graphile/crystal/tree/main/postgraphile/website/versioned_docs/version-4.x/make-add-pg-table-order-by-plugin.md",tags:[],version:"4.x",frontMatter:{layout:"page",path:"/postgraphile/make-add-pg-table-order-by-plugin/",title:"makeAddPgTableOrderByPlugin (graphile-utils v4.4.5+)"},sidebar:"docs",previous:{title:"makeAddPgTableConditionPlugin (graphile-utils v4.4.5+)",permalink:"/postgraphile/current/make-add-pg-table-condition-plugin"},next:{title:"makePgSmartTagsPlugin (graphile-utils v4.5.0+)",permalink:"/postgraphile/current/make-pg-smart-tags-plugin"}},s={},d=[{value:"Example",id:"example",level:2},{value:"Function signature",id:"function-signature",level:2},{value:"<code>makeAddPgTableOrderByPlugin</code>",id:"makeaddpgtableorderbyplugin",level:3},{value:"<code>orderByAscDesc</code>",id:"orderbyascdesc",level:3}],p={toc:d},u="wrapper";function m(e){let{components:n,...t}=e;return(0,a.kt)(u,(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"WARNING"),": ",(0,a.kt)("em",{parentName:"p"},"this plugin generator doesn't currently have any tests, so it's\nstatus is ",(0,a.kt)("strong",{parentName:"em"},"experimental"),". If you can spare the time to write some tests (or\nsponsor me to do so) then we can promote it to stable.")),(0,a.kt)("p",null,"PostGraphile adds ",(0,a.kt)("inlineCode",{parentName:"p"},"orderBy")," arguments to various of the table collection fields\nit builds so that you can control the order in which you receive the results. By\ndefault we add the table's columns (or, if ",(0,a.kt)("inlineCode",{parentName:"p"},"--no-ignore-indexes")," is enabled,\nonly the columns ",(0,a.kt)("em",{parentName:"p"},"that are indexed"),") in both ascending and descending order. For\nexample, you could request the list of all forums ordered from newest to oldest:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-graphql"},"query ForumsNewestToOldest {\n  allForums(orderBy: [CREATED_AT_DESC]) {\n    nodes {\n      id\n      name\n    }\n  }\n}\n")),(0,a.kt)("p",null,"Sometimes, however, you want to order by something a little more complex than\nthe fields on that table; maybe you want to order by a field on a related table,\nor by a computation, or something else."),(0,a.kt)("p",null,"This plugin generator helps you build new ",(0,a.kt)("inlineCode",{parentName:"p"},"orderBy")," enum values so that you can\nsort more flexibly (though you should keep in mind that they are enum values so\nthey cannot accept arguments). Let's make this clearer with an example:"),(0,a.kt)("h2",{id:"example"},"Example"),(0,a.kt)("p",null,"To sort a list of forums (stored in the table ",(0,a.kt)("inlineCode",{parentName:"p"},"app_public.forums"),") by the date\nof their latest post (posts are stored in ",(0,a.kt)("inlineCode",{parentName:"p"},"app_public.posts"),") you might create a\nplugin like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'/* TODO: test this plugin works! */\nmodule.exports = makeAddPgTableOrderByPlugin(\n  "app_public",\n  "forums",\n  ({ pgSql: sql }) => {\n    const sqlIdentifier = sql.identifier(Symbol("lastPostInForum"));\n    return orderByAscDesc(\n      "LAST_POST_CREATED_AT",\n      ({ queryBuilder }) => sql.fragment`(\n        select ${sqlIdentifier}.created_at\n        from app_public.posts as ${sqlIdentifier}\n        where ${sqlIdentifier}.forum_id = ${queryBuilder.getTableAlias()}.id\n        order by ${sqlIdentifier}.created_at desc\n        limit 1\n      )`,\n    );\n  },\n);\n')),(0,a.kt)("p",null,"(Note: we used the ",(0,a.kt)("inlineCode",{parentName:"p"},"orderByAscDesc")," helper to easily create the ",(0,a.kt)("inlineCode",{parentName:"p"},"_ASC")," and\n",(0,a.kt)("inlineCode",{parentName:"p"},"_DESC")," variants without needing redundant code.)"),(0,a.kt)("p",null,"The above plugin adds the ",(0,a.kt)("inlineCode",{parentName:"p"},"LAST_POST_CREATED_AT_ASC")," and\n",(0,a.kt)("inlineCode",{parentName:"p"},"LAST_POST_CREATED_AT_DESC")," enum values to the ",(0,a.kt)("inlineCode",{parentName:"p"},"ForumOrderBy")," enum, so you can\nnow order forums by these values from another table, e.g.:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-graphql"},"query ForumsOrderedByMostRecentPost {\n  allForums(orderBy: [LAST_POST_CREATED_AT_DESC]) {\n    nodes {\n      id\n      name\n    }\n  }\n}\n")),(0,a.kt)("h2",{id:"function-signature"},"Function signature"),(0,a.kt)("h3",{id:"makeaddpgtableorderbyplugin"},(0,a.kt)("inlineCode",{parentName:"h3"},"makeAddPgTableOrderByPlugin")),(0,a.kt)("p",null,"The signature of the ",(0,a.kt)("inlineCode",{parentName:"p"},"makeAddPgTableOrderByPlugin")," function is:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'function makeAddPgTableOrderByPlugin(\n  schemaName: string,\n  tableName: string,\n  ordersGenerator: (build: Build) => MakeAddPgTableOrderByPluginOrders,\n  hint = `Adding orders with makeAddPgTableOrderByPlugin to "${schemaName}"."${tableName}"`,\n): Plugin;\n\ninterface MakeAddPgTableOrderByPluginOrders {\n  [orderByEnumValue: string]: {\n    value: {\n      alias?: string;\n      specs: Array<OrderSpec>;\n      unique: boolean;\n    };\n  };\n}\n\ntype OrderSpec = [string | SQL, boolean] | [string | SQL, boolean, boolean];\n')),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"OrderSpec")," here is a 2- or 3-tuple, with the following entries:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"the first entry (",(0,a.kt)("inlineCode",{parentName:"li"},"string | SQL"),") is the value to order by; if a string then\nit's assumed to be a column from the table, otherwise it must be an SQL\nfragment from ",(0,a.kt)("inlineCode",{parentName:"li"},"pg-sql2"),"."),(0,a.kt)("li",{parentName:"ol"},"whether the order should be ascending (",(0,a.kt)("inlineCode",{parentName:"li"},"true"),") or descending (",(0,a.kt)("inlineCode",{parentName:"li"},"false"),")."),(0,a.kt)("li",{parentName:"ol"},"whether nulls appear before or after non-null values in the sort ordering.\nPass true for nulls first, false for nulls last, and nothing/null for default\nbehaviour.")),(0,a.kt)("p",null,"The unique key specifies whether the order is unique (true) or not (false) \u2500 if\nin doubt, pass false and PostGraphile will make it unique by adding the primary\nkey as the last sort field invisibly."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"MakeAddPgTableOrderByPluginOrders")," is a hash (POJO \u2500 plain old JavaScript\nobject) which maps from the name of the enum value to\n",(0,a.kt)("a",{parentName:"p",href:"https://graphql.org/graphql-js/type/#graphqlenumtype"},"a ",(0,a.kt)("inlineCode",{parentName:"a"},"GraphQLEnumValueConfig")," spec"),".\nWe have a defined format for the value of an orderBy enum as shown above. In\naddition to the ",(0,a.kt)("inlineCode",{parentName:"p"},"value")," entry detailed above, you could also provide a\n",(0,a.kt)("inlineCode",{parentName:"p"},"description")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"deprecationReason")," (both strings)."),(0,a.kt)("h3",{id:"orderbyascdesc"},(0,a.kt)("inlineCode",{parentName:"h3"},"orderByAscDesc")),(0,a.kt)("p",null,"We also expose the ",(0,a.kt)("inlineCode",{parentName:"p"},"orderByAscDesc")," helper which makes it easier to build the\n",(0,a.kt)("inlineCode",{parentName:"p"},"_ASC")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"_DESC")," orders which are typically identical except for name and\nreversed sort:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"export function orderByAscDesc(\n  baseName: string,\n  columnOrSqlFragment: string | SQL,\n  uniqueOrOptions: boolean | OrderByAscDescOptions = false,\n): MakeAddPgTableOrderByPluginOrders;\n")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"baseName")," will have ",(0,a.kt)("inlineCode",{parentName:"p"},"_ASC")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"_DESC")," appended for the two enum values\nthis function creates."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"columnOrSqlFragment")," is where the order value is specified, it becomes the\nfirst entry in the ",(0,a.kt)("inlineCode",{parentName:"p"},"OrderSpec")," tuple defined above."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"uniqueOrOptions")," define 1) whether the sort order is unique, and 2) how to sort\nnull values when sorting by ascending and descending order. Only set\n",(0,a.kt)("inlineCode",{parentName:"p"},"uniqueOrOptions")," (or ",(0,a.kt)("inlineCode",{parentName:"p"},"unique"),") to ",(0,a.kt)("inlineCode",{parentName:"p"},"true")," if you can guarantee that the sort\norder is unique."),(0,a.kt)("p",null,"As of v4.12, you can also customize how nulls are sorted:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'export type NullsSortMethod =\n  | "first"\n  | "last"\n  | "first-iff-ascending"\n  | "last-iff-ascending"\n  | undefined;\n\nexport interface OrderByAscDescOptions {\n  unique?: boolean;\n  nulls?: NullsSortMethod;\n}\n')),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"nulls")," option extends the ",(0,a.kt)("inlineCode",{parentName:"p"},"ORDER BY")," clause of the SQL query with either\n",(0,a.kt)("inlineCode",{parentName:"p"},"NULLS FIRST")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"NULLS LAST")," according to the following rules:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},'"first": specify ',(0,a.kt)("inlineCode",{parentName:"li"},"NULLS FIRST")," for both ascending and descending;"),(0,a.kt)("li",{parentName:"ul"},'"last": specify ',(0,a.kt)("inlineCode",{parentName:"li"},"NULLS LAST")," for both ascending and descending;"),(0,a.kt)("li",{parentName:"ul"},'"first-iff-ascending": specify ',(0,a.kt)("inlineCode",{parentName:"li"},"NULLS FIRST")," when ordering by ascending, and\n",(0,a.kt)("inlineCode",{parentName:"li"},"NULLS LAST")," when ordering by descending;"),(0,a.kt)("li",{parentName:"ul"},'"last-iff-ascending": specify ',(0,a.kt)("inlineCode",{parentName:"li"},"NULLS LAST")," when ordering by ascending, and\n",(0,a.kt)("inlineCode",{parentName:"li"},"NULLS FIRST")," when ordering by descending;"),(0,a.kt)("li",{parentName:"ul"},"(default) undefined: omit both ",(0,a.kt)("inlineCode",{parentName:"li"},"NULLS FIRST")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"NULLS LAST")," in the order by\nclause for both ascending and descending, thus using the default ordering\nbehavior.")),(0,a.kt)("p",null,"For example, you may wish to create a plugin to sort movies by either top-rated\nor lowest-rated first (meaning the average of the movie's reviews):"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'const customOrderBy = orderByAscDesc(\n  "RATING",\n  (helpers) => {\n    const { queryBuilder } = helpers;\n\n    const orderByFrag = sql.fragment`(\n      select avg(${sqlIdentifier}.rating)\n      from app_public.movie_reviews as ${sqlIdentifier}\n      where ${sqlIdentifier}.movie_id = ${queryBuilder.getTableAlias()}.id\n    )`;\n\n    return orderByFrag;\n  },\n  { nulls: "last" },\n);\n')),(0,a.kt)("p",null,"To get the top-rated movies, one would then use the ",(0,a.kt)("inlineCode",{parentName:"p"},"RATING_DESC")," option in the\nGraphQL query. However, by default, ",(0,a.kt)("inlineCode",{parentName:"p"},"RATING_DESC")," would put movies with no\nreviews (and thus an average of ",(0,a.kt)("inlineCode",{parentName:"p"},"null"),') first, followed by the sorted movies. A\nmovie with no ratings is not exactly what one thinks of when one hears\n"top-rated"! By specifying ',(0,a.kt)("inlineCode",{parentName:"p"},"{ nulls: 'last' }"),", however, PostGraphile knows that\nthis orderBy plugin should still show the movies without any reviews, but just\nput them at the end of the list."))}m.isMDXComponent=!0}}]);