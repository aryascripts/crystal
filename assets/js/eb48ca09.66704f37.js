"use strict";(self.webpackChunk_localrepo_grafast_website=self.webpackChunk_localrepo_grafast_website||[]).push([[841],{30876:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>f});var r=n(2784);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},c="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),c=p(n),d=a,f=c["".concat(l,".").concat(d)]||c[d]||h[d]||o;return n?r.createElement(f,i(i({ref:t},u),{},{components:n})):r.createElement(f,i({ref:t},u))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[c]="string"==typeof e?e:a,i[1]=s;for(var p=2;p<o;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},28143:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var r=n(7896),a=(n(2784),n(30876));const o={sidebar_position:8},i="Request overview",s={unversionedId:"request-overview",id:"request-overview",title:"Request overview",description:"The following deliberately over-simplifies the inner workings of  by",source:"@site/grafast/request-overview.md",sourceDirName:".",slug:"/request-overview",permalink:"/grafast/request-overview",draft:!1,editUrl:"https://github.com/graphile/crystal/tree/main/grafast/website/grafast/request-overview.md",tags:[],version:"current",sidebarPosition:8,frontMatter:{sidebar_position:8},sidebar:"tutorialSidebar",previous:{title:"Step classes",permalink:"/grafast/step-classes"},next:{title:"Operation plan",permalink:"/grafast/operation-plan"}},l={},p=[{value:"Receive and parse request",id:"receive-and-parse-request",level:2},{value:"Getting the operation plan",id:"getting-the-operation-plan",level:2},{value:"Execute operation plan",id:"execute-operation-plan",level:2},{value:"Returning data to user",id:"returning-data-to-user",level:2}],u={toc:p},c="wrapper";function h(e){let{components:t,...n}=e;return(0,a.kt)(c,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"request-overview"},"Request overview"),(0,a.kt)("admonition",{type:"caution"},(0,a.kt)("p",{parentName:"admonition"},"The following deliberately over-simplifies the inner workings of ",(0,a.kt)("grafast",null)," by\nfocussing on single-payload GraphQL requests rather than those that return\nstreams. The aim is to give you a general feel for how the system works.")),(0,a.kt)("p",null,"For a straightforward GraphQL request (one that does not return a stream), the\nrequest cycle looks something like this:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Receive and parse request from user"),(0,a.kt)("li",{parentName:"ol"},"Find or build operation and output plans"),(0,a.kt)("li",{parentName:"ol"},"Execute operation and output plan"),(0,a.kt)("li",{parentName:"ol"},"Return data to user")),(0,a.kt)("h2",{id:"receive-and-parse-request"},"Receive and parse request"),(0,a.kt)("p",null,"Essentially the same as in a graphql-js system with the slight tweak that we\ncache the parsing of the document."),(0,a.kt)("h2",{id:"getting-the-operation-plan"},"Getting the operation plan"),(0,a.kt)("p",null,"When ",(0,a.kt)("grafast",null)," sees an operation for the first time, it builds an ",(0,a.kt)("a",{parentName:"p",href:"./operation-plan"},"operation\nplan"),". Whilst building the operation plan, it may have also determined\nparticular constraints that a future request must satisfy in order to use this\nsame operation plan; for example if the request contained ",(0,a.kt)("inlineCode",{parentName:"p"},"@skip(if: $variable)"),"\nthen a different operation plan would be needed depending on whether ",(0,a.kt)("inlineCode",{parentName:"p"},"$variable"),"\nwas ",(0,a.kt)("inlineCode",{parentName:"p"},"true")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"false"),'. Where possible, constraints are kept as narrow as\npossible - for example "variable $foo is a list" is preferred over "variable\n$foo\nis the list ',"[1,2,3]",'" - to maximize reuse.'),(0,a.kt)("p",null,"When an operation is seen a future time, ",(0,a.kt)("grafast",null)," looks for an existing\noperation plan whose constraints fit the request. If there is one then this\noperation plan can be executed, otherwise a new operation plan is created (see\nprevious paragraph)."),(0,a.kt)("h2",{id:"execute-operation-plan"},"Execute operation plan"),(0,a.kt)("p",null,"â€‹",(0,a.kt)("grafast",null)," will populate the relevant system steps in the plan\nwith the variables, context value, root value, etc and will then execute the\nexecution plan, the execution flowing down through the execution plan's step graph,\nexecuting each step exactly once (and sometimes in parallel with other steps)\nuntil all steps have been executed. Since each step is only executed once per\nrequest, the execution must process all of the data in a batch. Thus, it is fed\na list of data from each of its dependencies, and it must return a\ncorresponding list of data that its dependents may themselves consume."),(0,a.kt)("p",null,"Once the execution plan has executed to completion, the values gathered are ran\nthrough the output plan to produce the output. Typically this is a JSON object,\nhowever for an optimization ",(0,a.kt)("grafast",null)," may optionally output stringified JSON\ninstead without ever building the intermediary JavaScript objects."),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"When the operation involves streams, the relevant execution and output plan\nsteps take place for each element of the stream(s).")),(0,a.kt)("h2",{id:"returning-data-to-user"},"Returning data to user"),(0,a.kt)("p",null,"This can be the same as in a graphql-js project, but ",(0,a.kt)("grafast",null)," also supports\nan optimized strategy for stringifying the result should you need to do so\n(e.g. if you are serving the request over HTTP). For this reason, we recommend\nthat you use ",(0,a.kt)("inlineCode",{parentName:"p"},"stringifyPayload")," rather than ",(0,a.kt)("inlineCode",{parentName:"p"},"JSON.stringify")," on the results\nbefore sending to the user."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'import { stringifyPayload, grafast } from "grafast";\n\nconst result = await grafast(/*...*/);\nconsole.log(stringifyPayload(result));\n')))}h.isMDXComponent=!0}}]);