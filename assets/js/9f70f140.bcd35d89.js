"use strict";(self.webpackChunk_localrepo_postgraphile_website=self.webpackChunk_localrepo_postgraphile_website||[]).push([[7251],{30876:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>m});var a=t(2784);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=a.createContext({}),p=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},d=function(e){var n=p(e.components);return a.createElement(s.Provider,{value:n},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},g=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,l=e.originalType,s=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),u=p(t),g=i,m=u["".concat(s,".").concat(g)]||u[g]||c[g]||l;return t?a.createElement(m,r(r({ref:n},d),{},{components:t})):a.createElement(m,r({ref:n},d))}));function m(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var l=t.length,r=new Array(l);r[0]=g;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o[u]="string"==typeof e?e:i,r[1]=o;for(var p=2;p<l;p++)r[p]=t[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}g.displayName="MDXCreateElement"},55171:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>r,default:()=>c,frontMatter:()=>l,metadata:()=>o,toc:()=>p});var a=t(7896),i=(t(2784),t(30876));const l={title:"makeAddPgTableConditionPlugin"},r="makeAddPgTableConditionPlugin",o={unversionedId:"migrating-from-v4/make-add-pg-table-condition-plugin",id:"migrating-from-v4/make-add-pg-table-condition-plugin",title:"makeAddPgTableConditionPlugin",description:"The (simplified) signature for makeAddPgTableConditionPlugin in V4 was:",source:"@site/postgraphile/migrating-from-v4/make-add-pg-table-condition-plugin.md",sourceDirName:"migrating-from-v4",slug:"/migrating-from-v4/make-add-pg-table-condition-plugin",permalink:"/postgraphile/next/migrating-from-v4/make-add-pg-table-condition-plugin",draft:!1,editUrl:"https://github.com/graphile/crystal/tree/main/postgraphile/website/postgraphile/migrating-from-v4/make-add-pg-table-condition-plugin.md",tags:[],version:"current",frontMatter:{title:"makeAddPgTableConditionPlugin"},sidebar:"docs",previous:{title:"makeExtendSchemaPlugin",permalink:"/postgraphile/next/migrating-from-v4/make-extend-schema-plugin"},next:{title:"makeAddPgTableOrderByPlugin",permalink:"/postgraphile/next/migrating-from-v4/make-add-pg-table-order-by-plugin"}},s={},p=[{value:"Example 1",id:"example-1",level:2}],d={toc:p},u="wrapper";function c(e){let{components:n,...t}=e;return(0,i.kt)(u,(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"makeaddpgtableconditionplugin"},"makeAddPgTableConditionPlugin"),(0,i.kt)("p",null,"The (simplified) signature for ",(0,i.kt)("inlineCode",{parentName:"p"},"makeAddPgTableConditionPlugin")," in V4 was:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"// V4 signature\nfunction makeAddPgTableConditionPlugin(\n  schemaName: string,\n  tableName: string,\n  conditionFieldName: string,\n  fieldSpecGenerator: (build: Build) => GraphQLInputFieldConfig,\n  conditionGenerator: (\n    value: unknown,\n    helpers: { queryBuilder: QueryBuilder; sql: PgSQL; sqlTableAlias: SQL },\n    build: Build,\n  ) => SQL,\n): Plugin;\n")),(0,i.kt)("p",null,"In V5, the signature has changed a little."),(0,i.kt)("p",null,'The first change is trivial: we\'ve combined the first two arguments into a\n"match" object which also optionally accepts the ',(0,i.kt)("inlineCode",{parentName:"p"},"serviceName"),"."),(0,i.kt)("p",null,"The second change, however, is much more significant - condition generation now\noperates based on the Gra",(0,i.kt)("em",{parentName:"p"},"fast"),' plan system (which operates based on "steps"\nwhich represent all possible values) rather than V4\'s lookahead engine (which\ndeals in concrete runtime values).'),(0,i.kt)("p",null,"The (simplified) new signature is:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"// V5 signature\nfunction makeAddPgTableConditionPlugin(\n  match: { serviceName?: string; schemaName: string; tableName: string },\n  conditionFieldName: string,\n  fieldSpecGenerator: (build: GraphileBuild.Build) => GraphileInputFieldConfig,\n\n  // OPTIONAL:\n  conditionGenerator?: (\n    value: FieldArgs,\n    helpers: {\n      $condition: PgConditionStep<PgSelectStep>;\n      sql: typeof sql;\n      sqlTableAlias: SQL;\n      build: GraphileBuild.Build;\n    },\n  ) => SQL | null | undefined,\n): GraphileConfig.Plugin;\n")),(0,i.kt)("p",null,"Note that the ",(0,i.kt)("inlineCode",{parentName:"p"},"conditionGenerator")," is now optional because you can choose to\ninstead include an ",(0,i.kt)("inlineCode",{parentName:"p"},"applyPlan")," entry in the result of ",(0,i.kt)("inlineCode",{parentName:"p"},"fieldSpecGenerator")," -\nthese input field and argument plans are now inherent to the schema rather than\nfloating in some unknowable space as they did in V4."),(0,i.kt)("p",null,"Here's an example:"),(0,i.kt)("h2",{id:"example-1"},"Example 1"),(0,i.kt)("p",null,"V4:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'import { makeAddPgTableConditionPlugin } from "graphile-utils";\n\nconst PetsCountPlugin = makeAddPgTableConditionPlugin(\n  "graphile_utils",\n  "users",\n  "petCountAtLeast",\n  (build) => ({\n    description: "Filters users to those that have at least this many pets",\n    type: build.graphql.GraphQLInt,\n  }),\n  (value, helpers, build) => {\n    const { sqlTableAlias, sql } = helpers;\n    return sql.fragment`(select count(*) from graphile_utils.pets where pets.user_id = ${sqlTableAlias}.id) >= ${sql.value(\n      value,\n    )}`;\n  },\n);\n')),(0,i.kt)("p",null,"Whereas in V5 the condition callback is called on every single GraphQL request,\nin V5 it is only called each time a new operation is planned - operations that\nreuse the plan do not call the condition callback again. ",(0,i.kt)("inlineCode",{parentName:"p"},"value.get()")," gives us\na step (",(0,i.kt)("inlineCode",{parentName:"p"},"$val"),") that represents all potential values for that input; we then\nfeed this into the SQL statement via a placeholder (since it is not a concrete\nvalue) that will be substituted with the concrete runtime value each time a\nrequest executes. We also need to declare the type of the data so that it can\nbe cast correctly for the database."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'import { makeAddPgTableConditionPlugin } from "postgraphile/utils";\nimport { TYPES } from "postgraphile/@dataplan/pg";\n\nconst PetsCountPlugin = makeAddPgTableConditionPlugin(\n  { schemaName: "graphile_utils", tableName: "users" },\n  "petCountAtLeast",\n  (build) => ({\n    description: "Filters users to those that have at least this many pets",\n    type: build.graphql.GraphQLInt,\n  }),\n  (value, helpers) => {\n    const { sqlTableAlias, sql, $condition } = helpers;\n    const $val = value.get();\n    return sql.fragment`(select count(*) from graphile_utils.pets where pets.user_id = ${sqlTableAlias}.id) >= ${$condition.placeholder(\n      $val,\n      TYPES.int,\n    )}`;\n  },\n);\n')))}c.isMDXComponent=!0}}]);