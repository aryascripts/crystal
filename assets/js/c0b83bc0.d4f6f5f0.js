"use strict";(self.webpackChunk_localrepo_star_website=self.webpackChunk_localrepo_star_website||[]).push([[9381],{876:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var i=n(2784);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=i.createContext({}),p=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=p(e.components);return i.createElement(s.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},h=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=p(n),h=r,m=c["".concat(s,".").concat(h)]||c[h]||d[h]||a;return n?i.createElement(m,o(o({ref:t},u),{},{components:n})):i.createElement(m,o({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,o=new Array(a);o[0]=h;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[c]="string"==typeof e?e:r,o[1]=l;for(var p=2;p<a;p++)o[p]=n[p];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}h.displayName="MDXCreateElement"},8583:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>l,toc:()=>p});var i=n(7896),r=(n(2784),n(876));const a={sidebar_position:2,title:"Plugin"},o="Graphile Config Plugin",l={unversionedId:"plugin",id:"plugin",title:"Plugin",description:"A plugin is responsible for adding capabilities to a Graphile package. Each",source:"@site/graphile-config/plugin.md",sourceDirName:".",slug:"/plugin",permalink:"/graphile-config/plugin",draft:!1,editUrl:"https://github.com/graphile/crystal/tree/main/utils/website/graphile-config/plugin.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,title:"Plugin"},sidebar:"tutorialSidebar",previous:{title:"Graphile Config",permalink:"/graphile-config/"},next:{title:"Preset",permalink:"/graphile-config/preset"}},s={},p=[],u={toc:p},c="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(c,(0,i.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"graphile-config-plugin"},"Graphile Config Plugin"),(0,r.kt)("p",null,"A plugin is responsible for adding capabilities to a Graphile package. Each\nGraphile package will register its own \"scope\" within the plugin's spec;\ncommonly these scopes may contain capabilities such as 'hooks' or 'events' which\nthis package attempts to standardize."),(0,r.kt)("p",null,"A Graphile Plugin is an object with the following properties:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"name")," (",(0,r.kt)("inlineCode",{parentName:"li"},"string"),"): The name of the plugin, this must be unique and will be\nused for capabilities such as ",(0,r.kt)("inlineCode",{parentName:"li"},"skipPlugins")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"version")," (",(0,r.kt)("inlineCode",{parentName:"li"},"string"),"): a semver-compliant version for the plugin, this would\nnormally match the version in the ",(0,r.kt)("inlineCode",{parentName:"li"},"package.json")," but does not need to (e.g. if\nthe module in question contains multiple plugins)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"description")," (optional ",(0,r.kt)("inlineCode",{parentName:"li"},"string"),"): human-readable description of the plugin in\n",(0,r.kt)("a",{parentName:"li",href:"https://commonmark.org/"},"CommonMark")," (markdown) format."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"provides")," (optional ",(0,r.kt)("inlineCode",{parentName:"li"},"string[]"),'): an optional list of "feature labels" that\nthis plugin provides, this is primarily used to govern the order in which the\nplugin (and its hooks and events) are executed. Feature labels must be unique\nwithin the list of loaded plugins, for example two different plugins should\nnot both provide ',(0,r.kt)("inlineCode",{parentName:"li"},"subscriptions"),". If unspecified, defaults to the plugin name."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"after")," (optional ",(0,r.kt)("inlineCode",{parentName:"li"},"string[]"),"): indicates that this plugin should be loaded\nafter the named features (if present)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"before")," (optional ",(0,r.kt)("inlineCode",{parentName:"li"},"string[]"),"): indicates that this plugin should be loaded\nbefore the named features (if present)")),(0,r.kt)("p",null,"In addition to the properties above, plugins may also contain properties for\neach of the supported scopes, for example there may be a ",(0,r.kt)("inlineCode",{parentName:"p"},"postgraphile")," scope\nfor PostGraphile, or a ",(0,r.kt)("inlineCode",{parentName:"p"},"worker")," scope for Graphile Worker. The value for each of\nthese scopes will be an object, but the contents of that object are defined by\nthe projects in question."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"NOTE"),': Currently this plugin system is only intended for Graphile usage (and\nthus we do not need to "reserve" keys), but should you find it useful for other\nprojects please reach out via GitHub issues and we can discuss what\'s necessary\nto make this more universal. Should you decide to not heed this advice, please\nat least make sure that the "scopes" you add are namespaced in a way to avoid\nfuture conflicts with features we may wish to add.'))}d.isMDXComponent=!0}}]);