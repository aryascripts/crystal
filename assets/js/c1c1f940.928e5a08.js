"use strict";(self.webpackChunk_localrepo_postgraphile_website=self.webpackChunk_localrepo_postgraphile_website||[]).push([[4867],{30876:(e,t,n)=>{n.d(t,{Zo:()=>h,kt:()=>c});var r=n(2784);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},h=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},u="mdxType",g={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,h=s(e,["components","mdxType","originalType","parentName"]),u=p(n),d=o,c=u["".concat(l,".").concat(d)]||u[d]||g[d]||a;return n?r.createElement(c,i(i({ref:t},h),{},{components:n})):r.createElement(c,i({ref:t},h))}));function c(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:o,i[1]=s;for(var p=2;p<a;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},45830:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>g,frontMatter:()=>a,metadata:()=>s,toc:()=>p});var r=n(7896),o=(n(2784),n(30876));const a={layout:"page",path:"/postgraphile/debugging/",title:"Debugging"},i=void 0,s={unversionedId:"debugging",id:"version-4.x/debugging",title:"Debugging",description:"When something's wrong with your app it can be hugely frustrating; so we want to",source:"@site/versioned_docs/version-4.x/debugging.md",sourceDirName:".",slug:"/debugging",permalink:"/postgraphile/current/debugging",draft:!1,editUrl:"https://github.com/graphile/crystal/tree/main/postgraphile/website/versioned_docs/version-4.x/debugging.md",tags:[],version:"4.x",frontMatter:{layout:"page",path:"/postgraphile/debugging/",title:"Debugging"},sidebar:"docs",previous:{title:"Reserved Keywords / Table Names",permalink:"/postgraphile/current/reserved-keywords"},next:{title:"Smart Tags",permalink:"/postgraphile/current/smart-tags"}},l={},p=[{value:"Step 1: check you&#39;re requesting what you think you&#39;re requesting",id:"step-1-check-youre-requesting-what-you-think-youre-requesting",level:3},{value:"Step 2: try your query in GraphiQL",id:"step-2-try-your-query-in-graphiql",level:3},{value:"Step 3: increase PostGraphile&#39;s logging",id:"step-3-increase-postgraphiles-logging",level:3},{value:"Step 4: viewing the generated SQL",id:"step-4-viewing-the-generated-sql",level:3},{value:"Via PostGraphiQL &#39;Explain&#39;",id:"via-postgraphiql-explain",level:4},{value:"Via <code>DEBUG</code> envvar",id:"via-debug-envvar",level:4},{value:"Other <code>DEBUG</code> envvars",id:"other-debug-envvars",level:3},{value:"Advanced: getting your hands dirty",id:"advanced-getting-your-hands-dirty",level:3}],h={toc:p},u="wrapper";function g(e){let{components:t,...n}=e;return(0,o.kt)(u,(0,r.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"When something's wrong with your app it can be hugely frustrating; so we want to\nmake it as easy as we can for you to get to the bottom of these issues!"),(0,o.kt)("h3",{id:"step-1-check-youre-requesting-what-you-think-youre-requesting"},"Step 1: check you're requesting what you think you're requesting"),(0,o.kt)("p",null,"Often issues occur because your client code isn't doing what you think it's\ndoing. The first step here is to determine exactly what's being sent over the\nnetwork. If you're building a website you can easily use Google Chrome's Network\nDevtools to see exactly what's being sent and received."),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Open your website in Chrome"),(0,o.kt)("li",{parentName:"ol"},"Right click, and select 'Inspect'"),(0,o.kt)("li",{parentName:"ol"},"Select the 'Network' tab in the developer tools"),(0,o.kt)("li",{parentName:"ol"},"In the filter box, enter '/graphql' (or whatever path you have configured\nyour API to use)"),(0,o.kt)("li",{parentName:"ol"},"Ensure that 'All' is selected to the right of the filter box"),(0,o.kt)("li",{parentName:"ol"},"Trigger your GraphQL request (either by reloading the page or by clicking\nthe relevant element on the screen)"),(0,o.kt)("li",{parentName:"ol"},"Review the network requests that have arrived to ensure they're what you'd\nexpect, that no variables are unexpectedly null, that the relevant access\ntokens are being set in the request headers, etc")),(0,o.kt)("h3",{id:"step-2-try-your-query-in-graphiql"},"Step 2: try your query in GraphiQL"),(0,o.kt)("p",null,"It sometimes helps to try doing the same thing a different way, and this is\nwhere GraphiQL comes in handy. Take the query you're running and execute it via\nGraphiQL. Is it producing the same issue? Note that you can set headers in\nGraphiQL by ensuring that you're using the enhanced GraphiQL\n(",(0,o.kt)("inlineCode",{parentName:"p"},"--enhance-graphiql")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"enhanceGraphiql: true"),") and pressing the ",(0,o.kt)("inlineCode",{parentName:"p"},"Headers"),"\nbutton."),(0,o.kt)("h3",{id:"step-3-increase-postgraphiles-logging"},"Step 3: increase PostGraphile's logging"),(0,o.kt)("p",null,"Note that the errors are sent through to the GraphQL client (they're not output\non the server by default) so you'll need to reproduce this from your client so\nyou can see the output (or use a network inspector such as WireShark if\nmodifying the client is not an option). If you're using PostGraphile as a\nlibrary then you can use ",(0,o.kt)("inlineCode",{parentName:"p"},"handleErrors")," to output the error details on the\nserver side (and to manipulate them before they're returned to the client)."),(0,o.kt)("p",null,"You probably don't want this level of debugging on production as the results are\nsent to the client and it may leak implementation details you wish to keep\nprivate."),(0,o.kt)("p",null,"Use the following CLI options with PostGraphile:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"--show-error-stack")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"--extended-errors hint,detail,errcode")," (other options available\n",(0,o.kt)("a",{parentName:"li",href:"https://github.com/brianc/node-postgres/blob/7de137f9f88611b8fcae5539aa90b6037133f1f1/lib/connection.js#L565-L580"},"here"),")"),(0,o.kt)("li",{parentName:"ul"},"or")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"--extended-errors severity,code,detail,hint,position,internalPosition,internalQuery,where,schema,table,column,dataType,constraint,file,line,routine\n")),(0,o.kt)("p",null,"or for the library:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"showErrorStack: true")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"extendedErrors: ['hint', 'detail', 'errcode']")," (other options available\n",(0,o.kt)("a",{parentName:"li",href:"https://github.com/brianc/node-postgres/blob/7de137f9f88611b8fcae5539aa90b6037133f1f1/lib/connection.js#L565-L580"},"here"),")"),(0,o.kt)("li",{parentName:"ul"},"or")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"extendedErrors: ['severity', 'code', 'detail', 'hint', 'position', 'internalPosition', 'internalQuery', 'where', 'schema', 'table', 'column', 'dataType', 'constraint', 'file', 'line', 'routine']\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"or use a custom ",(0,o.kt)("inlineCode",{parentName:"li"},"handleErrors")," function to explore even more details about the\nerrors (or to log them server side), note this overrides the above options.\nYou might be interested in the ",(0,o.kt)("inlineCode",{parentName:"li"},"originalError")," property on the GraphQLErrors\nyou're handed.")),(0,o.kt)("h3",{id:"step-4-viewing-the-generated-sql"},"Step 4: viewing the generated SQL"),(0,o.kt)("p",null,"Assuming that the error is coming from within the database, you can see what SQL\nstatements PostGraphile is generating."),(0,o.kt)("h4",{id:"via-postgraphiql-explain"},"Via PostGraphiQL 'Explain'"),(0,o.kt)("p",null,'One way to do so is via the "Explain" feature available in PostGraphiQL since\nPostGraphile v4.5. To use this, you must run PostGraphile with\n',(0,o.kt)("inlineCode",{parentName:"p"},"--enhance-graphiql --allow-explain")," (or for the library\n",(0,o.kt)("inlineCode",{parentName:"p"},"enhanceGraphiql: true, allowExplain: (req) => { return true; }"),"). It is\nrecommended that you do not use this functionality in production; however if you\nchoose to do so you can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"allowExplain")," callback to determine which\nrequests can use this functionality."),(0,o.kt)("p",null,"Once enabled, visit GraphiQL (by default this will be at\nhttp://localhost:5000/graphiql) and click the 'Explain disabled' button to\ntoggle it into 'Explain ON'. You should see the query that was executed and the\nassociated query plan:"),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/129910/68597446-df861a00-0494-11ea-801c-8741362dafa4.png",alt:"PostGraphiQL with Explain ON"})),(0,o.kt)("h4",{id:"via-debug-envvar"},"Via ",(0,o.kt)("inlineCode",{parentName:"h4"},"DEBUG")," envvar"),(0,o.kt)("p",null,"Another way is to set the relevant ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/visionmedia/debug"},"DEBUG"),"\nenvironmental variable before running PostGraphile. For example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"# Bash (Linux, macOS, etc)\nexport DEBUG=\"postgraphile:postgres\"\npostgraphile -c postgres://...\n\n# Windows Console\nset DEBUG=postgraphile:postgres & postgraphile -c postgres://...\n\n# Windows PowerShell\n$env:DEBUG='postgraphile:postgres'; postgraphile -c postgres://...\n")),(0,o.kt)("p",null,"Note that this works with PostGraphile CLI and also when using PostGraphile as\nan express middleware (in which case replace the\n",(0,o.kt)("inlineCode",{parentName:"p"},"postgraphile -c postgres://...")," command with your own server startup command)."),(0,o.kt)("p",null,"To find details of any errors thrown whilst executing SQL, use:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'# Bash (Linux, macOS, etc)\nexport DEBUG="postgraphile:postgres,postgraphile:postgres:error"\npostgraphile -c postgres://...\n  # or:\nexport DEBUG="postgraphile:postgres*"\npostgraphile -c postgres://...\n\n# Windows Console\nset DEBUG=postgraphile:postgres,postgraphile:postgres:error & postgraphile -c postgres://...\n  #or\nset DEBUG=postgraphile:postgres* & postgraphile -c postgres://...\n\n# Windows PowerShell\n$env:DEBUG = "postgraphile:postgres,postgraphile:postgres:error"; postgraphile -c postgres://...\n  #or\n$env:DEBUG = "postgraphile:postgres*"; postgraphile -c postgres://...\n')),(0,o.kt)("h3",{id:"other-debug-envvars"},"Other ",(0,o.kt)("inlineCode",{parentName:"h3"},"DEBUG")," envvars"),(0,o.kt)("p",null,"We use a lot of DEBUG envvars for different parts of the system. Here's some of\nthe ones you might care about:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"postgraphile:cli")," - informs about plugins being loaded"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"postgraphile:graphql")," - prints out the full GraphQL query after validation\nand before execution"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"postgraphile:request")," - prints out statuses during the HTTP request\nlife-cycle"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"postgraphile:postgres")," - prints out every SQL statement that's issued to the\ndatabase (does not include placeholder values)"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"postgraphile:postgres:notice")," - outputs any notices generated whilst\nexecuting SQL statements (very useful for tracing functions/triggers)"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"postgraphile:postgres:error")," - outputs any errors generated whilst executing\nSQL statements"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"graphile-builder")," - desperately in need of renaming, this hook is extremely\nuseful for understanding the order in which hooks execute, and how hook\nexecutions can nest - a must for people getting started with graphile-build\nplugins"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"graphile-build-pg")," - prints out various things, many of which should not\noccur. Also used to output errors from the update/delete mutations (where\n",(0,o.kt)("inlineCode",{parentName:"li"},"null")," is returned to GraphQL)"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"graphile-build-pg:warn")," - prints out warnings that occur during schema\ngeneration; these warnings might hint at field conflicts and similar issues"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"graphile-build-pg:sql")," - prints out ",(0,o.kt)("em",{parentName:"li"},"some")," SQL statements, you probably want\n",(0,o.kt)("inlineCode",{parentName:"li"},"postgraphile:postgres")," instead"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"graphql-parse-resolve-info")," - far more information than you could possibly\nneed regarding how we process the resolveInfo / AST")),(0,o.kt)("p",null,"To enable these DEBUG modes, join them with commas when setting a DEBUG envvar,\nthen run PostGraphile or your Node.js server in the same terminal:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'# Bash (Linux, macOS, etc)\nexport DEBUG="postgraphile:graphql,postgraphile:request,postgraphile:postgres*"\npostgraphile -c postgres://...\n\n# Windows Console\nset DEBUG=postgraphile:graphql,postgraphile:request,postgraphile:postgres* & postgraphile -c postgres://...\n\n# Windows PowerShell\n$env:DEBUG = "postgraphile:graphql,postgraphile:request,postgraphile:postgres*"; postgraphile -c postgres://...\n')),(0,o.kt)("h3",{id:"advanced-getting-your-hands-dirty"},"Advanced: getting your hands dirty"),(0,o.kt)("p",null,"If you're a plugin author, you think you've discovered an issue in PostGraphile,\nor you just like seeing how things work, you can use the Chrome Debug tools to\ndebug the node process - add breakpoints, break on exceptions, and step through\ncode execution."),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Visit ",(0,o.kt)("inlineCode",{parentName:"li"},"chrome://inspect")," in Google Chrome (we can't hyperlink it for\nsecurity reasons)."),(0,o.kt)("li",{parentName:"ol"},"Select 'Open dedicated DevTools for Node', a new devtools window should\nopen - don't close this!"),(0,o.kt)("li",{parentName:"ol"},"Run your server or PostGraphile via Node.js directly, in ",(0,o.kt)("inlineCode",{parentName:"li"},"--inspect")," mode,\ne.g.:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"# For globally installed PostGraphile:\nnode --inspect `which postgraphile` -c postgres://...\n\n# or for locally installed PostGraphile:\nnode --inspect node_modules/.bin/postgraphile -c postgres://...\n\n# or, if you have your own Node.js app in `server.js`:\nnode --inspect server.js\n")))}g.isMDXComponent=!0}}]);