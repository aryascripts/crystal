"use strict";(self.webpackChunk_localrepo_postgraphile_website=self.webpackChunk_localrepo_postgraphile_website||[]).push([[4573],{30876:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var r=n(2784);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),c=p(n),d=a,h=c["".concat(l,".").concat(d)]||c[d]||m[d]||o;return n?r.createElement(h,i(i({ref:t},u),{},{components:n})):r.createElement(h,i({ref:t},u))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[c]="string"==typeof e?e:a,i[1]=s;for(var p=2;p<o;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},59570:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var r=n(7896),a=(n(2784),n(30876));const o={layout:"page",path:"/postgraphile/performance/",title:"Performance"},i=void 0,s={unversionedId:"performance",id:"version-4.x/performance",title:"Performance",description:"On a Digital Ocean compute-optimised droplet with 8GB of RAM, running",source:"@site/versioned_docs/version-4.x/performance.md",sourceDirName:".",slug:"/performance",permalink:"/postgraphile/current/performance",draft:!1,editUrl:"https://github.com/graphile/crystal/tree/main/postgraphile/website/versioned_docs/version-4.x/performance.md",tags:[],version:"4.x",frontMatter:{layout:"page",path:"/postgraphile/performance/",title:"Performance"},sidebar:"docs",previous:{title:"Usage - Schema Only",permalink:"/postgraphile/current/usage-schema"},next:{title:"Requirements",permalink:"/postgraphile/current/requirements"}},l={},p=[{value:"How is it so fast?",id:"how-is-it-so-fast",level:3},{value:"How can I improve performance of my PostGraphile API?",id:"how-can-i-improve-performance-of-my-postgraphile-api",level:3}],u={toc:p},c="wrapper";function m(e){let{components:t,...n}=e;return(0,a.kt)(c,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"On a Digital Ocean compute-optimised droplet with 8GB of RAM, running\nPostGraphile, PostgreSQL ",(0,a.kt)("em",{parentName:"p"},"and")," the benchmarking software all through Docker,\nPostGraphile running in cluster mode over 4 vCPUs can handle 3250 requests per\nsecond for the following simple query:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-graphql"},"query tracks_media_first_20 {\n  allTracksList(first: 20) {\n    trackId\n    name\n  }\n}\n")),(0,a.kt)("p",null,"For a more complex 3-level query, it can handle about 1450 requests per second:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-graphql"},"query albums_tracks_genre_some {\n  allAlbumsList(condition: { artistId: 127 }) {\n    artistId\n    title\n    tracksByAlbumIdList {\n      trackId\n      name\n      genreByGenreId {\n        name\n      }\n    }\n  }\n}\n")),(0,a.kt)("p",null,"And for a very heavy query such as the following one, it can still serve 550\nrequests per second from a single server, all while maintaining sub-50ms 95th\npercentile latency:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-graphql"},"query prisma_deeplyNested {\n  allAlbumsList(condition: { artistId: 127 }) {\n    albumId\n    title\n    tracksByAlbumIdList {\n      trackId\n      name\n      genreByGenreId {\n        name\n      }\n    }\n    artistByArtistId {\n      albumsByArtistIdList {\n        tracksByAlbumIdList {\n          mediaTypeByMediaTypeId {\n            name\n          }\n          genreByGenreId {\n            name\n          }\n        }\n      }\n    }\n  }\n}\n")),(0,a.kt)("p",null,"To read about how PostGraphile's performance compares to that of Prisma, and how\nto validate the results for yourself, check out\n",(0,a.kt)("a",{parentName:"p",href:"https://medium.com/@Benjie/how-i-made-postgraphile-faster-than-prisma-graphql-server-in-8-hours-e66b4c511160"},"this post"),"\non Medium."),(0,a.kt)("h3",{id:"how-is-it-so-fast"},"How is it so fast?"),(0,a.kt)("p",null,"We leverage graphile-build's\n",(0,a.kt)("a",{parentName:"p",href:"https://graphile.org/graphile-build/look-ahead/"},"look-ahead")," features when\nresolving a GraphQL request so that a single root level query, no matter how\nnested, is compiled into just one SQL query. PostgreSQL has an excellent query\nplanner which optimises and executes this query for us, avoiding the need for\nmultiple round-trips to the database and thus solving the N+1 problem that is\nfound in many GraphQL APIs."),(0,a.kt)("p",null,"For example the following query would be compiled into one SQL statement:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-graphql"},"{\n  allPosts {\n    edges {\n      node {\n        id\n        title\n        author: userByAuthorId {\n          ...UserDetails\n        }\n        comments {\n          text\n          author: userByAuthorId {\n            ...UserDetails\n            recentComments {\n              date\n              post: postByPostId {\n                title\n                author {\n                  ...UserDetails\n                }\n              }\n              text\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nfragment UserDetails on User {\n  id\n  username\n  bio: bioByUserId {\n    preamble\n    location\n    description\n  }\n}\n")),(0,a.kt)("h3",{id:"how-can-i-improve-performance-of-my-postgraphile-api"},"How can I improve performance of my PostGraphile API?"),(0,a.kt)("p",null,"Chances are that any performance issues you have are coming from your database\nschema, so standard PostgreSQL optimisation techniques apply. Here's a few\nthings you might want to try:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Throw more RAM at your database server"),(0,a.kt)("li",{parentName:"ul"},"Make sure your database server is using an SSD"),(0,a.kt)("li",{parentName:"ul"},"Make sure you have added the correct type of database indexes in the correct\nplaces (references, filters, order-by)"),(0,a.kt)("li",{parentName:"ul"},"Note: making a column a reference to a foreign key does ",(0,a.kt)("strong",{parentName:"li"},"not")," add an index\nto that column, so for example ",(0,a.kt)("inlineCode",{parentName:"li"},"User.postsByAuthorId")," will be slow unless\nyou've manually added an index to ",(0,a.kt)("inlineCode",{parentName:"li"},"posts.author_id")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"VACUUM")," your database tables"),(0,a.kt)("li",{parentName:"ul"},"Check your RLS policies aren't too expensive, consider optimising them"),(0,a.kt)("li",{parentName:"ul"},"Optimise your computed column functions"),(0,a.kt)("li",{parentName:"ul"},"Consider ",(0,a.kt)("inlineCode",{parentName:"li"},"security definer")," on functions to bypass RLS (but make sure you add\nyour own auth checks!)"),(0,a.kt)("li",{parentName:"ul"},"Use the envvar ",(0,a.kt)("inlineCode",{parentName:"li"},"DEBUG=graphile-build-pg:sql")," to show the SQL statements that\nare being executed; e.g.\n",(0,a.kt)("inlineCode",{parentName:"li"},"DEBUG=graphile-build-pg:sql postgraphile -c postgres:///mydb"))),(0,a.kt)("p",null,"If you need help optimising your PostgreSQL database or PostGraphile API, please\n",(0,a.kt)("a",{parentName:"p",href:"https://graphile.org/support/"},"get in touch"),"."))}m.isMDXComponent=!0}}]);