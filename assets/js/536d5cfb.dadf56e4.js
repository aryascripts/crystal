"use strict";(self.webpackChunk_localrepo_grafast_website=self.webpackChunk_localrepo_grafast_website||[]).push([[1078],{36702:(e,t,n)=>{n.d(t,{Z:()=>i});var a=n(48084),r=n(2784);a.o.initialize({startOnLoad:!0,flowchart:{diagramPadding:8,nodeSpacing:20,rankSpacing:40,htmlLabels:!0}});const i=e=>{let{chart:t}=e;return(0,r.useEffect)((()=>{a.o.contentLoaded()}),[]),r.createElement("div",{className:"mermaid"},t)}},99927:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>l,default:()=>m,frontMatter:()=>s,metadata:()=>o,toc:()=>u});var a=n(7896),r=(n(2784),n(30876)),i=n(36702);const s={toc_max_heading_level:4},l="loadOne",o={unversionedId:"step-library/standard-steps/loadOne",id:"step-library/standard-steps/loadOne",title:"loadOne",description:"Similar to DataLoader's load method, uses the given callback function to",source:"@site/grafast/step-library/standard-steps/loadOne.md",sourceDirName:"step-library/standard-steps",slug:"/step-library/standard-steps/loadOne",permalink:"/grafast/step-library/standard-steps/loadOne",draft:!1,editUrl:"https://github.com/graphile/crystal/tree/main/grafast/website/grafast/step-library/standard-steps/loadOne.md",tags:[],version:"current",frontMatter:{toc_max_heading_level:4},sidebar:"tutorialSidebar",previous:{title:"loadMany",permalink:"/grafast/step-library/standard-steps/loadMany"},next:{title:"node",permalink:"/grafast/step-library/standard-steps/node"}},d={},u=[{value:"Enhancements over DataLoader",id:"enhancements-over-dataloader",level:2},{value:"Attribute and parameter tracking",id:"attribute-and-parameter-tracking",level:3},{value:"Input/output equivalence",id:"inputoutput-equivalence",level:3},{value:"Usage",id:"usage",level:2},{value:"Basic usage",id:"basic-usage",level:3},{value:"Example callback",id:"example-callback",level:4},{value:"Advanced usage",id:"advanced-usage",level:3},{value:"Example callback (advanced)",id:"example-callback-advanced",level:4},{value:"Multiple steps",id:"multiple-steps",level:2}],p={toc:u},c="wrapper";function m(e){let{components:t,...n}=e;return(0,r.kt)(c,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"loadone"},"loadOne"),(0,r.kt)("p",null,"Similar to ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/graphql/dataloader"},"DataLoader"),"'s load method, uses the given callback function to\nread a single result from your business logic layer. To load a list, see\n",(0,r.kt)("a",{parentName:"p",href:"/grafast/step-library/standard-steps/loadMany"},(0,r.kt)("inlineCode",{parentName:"a"},"loadMany")),"."),(0,r.kt)("h2",{id:"enhancements-over-dataloader"},"Enhancements over DataLoader"),(0,r.kt)("p",null,"Thanks to the planning system in Gra",(0,r.kt)("em",{parentName:"p"},"fast"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"loadOne")," can expose features that\nare not possible in DataLoader."),(0,r.kt)("h3",{id:"attribute-and-parameter-tracking"},"Attribute and parameter tracking"),(0,r.kt)("p",null,"A ",(0,r.kt)("inlineCode",{parentName:"p"},"loadOne")," step (technically a ",(0,r.kt)("inlineCode",{parentName:"p"},"LoadedRecordStep"),") keeps track of the\nattribute names accessed via ",(0,r.kt)("inlineCode",{parentName:"p"},".get(attrName)")," and any parameters set via\n",(0,r.kt)("inlineCode",{parentName:"p"},".setParam(key, value)"),". This information will be passed through to your\ncallback function such that you may make more optimal calls to your backend\nbusiness logic, only retrieving the data you need."),(0,r.kt)("h3",{id:"inputoutput-equivalence"},"Input/output equivalence"),(0,r.kt)("p",null,"If you (optionally) pass an ",(0,r.kt)("inlineCode",{parentName:"p"},"ioEquivalence")," parameter to ",(0,r.kt)("inlineCode",{parentName:"p"},"loadOne")," (the second\nparameter) then you can use it to indicate which field(s) on the output is\nequivalent to the input(s). This enables an optimization where a chained fetch\ncan instead be performed in parallel if the child only depends on an output\nwhich is equivalent to an input. Hopefully an example will make this clearer..."),(0,r.kt)("p",null,"Imagine you're loading a user and their organization:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"{\n  currentUser {\n    id\n    name\n    friends {\n      id\n      name\n    }\n  }\n}\n")),(0,r.kt)("p",null,"You might have plan resolvers such as:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'const plans = {\n  Query: {\n    currentUser() {\n      const $currentUserId = context().get("userId");\n      return loadOne($currentUserId, batchGetUserById);\n    },\n  },\n  User: {\n    friends($user) {\n      const $userId = $user.get("id");\n      return loadMany($userId, batchGetFriendsByUserId);\n    },\n  },\n};\n')),(0,r.kt)("p",null,"In it's current state the system doesn't know that the ",(0,r.kt)("inlineCode",{parentName:"p"},'$user.get("id")')," is\nequivalent to the ",(0,r.kt)("inlineCode",{parentName:"p"},'context().get("userId")'),", so this would result in a chained\nfetch:"),(0,r.kt)(i.Z,{chart:'stateDiagram\n  direction LR\n  state "batchGetUserById" as currentUser\n  state "batchGetFriendsByUserId" as friends\n  [*] --\x3e currentUser\n  currentUser --\x3e friends\n',mdxType:"Mermaid"}),(0,r.kt)("p",null,"However, we can indicate that the output of the ",(0,r.kt)("inlineCode",{parentName:"p"},"loadOne")," step's ",(0,r.kt)("inlineCode",{parentName:"p"},"id")," property\n(",(0,r.kt)("inlineCode",{parentName:"p"},'$user.get("id")'),") is equivalent to its input (",(0,r.kt)("inlineCode",{parentName:"p"},'context().get("userId")'),"):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff",metastring:"{5-6}","{5-6}":!0},' const plans = {\n   Query: {\n     currentUser() {\n       const $currentUserId = context().get("userId");\n-      return loadOne($currentUserId, batchGetUserById);\n+      return loadOne($currentUserId, \'id\', batchGetUserById);\n     },\n   },\n   User: {\n     friends($user) {\n       const $userId = $user.get("id");\n       return loadMany($userId, batchGetFriendsByUserId);\n     },\n   },\n };\n')),(0,r.kt)("p",null,"Now the access to ",(0,r.kt)("inlineCode",{parentName:"p"},'$user.get("id")')," will be equivalent to\n",(0,r.kt)("inlineCode",{parentName:"p"},'context().get("userId")')," - we no longer need to wait for the ",(0,r.kt)("inlineCode",{parentName:"p"},"$user")," to load\nin order to fetch the friends:"),(0,r.kt)(i.Z,{chart:'stateDiagram\n  direction LR\n  state "batchGetUserById" as currentUser\n  state "batchGetFriendsByUserId" as friends\n  [*] --\x3e currentUser\n  [*] --\x3e friends\n',mdxType:"Mermaid"}),(0,r.kt)("h2",{id:"usage"},"Usage"),(0,r.kt)("h3",{id:"basic-usage"},"Basic usage"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const $userId = $post.get(\"author_id\");\nconst $user = loadOne($userId, batchGetUserById);\n// OR: const $user = loadOne($userId, 'id', batchGetUserById);\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"loadOne")," accepts two to four arguments. The first is the step that specifies\nwhich records to load (the ",(0,r.kt)("em",{parentName:"p"},"specifier step"),"), the last is the callback function called with these\nspecs responsible for loading them."),(0,r.kt)("p",null,"The callback function is called with two arguments, the first is a list of the\nvalues from the ",(0,r.kt)("em",{parentName:"p"},"specifier step")," and the second is options that may affect the\nfetching of the records."),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"For optimal results, we strongly recommend that the callback function is defined\nin a common location so that it can be reused over and over again, rather than\ndefined inline. This will allow LoadOneStep to optimise calls to this function.")),(0,r.kt)("p",null,"Optionally a penultimate argument (2nd of 3 arguments, or 3rd of 4 arguments)\ncan indicate the input/output equivalence - this can be:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"null")," to indicate no input/output equivalence"),(0,r.kt)("li",{parentName:"ul"},"a string to indicate that the same named property on the output is equivalent\nto the entire input plan"),(0,r.kt)("li",{parentName:"ul"},"if the step is a ",(0,r.kt)("inlineCode",{parentName:"li"},"list()")," (or similar) plan, an array containing a list of\nkeys (or null for no relation) on the output that are equivalent to the same\nentry in the input"),(0,r.kt)("li",{parentName:"ul"},"if the step is a ",(0,r.kt)("inlineCode",{parentName:"li"},"object()")," (or similar) plan, an object that maps between\nthe attributes of the object and the key(s) in the output that are equivalent\nto the given entry on the input")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="Example for a list step"',title:'"Example',for:!0,a:!0,list:!0,'step"':!0},'const $member = loadOne(\n  list([$organizationId, $userId]),\n  ["organization_id", "user_id"],\n  batchGetMemberByOrganizationIdAndUserId,\n);\n\n// - batchGetMemberByOrganizationIdAndUserId will be called with a list of\n//   2-tuples, the first value in each tuple being the organizationId and the\n//   second the userId.\n// - Due to the io equivalence (2nd argument):\n//   - `$member.get("organization_id")` will return `$organizationId` directly\n//   - `$member.get("user_id")` will return `$userId` directly\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="Example for an object step"',title:'"Example',for:!0,an:!0,object:!0,'step"':!0},'const $member = loadOne(\n  object({ oid: $organizationId, uid: $userId }),\n  { oid: "organization_id", uid: "user_id" },\n  batchGetMemberByOrganizationIdAndUserId,\n);\n\n// - batchGetMemberByOrganizationIdAndUserId will be called with a list of\n//   objects; each object will have the key `oid` set to an organization id,\n//   and the key `uid` set to the user ID.\n// - Due to the io equivalence (2nd argument):\n//   - `$member.get("organization_id")` will return the step used for `oid`\n//     (i.e. `$organizationId`) directly\n//   - Similarly `$member.get("user_id")` will return `$userId` directly\n')),(0,r.kt)("h4",{id:"example-callback"},"Example callback"),(0,r.kt)("p",null,"An example of the callback function might be:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"async function batchGetUserById(ids, { attributes }) {\n  // Your business logic would be called here; e.g. this might be the same\n  // function that your DataLoaders would call, except we can pass additional\n  // information to it.\n\n  // For example, load from the database\n  const rows = await db.query(\n    sql`SELECT id, ${columnsToSql(attributes)} FROM users WHERE id = ANY($1);`,\n    [ids],\n  );\n\n  // Ensure you return the same number of results, and in the same order!\n  return ids.map((id) => rows.find((row) => row.id === id));\n}\n")),(0,r.kt)("h3",{id:"advanced-usage"},"Advanced usage"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'const $userId = $post.get("author_id");\nconst $dbClient = context().get("dbClient");\nconst $user = loadOne($userId, $dbClient, "id", batchGetUserFromDbById);\n// OR: const $user = loadOne($userId, $dbClient, batchGetUserFromDbById);\n')),(0,r.kt)("p",null,'In addition to the forms seen in "Basic usage" above, you can pass a second\nstep to ',(0,r.kt)("inlineCode",{parentName:"p"},"loadOne"),". This second step must be a ",(0,r.kt)("a",{parentName:"p",href:"/grafast/step-classes#addUnaryDependency"},(0,r.kt)("strong",{parentName:"a"},"unary\nstep")),", meaning that it must represent\nexactly one value across the entire request (not a batch of values like most\nsteps). Since we know it will have exactly one value, we can pass it into the\ncallback as a single value and our callback will be able to use it directly\nwithout having to perform any manual grouping."),(0,r.kt)("p",null,"This unary dependency is useful for fixed values (for example, those from\nGraphQL field arguments) and values on the GraphQL context such as clients to\nvarious APIs and other data sources."),(0,r.kt)("h4",{id:"example-callback-advanced"},"Example callback (advanced)"),(0,r.kt)("p",null,"An example of the callback function might be:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"async function batchGetUserFromDbById(ids, { attributes, unary }) {\n  const dbClient = unary;\n\n  const rows = await dbClient.query(\n    sql`SELECT id, ${columnsToSql(attributes)} FROM users WHERE id = ANY($1);`,\n    [ids],\n  );\n\n  return ids.map((id) => rows.find((row) => row.id === id));\n}\n")),(0,r.kt)("h2",{id:"multiple-steps"},"Multiple steps"),(0,r.kt)("p",null,"The ",(0,r.kt)("a",{parentName:"p",href:"./list"},(0,r.kt)("inlineCode",{parentName:"a"},"list()"))," or ",(0,r.kt)("a",{parentName:"p",href:"./object"},(0,r.kt)("inlineCode",{parentName:"a"},"object()"))," step can be used if you need\nto pass the value of more than one step into your callback:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'const $isAdmin = $user.get("admin");\nconst $stripeId = $customer.get("stripe_id");\nconst $last4 = loadOne(list([$isAdmin, $stripeId]), getLast4FromStripeIfAdmin);\n')),(0,r.kt)("p",null,"The first argument to the ",(0,r.kt)("inlineCode",{parentName:"p"},"getLast4FromStripeIfAdmin")," callback will then be an\narray of all the tuples of values from these plans: ",(0,r.kt)("inlineCode",{parentName:"p"},"ReadonlyArray<readonly [isAdmin:\nboolean, stripeId: string]>"),". The callback might look something like:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"async function getLast4FromStripeIfAdmin(tuples) {\n  const stripeIds = uniq(\n    tuples\n      .filter(([isAdmin, stripeId]) => isAdmin)\n      .map(([isAdmin, stripeId]) => stripeId),\n  );\n  const last4s = await getLast4FromStripeIds(stripeIds);\n\n  return tuples.map(([isAdmin, stripeId]) => {\n    if (!isAdmin) return null;\n    const index = stripeIds.indexOf(stripeId);\n    return last4s[index];\n  });\n}\n")),(0,r.kt)("p",null,"This technique can also be used with the unary step in advanced usage."))}m.isMDXComponent=!0}}]);