"use strict";(self.webpackChunk_localrepo_postgraphile_website=self.webpackChunk_localrepo_postgraphile_website||[]).push([[941],{30876:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>m});var r=t(2784);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),p=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},c=function(e){var n=p(e.components);return r.createElement(s.Provider,{value:n},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},f=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),u=p(t),f=a,m=u["".concat(s,".").concat(f)]||u[f]||d[f]||i;return t?r.createElement(m,l(l({ref:n},c),{},{components:t})):r.createElement(m,l({ref:n},c))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,l=new Array(i);l[0]=f;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o[u]="string"==typeof e?e:a,l[1]=o;for(var p=2;p<i;p++)l[p]=t[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},78281:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var r=t(7896),a=(t(2784),t(30876));const i={layout:"page",path:"/postgraphile/make-add-inflectors-plugin/",title:"makeAddInflectorsPlugin (graphile-utils)"},l=void 0,o={unversionedId:"make-add-inflectors-plugin",id:"version-4.x/make-add-inflectors-plugin",title:"makeAddInflectorsPlugin (graphile-utils)",description:"NOTE: this documentation applies to PostGraphile v4.1.0+",source:"@site/versioned_docs/version-4.x/make-add-inflectors-plugin.md",sourceDirName:".",slug:"/make-add-inflectors-plugin",permalink:"/postgraphile/current/make-add-inflectors-plugin",draft:!1,editUrl:"https://github.com/graphile/crystal/tree/main/postgraphile/website/versioned_docs/version-4.x/make-add-inflectors-plugin.md",tags:[],version:"4.x",frontMatter:{layout:"page",path:"/postgraphile/make-add-inflectors-plugin/",title:"makeAddInflectorsPlugin (graphile-utils)"},sidebar:"docs",previous:{title:"GraphQL Schema Plugins",permalink:"/postgraphile/current/extending"},next:{title:"makeChangeNullabilityPlugin (graphile-utils)",permalink:"/postgraphile/current/make-change-nullability-plugin"}},s={},p=[{value:"Syntax",id:"syntax",level:3},{value:"Example",id:"example",level:3},{value:"Where are the default inflectors defined?",id:"where-are-the-default-inflectors-defined",level:3}],c={toc:p},u="wrapper";function d(e){let{components:n,...t}=e;return(0,a.kt)(u,(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"NOTE: this documentation applies to PostGraphile v4.1.0+")),(0,a.kt)("p",null,"If you're not happy with the default naming conventions in PostGraphile (or if\nyou want to extend PostGraphile's functionality and use the inflection system to\ndo so), you can use ",(0,a.kt)("inlineCode",{parentName:"p"},"makeAddInflectorsPlugin")," from ",(0,a.kt)("inlineCode",{parentName:"p"},"graphile-utils"),"."),(0,a.kt)("p",null,"Please see the ",(0,a.kt)("a",{parentName:"p",href:"./inflection/"},"inflection article")," for more information on\ninflection in PostGraphile."),(0,a.kt)("h3",{id:"syntax"},"Syntax"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"interface Inflectors {\n  [str: string]: (...args: Array<any>) => string;\n}\n\ntype InflectorsGenerator = (\n  inflection: Inflectors,\n  build: Build,\n  options: Options,\n) => Inflectors;\n\nfunction makeAddInflectorsPlugin(\n  additionalInflectorsOrGenerator: Inflectors | InflectorsGenerator,\n  replace = false,\n): Plugin;\n")),(0,a.kt)("p",null,"By default, this plugin is for adding new inflectors; however if you pass ",(0,a.kt)("inlineCode",{parentName:"p"},"true"),"\nas the second argument then it can be used for replacing (or wrapping) existing\ninflectors."),(0,a.kt)("p",null,'You can pass either a new inflectors object to makeAddInflectorsPlugin, or if\nyou need to call the previous inflector you\'re replacing then you can pass an\n"inflectors generator" function which will be passed the whole inflectors\nobject. NOTE: your new inflectors will be merged into this object, so if you\nneed to call the old inflectors from the new ones you must take a copy of them\nwhich you can do with "dereferencing," but be sure to use ',(0,a.kt)("inlineCode",{parentName:"p"},".call(this, ...)")," to\nkeep the ",(0,a.kt)("inlineCode",{parentName:"p"},"this")," binding correct; e.g.:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'const { makeAddInflectorsPlugin } = require("graphile-utils");\n\nmodule.exports = makeAddInflectorsPlugin((inflectors) => {\n  // Here \'enumName\' is dereferenced to \'oldEnumName\' from the existing\n  // inflectors.\n  const { enumName: oldEnumName } = inflectors;\n\n  return {\n    enumName(value: string) {\n      // By the time we get here, `inflectors.enumName` refers to this very\n      // method, so we must call `oldEnumName` rather than\n      // `inflectors.enumName` otherwise we will get a "Maximum call stack size\n      // exceeded" error.\n\n      // Further, we must ensure that the value of `this` is passed through\n      // otherwise the old inflector cannot reference other inflectors.\n\n      return oldEnumName.call(this, value.replace(/\\./g, "_"));\n    },\n  };\n}, true);\n')),(0,a.kt)("h3",{id:"example"},"Example"),(0,a.kt)("p",null,"If you want ",(0,a.kt)("inlineCode",{parentName:"p"},"*Patch")," types to instead be called ",(0,a.kt)("inlineCode",{parentName:"p"},"*ChangeSet")," you could make a\nplugin such as this one:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:"{6-8}","{6-8}":!0},'// MyInflectionPlugin.js\nconst { makeAddInflectorsPlugin } = require("graphile-utils");\n\nmodule.exports = makeAddInflectorsPlugin(\n  {\n    patchType(typeName: string) {\n      return this.upperCamelCase(`${typeName}-change-set`);\n    },\n  },\n  /* Passing true here allows the plugin to overwrite\n   * existing inflectors.\n   */\n  true,\n);\n\n// Load this plugin with `postgraphile --append-plugins /path/to/MyInflectionPlugin.js`\n')),(0,a.kt)("h3",{id:"where-are-the-default-inflectors-defined"},"Where are the default inflectors defined?"),(0,a.kt)("p",null,"The default Graphile Engine inflectors (",(0,a.kt)("inlineCode",{parentName:"p"},"pluralize"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"singularize"),",\n",(0,a.kt)("inlineCode",{parentName:"p"},"upperCamelCase"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"camelCase")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"constantCase"),") can be found\n",(0,a.kt)("a",{parentName:"p",href:"https://github.com/graphile/graphile-engine/blob/v4.4.4/packages/graphile-build/src/makeNewBuild.js#L929-L997"},"in ",(0,a.kt)("inlineCode",{parentName:"a"},"makeNewBuild.js")),"."),(0,a.kt)("p",null,"The additional inflectors used in PostGraphile can be found\n",(0,a.kt)("a",{parentName:"p",href:"https://github.com/graphile/graphile-engine/blob/v4.4.4/packages/graphile-build-pg/src/plugins/PgBasicsPlugin.js#L383-L874"},"in ",(0,a.kt)("inlineCode",{parentName:"a"},"PgBasicsPlugin.js")),",\nbut also\n",(0,a.kt)("a",{parentName:"p",href:"https://github.com/graphile/graphile-engine/search?q=%22hook%20inflection%22"},"some other places"),"\nThere's a lot of them!"))}d.isMDXComponent=!0}}]);