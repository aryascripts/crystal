"use strict";(self.webpackChunk_localrepo_postgraphile_website=self.webpackChunk_localrepo_postgraphile_website||[]).push([[2627],{30876:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>m});var o=t(2784);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,o,a=function(e,n){if(null==e)return{};var t,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var p=o.createContext({}),s=function(e){var n=o.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},c=function(e){var n=s(e.components);return o.createElement(p.Provider,{value:n},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},g=o.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,p=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=s(t),g=a,m=u["".concat(p,".").concat(g)]||u[g]||d[g]||r;return t?o.createElement(m,l(l({ref:n},c),{},{components:t})):o.createElement(m,l({ref:n},c))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,l=new Array(r);l[0]=g;var i={};for(var p in n)hasOwnProperty.call(n,p)&&(i[p]=n[p]);i.originalType=e,i[u]="string"==typeof e?e:a,l[1]=i;for(var s=2;s<r;s++)l[s]=t[s];return o.createElement.apply(null,l)}return o.createElement.apply(null,t)}g.displayName="MDXCreateElement"},98198:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>l,default:()=>d,frontMatter:()=>r,metadata:()=>i,toc:()=>s});var o=t(7896),a=(t(2784),t(30876));const r={layout:"page",path:"/postgraphile/deploying-gcp/",title:"Deploying to GCP"},l=void 0,i={unversionedId:"deploying-gcp",id:"version-4.x/deploying-gcp",title:"Deploying to GCP",description:"aka Google Cloud Platform (App Engine)",source:"@site/versioned_docs/version-4.x/deploying-gcp.md",sourceDirName:".",slug:"/deploying-gcp",permalink:"/postgraphile/current/deploying-gcp",draft:!1,editUrl:"https://github.com/graphile/crystal/tree/main/postgraphile/website/versioned_docs/version-4.x/deploying-gcp.md",tags:[],version:"4.x",frontMatter:{layout:"page",path:"/postgraphile/deploying-gcp/",title:"Deploying to GCP"},sidebar:"docs",previous:{title:"Deploying to AWS Lambda",permalink:"/postgraphile/current/deploying-lambda"},next:{title:"Community contributions",permalink:"/postgraphile/current/community-contributions"}},p={},s=[{value:"PostGraphile CLI and CloudSQL",id:"postgraphile-cli-and-cloudsql",level:3},{value:"Deploying",id:"deploying",level:4},{value:"Deploying an express app",id:"deploying-an-express-app",level:3},{value:"PostgreSQL authorization with Google Cloud SQL",id:"postgresql-authorization-with-google-cloud-sql",level:3},{value:"Helpful resources",id:"helpful-resources",level:3}],c={toc:s},u="wrapper";function d(e){let{components:n,...t}=e;return(0,a.kt)(u,(0,o.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"aka Google Cloud Platform (App Engine)")),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"This post is a work in progress. Please see\n",(0,a.kt)("a",{parentName:"em",href:"https://github.com/graphile/graphile.github.io/issues/161"},"#161")," for notes.")),(0,a.kt)("h3",{id:"postgraphile-cli-and-cloudsql"},"PostGraphile CLI and CloudSQL"),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"Section author: @redaikidoka")),(0,a.kt)("p",null,"Deploying PostGraphile with nothing more than command-line arguments to the\ncloud to serve between PostgreSQL hosted in Google Cloud SQL and an Angular App\nhosted in Google App Engine."),(0,a.kt)("p",null,"Need to use ",(0,a.kt)("inlineCode",{parentName:"p"},"cloud_sql_instances")," to connect to the PostgreSQL instance, and set\nthe host and port in the command line."),(0,a.kt)("p",null,"Make sure you've got a project with your\n",(0,a.kt)("a",{parentName:"p",href:"https://cloud.google.com/sql/docs/postgres/connect-app-engine"},"Cloud SQL PostgreSQL database"),",\nwith the Google Cloud Admin SQL turned on, and App Engine turned on. Reserve the\ndefault service in App Engine for whatever your frontend is."),(0,a.kt)("p",null,"Example deployment file ",(0,a.kt)("inlineCode",{parentName:"p"},"app.yaml"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"beta_settings:\n  cloud_sql_instances: webstr-dev-######:us-central1:webstr-dev=tcp:5432\n\n# [START runtime]\nruntime: nodejs\nenv: flex\nthreadsafe: yes\nservice: wgraphile\n\nmanual_scaling:\n  instances: 1\nresources:\n  cpu: .5\n  memory_gb: .5\n  disk_size_gb: 10\n\nhealth_check:\n  enable_health_check: False\n\n# [END runtime]\n\nhandlers:\n  - url: /(.*)\n    static_files: ./\\1\n    upload: ./(.*)\n\n#  settings to keep gcloud from uploading files not required for deployment\nskip_files:\n  - ^node_modules$\n  - ^README\\..*\n  - ^package-lock.json\n  - \\.gitignore\n  - \\.es*\n  - ^\\.git$\n  - ^errors\\.log\n")),(0,a.kt)("p",null,"Under ",(0,a.kt)("inlineCode",{parentName:"p"},"beta_settings"),",\n",(0,a.kt)("inlineCode",{parentName:"p"},"cloud_sql_instances: webstr-dev-######:us-central1:webstr-dev=tcp:5432")," tells\nus that we are opening a unix pipe to a cloud instance in the GCP project, in\nthis case ",(0,a.kt)("inlineCode",{parentName:"p"},"webstr-dev-######")," in 'central region 1', connecting to Cloud SQL\ninstance ",(0,a.kt)("inlineCode",{parentName:"p"},"websr-dev"),"."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The ",(0,a.kt)("inlineCode",{parentName:"li"},"=tcp:5432")," maps that unix socket to tcp port 5432."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("em",{parentName:"li"},"I couldn't get using the unix port directly working, which is why the tcp\nport piece is in there")),(0,a.kt)("li",{parentName:"ul"},'You can get the full instance name from your Cloud SQL Instance in the area of\nthe Cloud SQL interface titled "Connect to this instance"')),(0,a.kt)("p",null,"In ",(0,a.kt)("inlineCode",{parentName:"p"},"package.json")," specify ",(0,a.kt)("inlineCode",{parentName:"p"},"postgraphile"),", some project details, and the ",(0,a.kt)("inlineCode",{parentName:"p"},"start"),"\nscript. E.g.:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "name": "myprojectname",\n  "version": "1.0.0",\n  "scripts": {\n    "start": "postgraphile --host --port 8080 --cors --enhance-graphiql --graphql / 0.0.0.0 -c postgres://user:password@172.17.0.1:5432/str_dev"\n  },\n  "engines": {\n    "node": "^10.15",\n    "npm": "^6.9"\n  },\n  "license": "ISC",\n  "dependencies": {\n    "postgraphile": "^4.4.5"\n  }\n}\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"The project will end up at ",(0,a.kt)("inlineCode",{parentName:"strong"},"https://[project-name].appspot.com/"))),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Your GraphQL endpoint will be that URL."),(0,a.kt)("li",{parentName:"ul"},"You can access GraphiQL at ",(0,a.kt)("inlineCode",{parentName:"li"},"https://[project-name].appspot.com/graphiql"))),(0,a.kt)("p",null,"Regarding the ",(0,a.kt)("inlineCode",{parentName:"p"},"start")," command, the flags are:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"--host 0.0.0.0")," allows GAE's nginx to successfully bind to the service"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"--port 8080")," binds to port 8080, which is a special port number that Google\ncloud will automatically expose via the service name, so you can access your\nPostGraphile service directly at ",(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"strong"},"https://[project-name].appspot.com/"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"--graphql /")," puts the GraphQL endpoint at the root ",(0,a.kt)("inlineCode",{parentName:"li"},"/")," (rather than\n",(0,a.kt)("inlineCode",{parentName:"li"},"/graphql")," as is the default)"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"--cors")," circumvents annoying CORS nonsense")),(0,a.kt)("h4",{id:"deploying"},"Deploying"),(0,a.kt)("p",null,"I deployed the project with ",(0,a.kt)("inlineCode",{parentName:"p"},"gcloud"),"."),(0,a.kt)("p",null,"I used ",(0,a.kt)("inlineCode",{parentName:"p"},"gcloud init")," to setup my connection to my Google Cloud project."),(0,a.kt)("p",null,"Then I used ",(0,a.kt)("inlineCode",{parentName:"p"},"gcloud app deploy")," in this directory to push it up."),(0,a.kt)("h3",{id:"deploying-an-express-app"},"Deploying an express app"),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"Section author: @garcianavalon")),(0,a.kt)("p",null,"GCP configuration:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'runtime: nodejs\nenv: flex\n\nenv_variables:\n  PGUSER: "your-database-user"\n  PGHOST: "/cloudsql/your-cloudsql-instance-connection-string"\n  PGPASSWORD: "your-password"\n  PGDATABASE: "your-database-name"\n\nbeta_settings:\n  cloud_sql_instances: your-cloudsql-instance-connection-string\n')),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"You will need ",(0,a.kt)("inlineCode",{parentName:"li"},"flexible")," environment for websocket support (subscriptions and\nlive queries). If you are not interested in real-time features you can use\n",(0,a.kt)("inlineCode",{parentName:"li"},"standard")," environment and save some bucks. In that case, remove the\n",(0,a.kt)("inlineCode",{parentName:"li"},"beta_settings")," section"),(0,a.kt)("li",{parentName:"ol"},"This requires using postgraphile as a library. Minimum setup would be\nsomething like")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"/project\n|--package.json\n|--/src\n   |--index.js\n")),(0,a.kt)("p",null,"in package.json"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "scripts": {\n    "start": "node src/index.js"\n  }\n}\n')),(0,a.kt)("p",null,"In index.js"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'const express = require("express");\nconst { postgraphile } = require("postgraphile");\n\nconst app = express();\n\n// node-postgres Pool config (https://node-postgres.com/api/pool,\n// https://node-postgres.com/api/client)\nconst pgConfig = {\n  host: process.env.PGHOST || "localhost",\n  port: process.env.PGPORT || 5432,\n  user: process.env.PGUSER,\n  database: process.env.PGDATABASE,\n  password: process.env.PGPASSWORD,\n};\n\n// Your PostGraphile config:\n// https://www.graphile.org/postgraphile/usage-library/#api-postgraphilepgconfig-schemaname-options\nconst postgraphileOptions = {\n  /* ... */\n};\napp.use(postgraphile(pgConfig, "public", postgraphileOptions));\n\napp.listen(8080);\n')),(0,a.kt)("h3",{id:"postgresql-authorization-with-google-cloud-sql"},"PostgreSQL authorization with Google Cloud SQL"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"postgres")," user on Google Cloud SQL is not a ",(0,a.kt)("inlineCode",{parentName:"p"},"superuser"),", unlike the\nPostgres user account you've likely been using in development. As such, if you\nneed it to be able to switch into a different role then you must grant that role\nto the ",(0,a.kt)("inlineCode",{parentName:"p"},"postgres")," user. For example, if you created the role ",(0,a.kt)("inlineCode",{parentName:"p"},"anonymous")," in your\ndatabase, and you want the ",(0,a.kt)("inlineCode",{parentName:"p"},"postgres")," role to be able to perform\n",(0,a.kt)("inlineCode",{parentName:"p"},"SET LOCAL role TO anonymous;")," then you could run:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sql"},"GRANT anonymous TO postgres;\n")),(0,a.kt)("h3",{id:"helpful-resources"},"Helpful resources"),(0,a.kt)("p",null,"See\n",(0,a.kt)("a",{parentName:"p",href:"https://github.com/GoogleCloudPlatform/nodejs-docs-samples/tree/master/appengine/hello-world/flexible"},"https://github.com/GoogleCloudPlatform/nodejs-docs-samples/tree/master/appengine/hello-world/flexible"),"\nfor example Node.js project on GCP."),(0,a.kt)("p",null,"See information about configuring port forwarding:\n",(0,a.kt)("a",{parentName:"p",href:"https://cloud.google.com/appengine/docs/flexible/custom-runtimes/configuring-your-app-with-app-yaml"},"https://cloud.google.com/appengine/docs/flexible/custom-runtimes/configuring-your-app-with-app-yaml")))}d.isMDXComponent=!0}}]);