"use strict";(self.webpackChunk_localrepo_grafast_website=self.webpackChunk_localrepo_grafast_website||[]).push([[6810],{30876:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var a=n(2784);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},g=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=s(n),g=i,m=d["".concat(p,".").concat(g)]||d[g]||u[g]||r;return n?a.createElement(m,o(o({ref:t},c),{},{components:n})):a.createElement(m,o({ref:t},c))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=g;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[d]="string"==typeof e?e:i,o[1]=l;for(var s=2;s<r;s++)o[s]=n[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}g.displayName="MDXCreateElement"},35541:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>l,toc:()=>s});var a=n(7896),i=(n(2784),n(30876));const r={sidebar_position:2},o="Adaptors",l={unversionedId:"step-library/dataplan-pg/adaptors",id:"step-library/dataplan-pg/adaptors",title:"Adaptors",description:"@dataplan/pg can use any client to communicate with your database, so long as",source:"@site/grafast/step-library/dataplan-pg/adaptors.md",sourceDirName:"step-library/dataplan-pg",slug:"/step-library/dataplan-pg/adaptors",permalink:"/grafast/step-library/dataplan-pg/adaptors",draft:!1,editUrl:"https://github.com/graphile/crystal/tree/main/grafast/website/grafast/step-library/dataplan-pg/adaptors.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Full registry example",permalink:"/grafast/step-library/dataplan-pg/registry/example"},next:{title:"pgSelect and pgSelectSingle",permalink:"/grafast/step-library/dataplan-pg/pgSelect"}},p={},s=[{value:"withPgClient",id:"withpgclient",level:2},{value:"PgClient",id:"pgclient",level:2},{value:"pgSettings",id:"pgsettings",level:2},{value:"PgSubscriber",id:"pgsubscriber",level:2},{value:"<code>@dataplan/pg/adaptors/pg</code>",id:"dataplanpgadaptorspg",level:2},{value:"createWithPgClient",id:"createwithpgclient",level:3},{value:"new PgSubscriber(pool)",id:"new-pgsubscriberpool",level:3},{value:"Example",id:"example",level:3},{value:"Writing your own adaptor",id:"writing-your-own-adaptor",level:2}],c={toc:s},d="wrapper";function u(e){let{components:t,...n}=e;return(0,i.kt)(d,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"adaptors"},"Adaptors"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"@dataplan/pg")," can use any client to communicate with your database, so long as\nthere is a suitable adaptor. Each adaptor provides a baseline of capabilities\nfor ",(0,i.kt)("inlineCode",{parentName:"p"},"@dataplan/pg")," to use. You may use multiple adaptors with the same schema."),(0,i.kt)("p",null,"At planning time, when a step determines a PgExecutor will be needed to\ncommunicate with the database, the PgExecutor's ",(0,i.kt)("inlineCode",{parentName:"p"},"context()")," method is called.\nThis method should return a step that describes an object with ",(0,i.kt)("inlineCode",{parentName:"p"},"withPgClient"),"\nand (optionally) ",(0,i.kt)("inlineCode",{parentName:"p"},"pgSettings")," entries. These entries will, in most cases, come\nfrom the GraphQL context. A very common pattern for defining a PgExecutors\ncontext is:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'import { context, object } from "grafast";\nimport { PgExecutor } from "@dataplan/pg";\n\nconst executor = new PgExecutor({\n  name: "default",\n  context() {\n    return object({\n      withPgClient: context().get("withPgClient"),\n      pgSettings: context().get("pgSettings"),\n    });\n  },\n});\n')),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"Here we build the PgExecutor context by getting a reference to the GraphQL\ncontext via the ",(0,i.kt)("inlineCode",{parentName:"p"},"context()")," step, and then extracting the ",(0,i.kt)("inlineCode",{parentName:"p"},"withPgClient")," and\n",(0,i.kt)("inlineCode",{parentName:"p"},"pgSettings")," keys. Note that the naming of these keys is unimportant, and you\nwill need to use different names for these keys for each of your adaptors.")),(0,i.kt)("p",null,"At runtime, we must ensure that these properties are supplied on the GraphQL\ncontext so that the PgExecutor can operate. It's the adaptors responsibility to\nprovide a suitable ",(0,i.kt)("inlineCode",{parentName:"p"},"withPgClient")," callback, and it's up to the user whether or\nnot they will supply a ",(0,i.kt)("inlineCode",{parentName:"p"},"pgSettings")," object."),(0,i.kt)("h2",{id:"withpgclient"},"withPgClient"),(0,i.kt)("p",null,"Every adaptor must give a way to build or retrieve a ",(0,i.kt)("inlineCode",{parentName:"p"},"withPgClient")," function\n(see the adaptor documentation). This function is typically stored onto the\nGraphQL context and will be called by the resources (via the executor) at run\ntime in order to communicate with the database. The function accepts two\nparameters (",(0,i.kt)("inlineCode",{parentName:"p"},"pgSettings")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"callback"),") and it:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"creates or retrieves a ",(0,i.kt)("inlineCode",{parentName:"li"},"PgClient")," (see below) connected to the database,"),(0,i.kt)("li",{parentName:"ol"},"if set, applies any settings from the ",(0,i.kt)("inlineCode",{parentName:"li"},"pgSettings")," object (creating a transaction if necessary),"),(0,i.kt)("li",{parentName:"ol"},"calls the callback, passing the client as the only argument,"),(0,i.kt)("li",{parentName:"ol"},"on success releases the client (after committing the transaction if necessary) and returns the result of the callback,"),(0,i.kt)("li",{parentName:"ol"},"on error releases the client (after rolling back the transaction if necessary) and raises the error.")),(0,i.kt)("h2",{id:"pgclient"},"PgClient"),(0,i.kt)("p",null,"Each adaptor is capable of producing an object that conforms to ",(0,i.kt)("inlineCode",{parentName:"p"},"PgClient"),".\nThis means it will have at least the following methods:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"query(opts)")," - runs the SQL query ",(0,i.kt)("inlineCode",{parentName:"li"},"opts.text")," (a string) using the\nplaceholder values ",(0,i.kt)("inlineCode",{parentName:"li"},"opts.values")," (an array) against the database, and returns\nthe result"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"withTransaction(callback)")," - 1. starts a transaction, 2. calls and awaits\nthe callback (passing the client), 3. on error, rolls back the transaction;\non success commits the transaction and returns the result")),(0,i.kt)("p",null,"Note that ",(0,i.kt)("inlineCode",{parentName:"p"},"withTransaction")," can be nested, in which case it's common to use\nsavepoints to implement the subtransactions."),(0,i.kt)("p",null,"Depending on the adaptor, the PgClient may have additional methods and\nproperties available - this is a common way of making your ORM's capabilities\navailable inside a Gra",(0,i.kt)("em",{parentName:"p"},"fast")," plan."),(0,i.kt)("h2",{id:"pgsettings"},"pgSettings"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"pgSettings")," is an optional string-string map. If set, the values will be set\nas temporary session variables in the database connection. This is commonly\nuseful when you're using PostgreSQL's row-level security. If you do not\nuse row-level security, you probably won't need this."),(0,i.kt)("h2",{id:"pgsubscriber"},"PgSubscriber"),(0,i.kt)("p",null,"A PgSubscriber can be used to leverage the LISTEN/NOTIFY capabilities of a\nPostgreSQL database to give your schema realtime (pubsub) capabilities. Not all\nadaptors support PgSubscriber, and they each have their own way of building\none."),(0,i.kt)("p",null,"A ",(0,i.kt)("inlineCode",{parentName:"p"},"PgSubscriber")," instance it typically referenced from the GraphQL context\n(e.g. via ",(0,i.kt)("inlineCode",{parentName:"p"},"context().get('pgSubscriber')"),") and then used via the\n",(0,i.kt)("a",{parentName:"p",href:"/grafast/step-library/standard-steps/listen"},(0,i.kt)("inlineCode",{parentName:"a"},"listen()"))," step. PgSubscribers\nhave the standard listening method, ",(0,i.kt)("inlineCode",{parentName:"p"},"subscribe(topic)"),", which returns an async\niterable yielding events from the topic. The subscription can be terminated by\nterminating the async iterable."),(0,i.kt)("h2",{id:"dataplanpgadaptorspg"},(0,i.kt)("inlineCode",{parentName:"h2"},"@dataplan/pg/adaptors/pg")),(0,i.kt)("p",null,"This adaptor uses ",(0,i.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/pg"},"the ",(0,i.kt)("inlineCode",{parentName:"a"},"pg")," module")," to\ncommunicate with the database."),(0,i.kt)("h3",{id:"createwithpgclient"},"createWithPgClient"),(0,i.kt)("p",null,"To create a ",(0,i.kt)("inlineCode",{parentName:"p"},"withPgClient")," function suitable for usage at runtime,\n",(0,i.kt)("inlineCode",{parentName:"p"},"createWithPgClient")," can be called, passing an object with the following\nproperties:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"pool")," - a ",(0,i.kt)("inlineCode",{parentName:"li"},"pg.Pool")," instance"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"connectionString")," - a PostgreSQL connection string\n(",(0,i.kt)("inlineCode",{parentName:"li"},"postgres://user:pass@host/dbname"),") to use to create a pool"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"poolConfig")," - configuration options for a ",(0,i.kt)("inlineCode",{parentName:"li"},"pg.Pool")," (less the\n",(0,i.kt)("inlineCode",{parentName:"li"},"connectionString"),") to be used when creating a pool internally using\n",(0,i.kt)("inlineCode",{parentName:"li"},"connectionString"))),(0,i.kt)("p",null,"Exactly one of ",(0,i.kt)("inlineCode",{parentName:"p"},"pool")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"connectionString")," must be set, all other options are\noptional."),(0,i.kt)("h3",{id:"new-pgsubscriberpool"},"new PgSubscriber(pool)"),(0,i.kt)("p",null,"Creates a new PgSubscriber instance using the given ",(0,i.kt)("inlineCode",{parentName:"p"},"pg.Pool")," instance, ready\nto be stored onto the GraphQL context."),(0,i.kt)("h3",{id:"example"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'import * as pg from "pg";\nimport { createWithPgClient, PgSubscriber } from "@dataplan/pg/adaptors/pg";\n\nconst pool = new pg.Pool({ connectionString: "postgres:///pagila" });\n\nconst withPgClient = createWithPgClient({ pool });\nconst pgSubscriber = new PgSubscriber(pool);\n\nconst graphqlContext = { withPgClient, pgSubscriber };\n\n// await grafast({ query: `...`, contextValue: graphqlContext });\n')),(0,i.kt)("h2",{id:"writing-your-own-adaptor"},"Writing your own adaptor"),(0,i.kt)("p",null,"TODO: document this."))}u.isMDXComponent=!0}}]);