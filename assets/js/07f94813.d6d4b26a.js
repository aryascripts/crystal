"use strict";(self.webpackChunk_localrepo_star_website=self.webpackChunk_localrepo_star_website||[]).push([[2290],{876:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>f});var r=n(2784);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),p=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},s=function(e){var t=p(e.components);return r.createElement(c.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),u=p(n),d=o,f=u["".concat(c,".").concat(d)]||u[d]||m[d]||i;return n?r.createElement(f,a(a({ref:t},s),{},{components:n})):r.createElement(f,a({ref:t},s))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=d;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[u]="string"==typeof e?e:o,a[1]=l;for(var p=2;p<i;p++)a[p]=n[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8209:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>m,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var r=n(7896),o=(n(2784),n(876));const i={sidebar_position:2},a="Importing",l={unversionedId:"importing",id:"importing",title:"Importing",description:"We use the abbreviation te to refer to the tagged template literal function,",source:"@site/tamedevil/importing.md",sourceDirName:".",slug:"/importing",permalink:"/tamedevil/importing",draft:!1,editUrl:"https://github.com/graphile/crystal/tree/main/utils/website/tamedevil/importing.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"tamedevil",permalink:"/tamedevil/"},next:{title:"API",permalink:"/tamedevil/api/"}},c={},p=[{value:"Example",id:"example",level:2}],s={toc:p},u="wrapper";function m(e){let{components:t,...n}=e;return(0,o.kt)(u,(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"importing"},"Importing"),(0,o.kt)("p",null,"We use the abbreviation ",(0,o.kt)("inlineCode",{parentName:"p"},"te")," to refer to the tagged template literal function,\nand all the helpers are available as properties on this function, so it's\ntypically the only thing you need to import."),(0,o.kt)("p",null,"For ESM, import ",(0,o.kt)("inlineCode",{parentName:"p"},"te"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'import { te } from "tamedevil";\n')),(0,o.kt)("p",null,"Or for CommonJS, ",(0,o.kt)("inlineCode",{parentName:"p"},"require")," it:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'const { te } = require("tamedevil");\n')),(0,o.kt)("h2",{id:"example"},"Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'// Here\'s a string we want to embed into the function:\nconst spec = "some string here";\n\n// And here\'s a complex variable we want to use within the function\'s scope:\nconst source = new Source(/* ... */);\n\nconst toEval = te`\\\n  const source = ${te.ref(source)};\n  return function plan($record) {\n    const $records = source.find(${te.lit(spec)});\n    return connection($records);\n  }\n`;\n\nconst plan = te.run(toEval);\n\nassert.strictEqual(\n  plan.toString(),\n  `function plan($record) {\n    const $records = source.find("some string here");\n    return connection($records);\n  }`,\n);\n')))}m.isMDXComponent=!0}}]);