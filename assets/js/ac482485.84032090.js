"use strict";(self.webpackChunk_localrepo_graphile_build_website=self.webpackChunk_localrepo_graphile_build_website||[]).push([[493],{876:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>b});var r=n(2784);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=r.createContext({}),s=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=s(n),h=i,b=u["".concat(p,".").concat(h)]||u[h]||d[h]||o;return n?r.createElement(b,a(a({ref:t},c),{},{components:n})):r.createElement(b,a({ref:t},c))}));function b(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=h;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[u]="string"==typeof e?e:i,a[1]=l;for(var s=2;s<o;s++)a[s]=n[s];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},8925:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>a,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var r=n(7896),i=(n(2784),n(876));const o={layout:"page",path:"/graphile-build/build-object/",title:"The Build Object",sidebar_position:6},a=void 0,l={unversionedId:"build-object",id:"build-object",title:"The Build Object",description:"The build object contains a number of helpers and sources of information",source:"@site/graphile-build/build-object.md",sourceDirName:".",slug:"/build-object",permalink:"/graphile-build/build-object",draft:!1,editUrl:"https://github.com/graphile/crystal/tree/main/graphile-build/website/graphile-build/build-object.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{layout:"page",path:"/graphile-build/build-object/",title:"The Build Object",sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"All Hooks",permalink:"/graphile-build/all-hooks"},next:{title:"The Context Object",permalink:"/graphile-build/context-object"}},p={},s=[{value:"<code>registerObjectType(typeName, scope, specGenerator, origin)</code>",id:"registerobjecttypetypename-scope-specgenerator-origin",level:2},{value:"<code>getTypeByName(typeName)</code>",id:"gettypebynametypename",level:2},{value:"<code>extend(input, extensions, origin)</code>",id:"extendinput-extensions-origin",level:2},{value:"<code>graphql</code>",id:"graphql",level:2}],c={toc:s},u="wrapper";function d(e){let{components:t,...n}=e;return(0,i.kt)(u,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"The build object contains a number of helpers and sources of information\nrelevant to the current build of the GraphQL API. If you're in watch mode then\nevery time a new schema is generated a new build object will be used."),(0,i.kt)("p",null,"The following properties/methods are available on the initial build object (more\nmay be added by plugins via the ",(0,i.kt)("inlineCode",{parentName:"p"},"build")," hook):"),(0,i.kt)("h2",{id:"registerobjecttypetypename-scope-specgenerator-origin"},(0,i.kt)("inlineCode",{parentName:"h2"},"registerObjectType(typeName, scope, specGenerator, origin)")),(0,i.kt)("p",null,"The bread-and-butter of Graphile Engine, this method is how we register hooked\nGraphQL objects:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'build.registerObjectType(\n  "MyType",\n  { isMyType: true },\n  () => {\n    return {\n      fields: {\n        meaningOfLife: {\n          type: graphql.GraphQLInt,\n          plan() {\n            return constant(42);\n          },\n        },\n      },\n    };\n  },\n  "MyType from MyPlugin",\n);\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"type")," is a GraphQL object type, such as ",(0,i.kt)("inlineCode",{parentName:"li"},"GraphQLEnumType")," or\n",(0,i.kt)("inlineCode",{parentName:"li"},"GraphQLInputObjectType")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"spec")," is a valid specification that will be passed through the relevant hooks\nbefore ultimately being passed to the constructor of the aforementioned ",(0,i.kt)("inlineCode",{parentName:"li"},"type"),"\nand returning an instance of that type"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"scope")," is where you can add scope information that will be available through\nthe ",(0,i.kt)("inlineCode",{parentName:"li"},"scope")," property in the context object passed to hooks (see ",(0,i.kt)("inlineCode",{parentName:"li"},"Context"),"\nbelow)")),(0,i.kt)("h2",{id:"gettypebynametypename"},(0,i.kt)("inlineCode",{parentName:"h2"},"getTypeByName(typeName)")),(0,i.kt)("p",null,"The counterpart to ",(0,i.kt)("inlineCode",{parentName:"p"},"register*Type"),", this is how we retrieve or build the GraphQL\ntypes that we registered previously."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'const MyType = build.getTypeByName("MyType");\n')),(0,i.kt)("h2",{id:"extendinput-extensions-origin"},(0,i.kt)("inlineCode",{parentName:"h2"},"extend(input, extensions, origin)")),(0,i.kt)("p",null,"Returns the input object with ",(0,i.kt)("inlineCode",{parentName:"p"},"extensions")," merged in ",(0,i.kt)("strong",{parentName:"p"},"without overwriting"),".\nIf any clashes occur an error will be throw. It is advisable to use this\ninstead of ",(0,i.kt)("inlineCode",{parentName:"p"},"Object.assign")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"{...input, ...extensions}")," because it will warn\nyou if you're accidentally overwriting something. The origin helps users to\ndeal with clashes by determining what this call related to."),(0,i.kt)("h2",{id:"graphql"},(0,i.kt)("inlineCode",{parentName:"h2"},"graphql")),(0,i.kt)("p",null,"Equivalent to ",(0,i.kt)("inlineCode",{parentName:"p"},"require('graphql')"),", by using this property you don't have to\nimport graphql and you're less likely to get version conflicts which are hard to\ndiagnose and resolve. Use of this property over importing ",(0,i.kt)("inlineCode",{parentName:"p"},"graphql")," yourself is\nhighly recommended."))}d.isMDXComponent=!0}}]);