"use strict";(self.webpackChunk_localrepo_graphile_build_website=self.webpackChunk_localrepo_graphile_build_website||[]).push([[737],{876:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>m});var a=r(2784);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},i=Object.keys(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var s=a.createContext({}),u=function(e){var t=a.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},p=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),c=u(r),h=n,m=c["".concat(s,".").concat(h)]||c[h]||d[h]||i;return r?a.createElement(m,o(o({ref:t},p),{},{components:r})):a.createElement(m,o({ref:t},p))}));function m(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=r.length,o=new Array(i);o[0]=h;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[c]="string"==typeof e?e:n,o[1]=l;for(var u=2;u<i;u++)o[u]=r[u];return a.createElement.apply(null,o)}return a.createElement.apply(null,r)}h.displayName="MDXCreateElement"},3474:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>u});var a=r(7896),n=(r(2784),r(876));const i={title:"Graphile Build",sidebar_position:1},o=void 0,l={unversionedId:"index",id:"index",title:"Graphile Build",description:"Graphile Build is a toolkit for auto-generating flexible and extensible GraphQL",source:"@site/graphile-build/index.md",sourceDirName:".",slug:"/",permalink:"/graphile-build/",draft:!1,editUrl:"https://github.com/graphile/crystal/tree/main/graphile-build/website/graphile-build/index.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Graphile Build",sidebar_position:1},sidebar:"tutorialSidebar",next:{title:"Plugins",permalink:"/graphile-build/plugins"}},s={},u=[{value:"Automatically build GraphQL objects and fields through database introspection",id:"automatically-build-graphql-objects-and-fields-through-database-introspection",level:2},{value:"Automatically update your running GraphQL schema without the need to restart",id:"automatically-update-your-running-graphql-schema-without-the-need-to-restart",level:2},{value:"Quick to start",id:"quick-to-start",level:2}],p={toc:u},c="wrapper";function d(e){let{components:t,...r}=e;return(0,n.kt)(c,(0,a.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"Graphile Build is a toolkit for auto-generating flexible and extensible GraphQL\nAPIs from arbitrary data sources."),(0,n.kt)("p",null,"The plugin system enables adding and removing of entire classes of features\neasily (and enables your users to write their own or community extensions). The\nbehavior system gives users fine grained control over which features are\nenabled for the various entities in their system. The integration with\n",(0,n.kt)("a",{parentName:"p",href:"https://grafast.org"},"Gra",(0,n.kt)("em",{parentName:"a"},"fast"))," means that the generated schemas can typically\nout-perform even hand-rolled schemas using traditional techniques such as\nresolvers and DataLoader."),(0,n.kt)("p",null,"An example of a system build with Graphile Build is\n",(0,n.kt)("a",{parentName:"p",href:"https://postgraphile.org"},"PostGraphile"),", which automatically builds a high performance,\nhighly customizeable, and best practices GraphQL API from your PostgreSQL\ndatabase."),(0,n.kt)("h2",{id:"automatically-build-graphql-objects-and-fields-through-database-introspection"},"Automatically build GraphQL objects and fields through database introspection"),(0,n.kt)("p",null,"The core ",(0,n.kt)("inlineCode",{parentName:"p"},"graphile-build")," library treats GraphQL as a first-class target, but\ndoes not know anything about databases or other data stores. By writing plugins\nto introspect your datastore you can automatically build your GraphQL objects\nand eliminate the development work required to keep your codebase and datastore\nschema in sync."),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"graphile-build-pg")," is a collection of plugins which adds extensive support for\nthe popular PostgreSQL database system by performing introspection of your\ndatabase schema and ",(0,n.kt)("strong",{parentName:"p"},"automatically")," building the relevant GraphQL objects and\nfields based on the tables, columns, functions, relations that it finds. This is\nthe core of ",(0,n.kt)("a",{parentName:"p",href:"https://postgraphile.org/"},"PostGraphile"),"."),(0,n.kt)("p",null,"But Graphile Build isn't limited to PostgreSQL, you can build ",(0,n.kt)("inlineCode",{parentName:"p"},"graphile-build"),"\nplugins for anything that Node.js can communicate with."),(0,n.kt)("h2",{id:"automatically-update-your-running-graphql-schema-without-the-need-to-restart"},"Automatically update your running GraphQL schema without the need to restart"),(0,n.kt)("p",null,"For example: when your underlying data structure changes your Graphile Build\nplugins can trigger a rebuild event and you'll automatically be supplied with a\nfresh new GraphQL schema to replace the out-of-date one - no need to restart\nyour server!"),(0,n.kt)("h2",{id:"quick-to-start"},"Quick to start"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-js"},'import { buildSchema, defaultPreset } from "graphile-build";\nimport { printSchema } from "graphql";\n\nconst preset = {\n  extends: [\n    defaultPreset,\n    // Add more presets here!\n  ],\n};\n\nconst schema = await buildSchema(preset);\nconsole.log(printSchema(schema));\n')))}d.isMDXComponent=!0}}]);