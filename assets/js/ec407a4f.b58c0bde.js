"use strict";(self.webpackChunk_localrepo_postgraphile_website=self.webpackChunk_localrepo_postgraphile_website||[]).push([[8728],{30876:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var a=n(2784);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),u=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),p=u(n),m=r,f=p["".concat(s,".").concat(m)]||p[m]||d[m]||i;return n?a.createElement(f,l(l({ref:t},c),{},{components:n})):a.createElement(f,l({ref:t},c))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[p]="string"==typeof e?e:r,l[1]=o;for(var u=2;u<i;u++)l[u]=n[u];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},82009:(e,t,n)=>{n.d(t,{Z:()=>l});var a=n(2784),r=n(524);const i={tabItem:"tabItem_OMyP"};function l(e){let{children:t,hidden:n,className:l}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(i.tabItem,l),hidden:n},t)}},77336:(e,t,n)=>{n.d(t,{Z:()=>w});var a=n(7896),r=n(2784),i=n(524),l=n(24126),o=n(7267),s=n(32424),u=n(42244),c=n(24155);function p(e){return function(e){return r.Children.map(e,(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:r}}=e;return{value:t,label:n,attributes:a,default:r}}))}function d(e){const{values:t,children:n}=e;return(0,r.useMemo)((()=>{const e=t??p(n);return function(e){const t=(0,u.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function m(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function f(e){let{queryString:t=!1,groupId:n}=e;const a=(0,o.k6)(),i=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,s._X)(i),(0,r.useCallback)((e=>{if(!i)return;const t=new URLSearchParams(a.location.search);t.set(i,e),a.replace({...a.location,search:t.toString()})}),[i,a])]}function h(e){const{defaultValue:t,queryString:n=!1,groupId:a}=e,i=d(e),[l,o]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!m({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:i}))),[s,u]=f({queryString:n,groupId:a}),[p,h]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,i]=(0,c.Nk)(n);return[a,(0,r.useCallback)((e=>{n&&i.set(e)}),[n,i])]}({groupId:a}),g=(()=>{const e=s??p;return m({value:e,tabValues:i})?e:null})();(0,r.useLayoutEffect)((()=>{g&&o(g)}),[g]);return{selectedValue:l,selectValue:(0,r.useCallback)((e=>{if(!m({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);o(e),u(e),h(e)}),[u,h,i]),tabValues:i}}var g=n(89741);const b={tabList:"tabList_M0Dn",tabItem:"tabItem_ysIP"};function y(e){let{className:t,block:n,selectedValue:o,selectValue:s,tabValues:u}=e;const c=[],{blockElementScrollPositionUntilNextRender:p}=(0,l.o5)(),d=e=>{const t=e.currentTarget,n=c.indexOf(t),a=u[n].value;a!==o&&(p(t),s(a))},m=e=>{let t=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const n=c.indexOf(e.currentTarget)+1;t=c[n]??c[0];break}case"ArrowLeft":{const n=c.indexOf(e.currentTarget)-1;t=c[n]??c[c.length-1];break}}t?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":n},t)},u.map((e=>{let{value:t,label:n,attributes:l}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:o===t?0:-1,"aria-selected":o===t,key:t,ref:e=>c.push(e),onKeyDown:m,onClick:d},l,{className:(0,i.Z)("tabs__item",b.tabItem,l?.className,{"tabs__item--active":o===t})}),n??t)})))}function v(e){let{lazy:t,children:n,selectedValue:a}=e;const i=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=i.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},i.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==a}))))}function k(e){const t=h(e);return r.createElement("div",{className:(0,i.Z)("tabs-container",b.tabList)},r.createElement(y,(0,a.Z)({},e,t)),r.createElement(v,(0,a.Z)({},e,t)))}function w(e){const t=(0,g.Z)();return r.createElement(k,(0,a.Z)({key:String(t)},e))}},71236:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>f,frontMatter:()=>o,metadata:()=>u,toc:()=>p});var a=n(7896),r=(n(2784),n(30876)),i=n(77336),l=n(82009);const o={layout:"page",path:"/postgraphile/inflection/",title:"Inflection"},s=void 0,u={unversionedId:"inflection",id:"inflection",title:"Inflection",description:"Inflection governs how things are named whilst building your PostGraphile",source:"@site/postgraphile/inflection.md",sourceDirName:".",slug:"/inflection",permalink:"/postgraphile/next/inflection",draft:!1,editUrl:"https://github.com/graphile/crystal/tree/main/postgraphile/website/postgraphile/inflection.md",tags:[],version:"current",frontMatter:{layout:"page",path:"/postgraphile/inflection/",title:"Inflection"},sidebar:"docs",previous:{title:"Registry",permalink:"/postgraphile/next/registry"},next:{title:"Database schemas",permalink:"/postgraphile/next/namespaces"}},c={},p=[{value:"Overriding Naming - One-off",id:"overriding-naming---one-off",level:3},{value:"Overriding Inflection",id:"overriding-inflection",level:3},{value:"Advice",id:"advice",level:3},{value:"Listing available inflectors",id:"listing-available-inflectors",level:2}],d={toc:p},m="wrapper";function f(e){let{components:t,...o}=e;return(0,r.kt)(m,(0,a.Z)({},d,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,'Inflection governs how things are named whilst building your PostGraphile\nschema. "Inflection" is the system of naming things; it\'s composed of a large\nset of named functions, and we call each of these inflection functions an\n"inflector."'),(0,r.kt)("p",null,"The inflectors that you have available will depend on the plugins and presets\nyou're using. To get a list of the inflectors available to you, you can use\nTypeScript autocompletion, or if you're a sponsor you can install the\n",(0,r.kt)("inlineCode",{parentName:"p"},"graphile")," package and run ",(0,r.kt)("inlineCode",{parentName:"p"},"yarn graphile inflection list")," (or equivalent for\nother package managers)."),(0,r.kt)("p",null,"In GraphQL, types typically use singular ",(0,r.kt)("inlineCode",{parentName:"p"},"UpperCamelCase")," (",(0,r.kt)("inlineCode",{parentName:"p"},"PascalCase"),");\nfields, arguments and directives typically use ",(0,r.kt)("inlineCode",{parentName:"p"},"camelCase"),"; and enum values\ntypically use ",(0,r.kt)("inlineCode",{parentName:"p"},"CONSTANT_CASE"),". These conventions can be seen in ",(0,r.kt)("a",{parentName:"p",href:"https://spec.graphql.org/draft/#example-916f4"},"the GraphQL\nspecification itself"),". The\ndefault inflectors attempt to map things to natural names in GraphQL whilst\navoiding naming conflicts. For example:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Table names are singularized and changed to UpperCamelCase: ",(0,r.kt)("inlineCode",{parentName:"li"},"pending_users")," \u2192\n",(0,r.kt)("inlineCode",{parentName:"li"},"PendingUser")),(0,r.kt)("li",{parentName:"ul"},"Column names are changed to camelCase: ",(0,r.kt)("inlineCode",{parentName:"li"},"created_at")," \u2192 ",(0,r.kt)("inlineCode",{parentName:"li"},"createdAt")),(0,r.kt)("li",{parentName:"ul"},"Relations reference the target type and the referencing columns:\n",(0,r.kt)("inlineCode",{parentName:"li"},"postsByAuthorId"),' (see "advice" below about making this shorter!)')),(0,r.kt)("p",null,"But if you don't want this (or it's doing something wrong), then you can fix it\nby overriding inflectors!"),(0,r.kt)("h3",{id:"overriding-naming---one-off"},"Overriding Naming - One-off"),(0,r.kt)("p",null,"If you want to rename just one field or type, your best bet is to use a\n",(0,r.kt)("a",{parentName:"p",href:"/postgraphile/next/smart-tags"},"smart tag"),"; e.g. for a table you might do:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"COMMENT ON TABLE post IS E'@name message';\n")),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Each inflector is responsible for checking for any relevant smart tags and\nhonouring them.")),(0,r.kt)("h3",{id:"overriding-inflection"},"Overriding Inflection"),(0,r.kt)("p",null,"You can easily write a plugin to override an individual inflector, it just\nneeds to add the new inflector under the ",(0,r.kt)("inlineCode",{parentName:"p"},"inflection.replace")," object; an\nexample might look like:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"export default {\n  name: 'ReplacePatchTypeInflectorPlugin',\n  version: '0.0.0',\n\n  inflection: {\n    replace: {\n      patchType(previous, resolvedPreset, typeName) {\n        return this.upperCamelCase(`${typeName}-change-set`);\n      },\n    }\n  }\n);\n")),(0,r.kt)("p",null,"In this example, ",(0,r.kt)("inlineCode",{parentName:"p"},"previous")," is the previous inflector (in case you only want to\noverride in certain circumstances) - you would call it using the same\narguments, just dropping the first two - so in this case: ",(0,r.kt)("inlineCode",{parentName:"p"},"previous(typeName)"),"."),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"TypeScript is your friend when replacing inflectors, it should know what\ninflectors are available, their documentation, and the types of all their\narguments.")),(0,r.kt)("h3",{id:"advice"},"Advice"),(0,r.kt)("p",null,"By default, the relation field names are explicit to avoid accidental\nconflicts, and can make your schema somewhat verbose, e.g. ",(0,r.kt)("inlineCode",{parentName:"p"},"userByAuthorId"),",\n",(0,r.kt)("inlineCode",{parentName:"p"},"userByEditorId"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"userByPublisherId"),", etc."),(0,r.kt)("p",null,"Some people like this verbosity; however if you, like us, prefer shorter names\nthen we encourage you use\n",(0,r.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/@graphile/simplify-inflection"},"the ",(0,r.kt)("inlineCode",{parentName:"a"},"@graphile/simplify-inflection")," plugin"),".\nThis would automatically change those fields to be named ",(0,r.kt)("inlineCode",{parentName:"p"},"author"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"editor")," and\n",(0,r.kt)("inlineCode",{parentName:"p"},"publisher")," respectively."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="graphile.config.mjs"',title:'"graphile.config.mjs"'},'import { PgSimplifyInflectionPreset } from "@graphile/simplify-inflection";\n\nconst preset = {\n  extends: [\n    PgSimplifyInflectionPreset,\n    //...\n  ],\n  //...\n};\n')),(0,r.kt)("p",null,"Our maintainer, Benjie, prefers to use this plugin in all his projects."),(0,r.kt)("h2",{id:"listing-available-inflectors"},"Listing available inflectors"),(0,r.kt)("p",null,"We've built a command into our sponsors-only ",(0,r.kt)("inlineCode",{parentName:"p"},"graphile")," development assistant\nto help you determine all the inflectors available to you:"),(0,r.kt)(i.Z,{groupId:"npm2yarn",mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"npm",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm install --save-dev graphile@beta\nnpx graphile inflection list\n"))),(0,r.kt)(l.Z,{value:"yarn",label:"Yarn",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"yarn add --dev graphile@beta\nnpx graphile inflection list\n"))),(0,r.kt)(l.Z,{value:"pnpm",label:"pnpm",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"pnpm add --save-dev graphile@beta\nnpx graphile inflection list\n")))),(0,r.kt)("figure",null,(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Initial output of the `graphile inflection list` command",src:n(25708).Z,width:"654",height:"289"})),(0,r.kt)("figcaption",null,"Screenshot showing the initial output of the ",(0,r.kt)("code",null,"graphile inflection list")," command, including a summary of the available inflectors and their arguments.")),(0,r.kt)("figure",null,(0,r.kt)("p",null,(0,r.kt)("img",{alt:"More detailed output from later in the `graphile inflection list` command",src:n(35669).Z,width:"598",height:"454"})),(0,r.kt)("figcaption",null,"Screenshot from lower down in the output of the ",(0,r.kt)("code",null,"graphile inflection list")," command, detailing each inflector, its documentation and its rough TypeScript definition.")))}f.isMDXComponent=!0},25708:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/graphile-inflection-list-1-76eb4ebb28f154b5d981cd72ef6428f7.png"},35669:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/graphile-inflection-list-2-e624e35bb541cadc7bb88fcba406c3c6.png"}}]);