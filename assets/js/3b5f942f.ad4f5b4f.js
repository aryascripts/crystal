"use strict";(self.webpackChunk_localrepo_postgraphile_website=self.webpackChunk_localrepo_postgraphile_website||[]).push([[1366],{30876:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var r=n(2784);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=p(n),m=a,h=c["".concat(s,".").concat(m)]||c[m]||d[m]||o;return n?r.createElement(h,i(i({ref:t},u),{},{components:n})):r.createElement(h,i({ref:t},u))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[c]="string"==typeof e?e:a,i[1]=l;for(var p=2;p<o;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},44352:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var r=n(7896),a=(n(2784),n(30876));const o={layout:"page",path:"/postgraphile/reserved-keywords/",title:"Reserved Keywords / Table Names"},i=void 0,l={unversionedId:"reserved-keywords",id:"version-4.x/reserved-keywords",title:"Reserved Keywords / Table Names",description:"Some table, column, function and argument names can cause issues with",source:"@site/versioned_docs/version-4.x/reserved-keywords.md",sourceDirName:".",slug:"/reserved-keywords",permalink:"/postgraphile/current/reserved-keywords",draft:!1,editUrl:"https://github.com/graphile/crystal/tree/main/postgraphile/website/versioned_docs/version-4.x/reserved-keywords.md",tags:[],version:"4.x",frontMatter:{layout:"page",path:"/postgraphile/reserved-keywords/",title:"Reserved Keywords / Table Names"},sidebar:"docs",previous:{title:"Background Tasks in PostGraphile",permalink:"/postgraphile/current/background-tasks"},next:{title:"Debugging",permalink:"/postgraphile/current/debugging"}},s={},p=[{value:"Non-unique table names",id:"non-unique-table-names",level:3}],u={toc:p},c="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(c,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Some table, column, function and argument names can cause issues with\nPostGraphile due to conflicts with auto-generated type and field names. In these\ncases you can generally change the GraphQL type and field names for your\nPostgreSQL schema to avoid conflicts using ",(0,a.kt)("a",{parentName:"p",href:"./smart-comments/"},"smart comments"),"."),(0,a.kt)("p",null,"Note that in many cases the ",(0,a.kt)("strong",{parentName:"p"},"singular")," or the ",(0,a.kt)("strong",{parentName:"p"},"plural")," of the words below\nmay also cause issues, so assume the list below includes singulars and plurals\ntoo. The same goes for ",(0,a.kt)("strong",{parentName:"p"},"snake_case")," vs ",(0,a.kt)("strong",{parentName:"p"},"camelCase")," since PostGraphile\nautomatically converts between these for you."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"[Table]"," ",(0,a.kt)("inlineCode",{parentName:"li"},"query"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"mutation"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"subscription")," - conflict with the root-level\n",(0,a.kt)("inlineCode",{parentName:"li"},"Query"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"Mutation")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"Subscription")," GraphQL types."),(0,a.kt)("li",{parentName:"ul"},"[Table, Function]"," ",(0,a.kt)("inlineCode",{parentName:"li"},"node")," - conflicts with the GraphQL root ",(0,a.kt)("inlineCode",{parentName:"li"},"node(...)"),"\ninterface."),(0,a.kt)("li",{parentName:"ul"},"[Column, Argument]"," ",(0,a.kt)("inlineCode",{parentName:"li"},"order_by")," / ",(0,a.kt)("inlineCode",{parentName:"li"},"orderBy")," - Used by PostGraphile for ordering,\nmay cause issues when declared as a function argument or table column."),(0,a.kt)("li",{parentName:"ul"},"[Column]"," ",(0,a.kt)("inlineCode",{parentName:"li"},"primary_key")," - we automatically add ",(0,a.kt)("inlineCode",{parentName:"li"},"orderBy: PRIMARY_KEY_ASC")," to\nordering, if you have a column called ",(0,a.kt)("inlineCode",{parentName:"li"},"primary_key")," then this value will be\ngenerated twice and cause issues.")),(0,a.kt)("p",null,'There are other potential conflicts too, if you discover more conflicts then\nplease consider using the "Edit this page" link above to suggest some changes!'),(0,a.kt)("h3",{id:"non-unique-table-names"},"Non-unique table names"),(0,a.kt)("p",null,"If there exists multiple schemas with the same table name inside of them, it can\ncause issues with the ",(0,a.kt)("inlineCode",{parentName:"p"},"nodeId: ID")," (or ",(0,a.kt)("inlineCode",{parentName:"p"},"id: ID"),") field, by making IDs which are\nnot globally unique. Calls utilizing those IDs may return unexpected results. In\norder to avoid this, we must disable the ",(0,a.kt)("inlineCode",{parentName:"p"},"PgNodeAliasPostGraphile")," plugin, and\ntherefore use the GraphQL type name rather than the PostgreSQL table name in the\nidentifiers. On the CLI you'd do this like:\n",(0,a.kt)("inlineCode",{parentName:"p"},"postgraphile --skip-plugins graphile-build-pg:PgNodeAliasPostGraphile"),"."),(0,a.kt)("p",null,"To support non-unique table names you should implement an\n",(0,a.kt)("a",{parentName:"p",href:"./inflection/#overriding-inflection---general"},"inflection override")," that will\nchange how the GraphQL type names are generated from the raw table name."))}d.isMDXComponent=!0}}]);