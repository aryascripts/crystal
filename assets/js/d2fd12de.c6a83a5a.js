"use strict";(self.webpackChunk_localrepo_star_website=self.webpackChunk_localrepo_star_website||[]).push([[3518],{4885:e=>{e.exports=JSON.parse('{"pluginId":"pg-sql2","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"link","label":"pg-sql2 Introduction","href":"/pg-sql2/","docId":"index"},{"type":"category","label":"API","collapsible":true,"collapsed":false,"items":[{"type":"link","label":"sql ...","href":"/pg-sql2/api/sql","docId":"api/sql"},{"type":"link","label":"sql.identifier()","href":"/pg-sql2/api/sql-identifier","docId":"api/sql-identifier"},{"type":"link","label":"sql.value()","href":"/pg-sql2/api/sql-value","docId":"api/sql-value"},{"type":"link","label":"sql.literal()","href":"/pg-sql2/api/sql-literal","docId":"api/sql-literal"},{"type":"link","label":"sql.join()","href":"/pg-sql2/api/sql-join","docId":"api/sql-join"},{"type":"link","label":"sql.compile()","href":"/pg-sql2/api/sql-complie","docId":"api/sql-complie"}],"href":"/pg-sql2/api/"}]},"docs":{"api/index":{"id":"api/index","title":"API","description":"","sidebar":"tutorialSidebar"},"api/sql":{"id":"api/sql","title":"sql ...","description":"Builds part of (or the whole of) an SQL query, safely interpreting the embedded expressions. If a non sql expression is passed in, e.g.:","sidebar":"tutorialSidebar"},"api/sql-complie":{"id":"api/sql-complie","title":"sql.compile()","description":"Compiles the query into an SQL statement and a list of values, ready to be executed","sidebar":"tutorialSidebar"},"api/sql-identifier":{"id":"api/sql-identifier","title":"sql.identifier()","description":"Represents a safely escaped SQL identifier; if multiple arguments are passed then each will be escaped and then they will be joined with dots (e.g. \\"schema\\".\\"table\\".\\"column\\").","sidebar":"tutorialSidebar"},"api/sql-join":{"id":"api/sql-join","title":"sql.join()","description":"Joins an array of sql values using the delimiter (which is treated as a raw SQL string); e.g.","sidebar":"tutorialSidebar"},"api/sql-literal":{"id":"api/sql-literal","title":"sql.literal()","description":"As sql.value, but in the case of very simple values may write them directly to the SQL statement rather than using a placeholder. Should only be used with data that is not sensitive and is trusted (not user-provided data), e.g. for the key arguments to jsonbuildobject(key, val, key, val, ...) which you have produced.","sidebar":"tutorialSidebar"},"api/sql-value":{"id":"api/sql-value","title":"sql.value()","description":"Represents an SQL value, will be replaced with a placeholder and the value collected up at compile time.","sidebar":"tutorialSidebar"},"index":{"id":"index","title":"pg-sql2 Introduction","description":"Create highly dynamic SQL in a powerful and flexible manner without opening yourself to SQL injection attacks.","sidebar":"tutorialSidebar"}}}')}}]);