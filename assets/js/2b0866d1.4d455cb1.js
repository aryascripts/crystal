"use strict";(self.webpackChunk_localrepo_postgraphile_website=self.webpackChunk_localrepo_postgraphile_website||[]).push([[7146],{30876:(e,t,a)=>{a.d(t,{Zo:()=>g,kt:()=>d});var n=a(2784);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var s=n.createContext({}),p=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},g=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,g=o(e,["components","mdxType","originalType","parentName"]),u=p(a),c=i,d=u["".concat(s,".").concat(c)]||u[c]||m[c]||r;return a?n.createElement(d,l(l({ref:t},g),{},{components:a})):n.createElement(d,l({ref:t},g))}));function d(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=a.length,l=new Array(r);l[0]=c;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[u]="string"==typeof e?e:i,l[1]=o;for(var p=2;p<r;p++)l[p]=a[p];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}c.displayName="MDXCreateElement"},82225:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>m,frontMatter:()=>r,metadata:()=>o,toc:()=>p});var n=a(7896),i=(a(2784),a(30876));const r={layout:"page",path:"/postgraphile/make-pg-smart-tags-plugin/",title:"makePgSmartTagsPlugin (graphile-utils v4.5.0+)"},l=void 0,o={unversionedId:"make-pg-smart-tags-plugin",id:"version-4.x/make-pg-smart-tags-plugin",title:"makePgSmartTagsPlugin (graphile-utils v4.5.0+)",description:"Smart Tags enable you to customize how (or if) your PostgreSQL resources are",source:"@site/versioned_docs/version-4.x/make-pg-smart-tags-plugin.md",sourceDirName:".",slug:"/make-pg-smart-tags-plugin",permalink:"/postgraphile/current/make-pg-smart-tags-plugin",draft:!1,editUrl:"https://github.com/graphile/crystal/tree/main/postgraphile/website/versioned_docs/version-4.x/make-pg-smart-tags-plugin.md",tags:[],version:"4.x",frontMatter:{layout:"page",path:"/postgraphile/make-pg-smart-tags-plugin/",title:"makePgSmartTagsPlugin (graphile-utils v4.5.0+)"},sidebar:"docs",previous:{title:"makeAddPgTableOrderByPlugin (graphile-utils v4.4.5+)",permalink:"/postgraphile/current/make-add-pg-table-order-by-plugin"},next:{title:"makePluginByCombiningPlugins (graphile-utils)",permalink:"/postgraphile/current/make-plugin-by-combining-plugins"}},s={},p=[{value:"makePgSmartTagsFromFilePlugin",id:"makepgsmarttagsfromfileplugin",level:3},{value:"makeJSONPgSmartTagsPlugin",id:"makejsonpgsmarttagsplugin",level:3},{value:"makePgSmartTagsPlugin",id:"makepgsmarttagsplugin",level:3},{value:"Source code",id:"source-code",level:3}],g={toc:p},u="wrapper";function m(e){let{components:t,...a}=e;return(0,i.kt)(u,(0,n.Z)({},g,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Smart Tags enable you to customize how (or if) your PostgreSQL resources are\nrepresented in your PostGraphile GraphQL schema. Before reading this page, you\nshould familiarize yourself with ",(0,i.kt)("a",{parentName:"p",href:"./smart-tags/"},"Smart Tags")," so that you know\nwhen and why you would use them."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"makePgSmartTagsPlugin")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"makeJSONPgSmartTagsPlugin")," are plugin generators\nthat allows you to easily apply smart tags to various PostgreSQL entities."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"makePgSmartTagsFromFilePlugin")," is the highest level function, and loads smart\ntags from a JSON5 file."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"makeJSONPgSmartTagsPlugin")," is like ",(0,i.kt)("inlineCode",{parentName:"li"},"makePgSmartTagsFromFilePlugin"),", except it\nallows you to specify the configuration object in code rather than via a JSON5\nfile."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"makePgSmartTagsPlugin")," is the lowest level plugin, it allows you to apply\nsmart tags to PostgreSQL entities that match your specified rules.")),(0,i.kt)("p",null,"We recommend the ",(0,i.kt)("a",{parentName:"p",href:"./smart-tags-file/"},"postgraphile.tags.json5 file")," to most\nusers; but the below plugin generators can be helpful if you have more advanced\nneeds."),(0,i.kt)("h3",{id:"makepgsmarttagsfromfileplugin"},"makePgSmartTagsFromFilePlugin"),(0,i.kt)("p",null,"Unlike most other plugin generators, this plugin comes from\n",(0,i.kt)("inlineCode",{parentName:"p"},"postgraphile/plugins"),". The reason it's not in ",(0,i.kt)("inlineCode",{parentName:"p"},"graphile-utils")," is because it\nneeds to access the file-system."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'const { makePgSmartTagsFromFilePlugin } = require("postgraphile/plugins");\n')),(0,i.kt)("p",null,"Usage example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'const SmartTagsPlugin = makePgSmartTagsFromFilePlugin(\n  // JSON and JSONC are also JSON5 compatible, so you can use these extensions if you prefer:\n  "/path/to/my/tags.file.json5",\n);\n\n// ...\n\napp.use(\n  postgraphile(process.env.DATABASE_URL, "app_public", {\n    //...\n    appendPlugins: [SmartTagsPlugin],\n  }),\n);\n')),(0,i.kt)("p",null,"This plugin powers the automatic\n",(0,i.kt)("a",{parentName:"p",href:"./smart-tags-file/"},"postgraphile.tags.json5 file")," support in PostGraphile CLI,\nand can be used as above for library users. You can even use it multiple times\nto merge smart tags from multiple files should you wish."),(0,i.kt)("h3",{id:"makejsonpgsmarttagsplugin"},"makeJSONPgSmartTagsPlugin"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'const { makeJSONPgSmartTagsPlugin } = require("graphile-utils");\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"function makeJSONPgSmartTagsPlugin(\n  json: JSONPgSmartTags | null,\n  subscribeToJSONUpdatesCallback?: SubscribeToJSONPgSmartTagsUpdatesCallback | null,\n): Plugin;\n\ntype JSONPgSmartTags = {\n  version: 1;\n  config: {\n    [kind in PgSmartTagSupportedKinds]?: {\n      [identifier: string]: {\n        tags?: PgSmartTagTags;\n        description?: string;\n        attribute?: {\n          [attributeName: string]: {\n            tags?: PgSmartTagTags;\n            description?: string;\n          };\n        };\n        constraint?: {\n          [constraintName: string]: {\n            tags?: PgSmartTagTags;\n            description?: string;\n          };\n        };\n      };\n    };\n  };\n};\n\ntype SubscribeToJSONPgSmartTagsUpdatesCallback = (\n  cb: UpdateJSONPgSmartTagsCallback | null,\n) => void | Promise<void>;\n")),(0,i.kt)("p",null,"This plugin generator takes a ",(0,i.kt)("inlineCode",{parentName:"p"},"JSONPgSmartTags")," object, and adds the relevant\ntags to the relevant entities referenced. It is what powers\nmakePgSmartTagsFromFilePlugin above, but you can also use it in your own\nPostGraphile schema plugins."),(0,i.kt)("p",null,"An example of an empty ",(0,i.kt)("inlineCode",{parentName:"p"},"JSONPgSmartTags")," object would be:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json5"},"{\n  version: 1,\n  config: {\n    class: {},\n    attribute: {},\n    constraint: {},\n    procedure: {},\n  },\n}\n")),(0,i.kt)("p",null,"A more in-depth example of this configuration file, with comments, is available\nin ",(0,i.kt)("a",{parentName:"p",href:"./smart-tags-file/"},"the postgraphile.tags.json5 file documentation"),"."),(0,i.kt)("p",null,'Within the config object, we can add entries for each supported "kind" of\nPostgreSQL entity. The supported entities include:'),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"class")," - for tables, views, materialized views, compound types and other\ntable-like entities; things you'd find in the\n",(0,i.kt)("a",{parentName:"li",href:"https://www.postgresql.org/docs/current/catalog-pg-class.html"},(0,i.kt)("inlineCode",{parentName:"a"},"pg_class")," PostgreSQL system table"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"attribute")," - for columns/attributes of a ",(0,i.kt)("inlineCode",{parentName:"li"},"class"),"; things you'd find in the\n",(0,i.kt)("a",{parentName:"li",href:"https://www.postgresql.org/docs/current/catalog-pg-attribute.html"},(0,i.kt)("inlineCode",{parentName:"a"},"pg_attribute")," PostgreSQL system table"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"constraint")," - for constraints; things you'd find in the\n",(0,i.kt)("a",{parentName:"li",href:"https://www.postgresql.org/docs/current/catalog-pg-constraint.html"},(0,i.kt)("inlineCode",{parentName:"a"},"pg_constraint")," PostgreSQL system table"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"procedure")," - for functions and procedures; things you'd find in the\n",(0,i.kt)("a",{parentName:"li",href:"https://www.postgresql.org/docs/current/catalog-pg-proc.html"},(0,i.kt)("inlineCode",{parentName:"a"},"pg_proc")," PostgreSQL system table"))),(0,i.kt)("p",null,"The value for each of these kinds would be another object, keyed by the\nidentifier of the PostgreSQL entity, then containing the configuration for that\nentity type. Identifiers for each entity type differ:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"class")," - ",(0,i.kt)("inlineCode",{parentName:"li"},"schema_name.table_name")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"attribute")," - ",(0,i.kt)("inlineCode",{parentName:"li"},"schema_name.table_name.column_name")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"constraint")," - ",(0,i.kt)("inlineCode",{parentName:"li"},"schema_name.table_name.constraint_name")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"procedure")," - ",(0,i.kt)("inlineCode",{parentName:"li"},"schema_name.function_name")," (NOTE: since PostGraphile doesn't\nsupport function overloading, function parameters are not factored into the\nidentifier.)")),(0,i.kt)("p",null,"For each identifier, you may present the fully qualified form as shown above, or\nyou may drop the left most segments, e.g. a column ",(0,i.kt)("inlineCode",{parentName:"p"},"id")," in table ",(0,i.kt)("inlineCode",{parentName:"p"},"users")," in\nschema ",(0,i.kt)("inlineCode",{parentName:"p"},"app_public")," could be specified as ",(0,i.kt)("inlineCode",{parentName:"p"},"app_public.users.id")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"users.id")," or\njust ",(0,i.kt)("inlineCode",{parentName:"p"},"id"),"."),(0,i.kt)("p",null,"Where the form used is not fully qualified, the configuration will be applied to\nall entities that match. For example if you wanted to omit create/update on all\n",(0,i.kt)("inlineCode",{parentName:"p"},"created_at"),"/",(0,i.kt)("inlineCode",{parentName:"p"},"updated_at")," columns across all your tables, the configuration\nmight look like:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json5"},'{\n  version: 1,\n  config: {\n    attribute: {\n      created_at: { tags: { omit: "create,update" } },\n      updated_at: { tags: { omit: "create,update" } },\n    },\n  },\n}\n')),(0,i.kt)("p",null,"The configuration object for each matched entity accepts the following\nparameters (all optional):"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"tags")," - a map of all the tags you wish to apply; these will be merged with\nthe tags applied through other means (overwriting tags of the same name). See\nthe Smart Tags documentation for more information about what tags are\navailable, and what values they can have."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"description")," - a description to apply to this resource, equivalent to using\n",(0,i.kt)("inlineCode",{parentName:"li"},"COMMENT ON")," on the underlying PostgreSQL entity (except that Smart Comment\nparsing does not take place).")),(0,i.kt)("p",null,"For the ",(0,i.kt)("inlineCode",{parentName:"p"},"class")," entity type, the following convenience attributes are also\navailable to enable you to keep tables, columns and constraints configured in\nthe same location. When used, the column/constraint identifiers must ",(0,i.kt)("strong",{parentName:"p"},"not")," be\nfully qualified, since the table identifier will be automatically prepended for\nyou."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"attribute")," - for columns"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"constraint")," - for constraints")),(0,i.kt)("p",null,"To have this plugin work in watch mode, a ",(0,i.kt)("inlineCode",{parentName:"p"},"subscribeToJSONUpdatesCallback"),"\nmethod can be passed as a second argument. If/when Graphile Engine enters watch\nmode (e.g. via ",(0,i.kt)("inlineCode",{parentName:"p"},"postgraphile --watch"),"), this callback will be called, and it\nwill be passed a callback function that in turn must be called when a change\ntakes place. When watch mode is exited, the function will be called again\nwithout a callback, and whatever was in place for watching must be released. An\nexample implementation of this can be found in ",(0,i.kt)("inlineCode",{parentName:"p"},"makePgSmartTagsFromFilePlugin"),"\nin PostGraphile itself, which monitors a JSON5 file for changes and triggers the\nschema to refresh when this file changes. See:\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/graphile/postgraphile/blob/9de271ecdddcd13fd42f8eac6777f0057ee8f7e7/src/plugins.ts#L23-L47"},"https://github.com/graphile/postgraphile/blob/9de271ecdddcd13fd42f8eac6777f0057ee8f7e7/src/plugins.ts#L23-L47")),(0,i.kt)("h3",{id:"makepgsmarttagsplugin"},"makePgSmartTagsPlugin"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'const { makePgSmartTagsPlugin } = require("graphile-utils");\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"function makePgSmartTagsPlugin(\n  ruleOrRules: PgSmartTagRule | PgSmartTagRule[] | null,\n  subscribeToUpdatesCallback?: SubscribeToPgSmartTagUpdatesCallback | null,\n): Plugin;\n\ninterface PgSmartTagRule<T extends PgEntity = PgEntity> {\n  kind: PgEntityKind;\n  match: string | PgSmartTagFilterFunction<T>;\n  tags?: PgSmartTagTags;\n  description?: string;\n}\n\ntype PgSmartTagFilterFunction<T> = (input: T, build: Build) => boolean;\n\ntype UpdatePgSmartTagRulesCallback = (\n  ruleOrRules: PgSmartTagRule | PgSmartTagRule[] | null,\n) => void;\n\ntype SubscribeToPgSmartTagUpdatesCallback = (\n  cb: UpdatePgSmartTagRulesCallback | null,\n) => void | Promise<void>;\n")),(0,i.kt)("p",null,"This is a more versatile, but higher effort plugin generator that powers\n",(0,i.kt)("inlineCode",{parentName:"p"},"makeJSONPgSmartTagsPlugin"),". Rather than passing a configuration object, a list\nof rules (or a single rule) is passed."),(0,i.kt)("p",null,"Rules must specify a ",(0,i.kt)("inlineCode",{parentName:"p"},"kind")," (",(0,i.kt)("inlineCode",{parentName:"p"},"class"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"attribute"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"constraint")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"procedure"),")\nand a ",(0,i.kt)("inlineCode",{parentName:"p"},"match")," which could be the identifier (following the same rules as for\n",(0,i.kt)("inlineCode",{parentName:"p"},"makeJSONPgSmartTagsPlugin"),") or a matcher function. The matcher function makes\nthis plugin generator incredibly powerful, for example it could be used to apply\ntags to all PostgreSQL entities that match a particular criteria that does not\nneed to relate to the entity's name. The matcher function is passed the Graphile\nEngine representation of the entity type (see\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/graphile/graphile-engine/blob/49c99ced8a186a42d4f3f20c66cd3761f61cd4c3/packages/graphile-build-pg/src/plugins/PgIntrospectionPlugin.d.ts#L22-L145"},"PgIntrospectionPlugin"),"\nfor these definitions) and the ",(0,i.kt)("inlineCode",{parentName:"p"},"Build")," object, and must return a boolean to say\nwhether this entity should be matched or not."),(0,i.kt)("p",null,"Like with ",(0,i.kt)("inlineCode",{parentName:"p"},"makeJSONPgSmartTagsPlugin"),", the rule may also optionally supply the\n",(0,i.kt)("inlineCode",{parentName:"p"},"tags")," Smart Tags object to be merged, and a ",(0,i.kt)("inlineCode",{parentName:"p"},"description")," to overwrite the\nprevious description."),(0,i.kt)("p",null,"The plugin also supports a ",(0,i.kt)("inlineCode",{parentName:"p"},"subscribeToUpdatesCallback")," to enable watch mode,\nwhich works in the same way as ",(0,i.kt)("inlineCode",{parentName:"p"},"subscribeToJSONUpdatesCallback")," from\n",(0,i.kt)("inlineCode",{parentName:"p"},"makeJSONPgSmartTagsPlugin"),"."),(0,i.kt)("h3",{id:"source-code"},"Source code"),(0,i.kt)("p",null,"Please refer to\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/graphile/graphile-engine/blob/master/packages/graphile-utils/src/makePgSmartTagsPlugin.ts"},"https://github.com/graphile/graphile-engine/blob/master/packages/graphile-utils/src/makePgSmartTagsPlugin.ts"),",\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/graphile/postgraphile/blob/9de271ecdddcd13fd42f8eac6777f0057ee8f7e7/src/plugins.ts#L23-L47"},"https://github.com/graphile/postgraphile/blob/9de271ecdddcd13fd42f8eac6777f0057ee8f7e7/src/plugins.ts#L23-L47"),"\nand ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/graphile/graphile-engine/pull/541"},"https://github.com/graphile/graphile-engine/pull/541")))}m.isMDXComponent=!0}}]);