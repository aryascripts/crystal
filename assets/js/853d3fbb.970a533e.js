"use strict";(self.webpackChunk_localrepo_postgraphile_website=self.webpackChunk_localrepo_postgraphile_website||[]).push([[6911],{30876:(e,t,n)=>{n.d(t,{Zo:()=>h,kt:()=>c});var a=n(2784);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},h=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,h=s(e,["components","mdxType","originalType","parentName"]),m=p(n),d=i,c=m["".concat(l,".").concat(d)]||m[d]||u[d]||r;return n?a.createElement(c,o(o({ref:t},h),{},{components:n})):a.createElement(c,o({ref:t},h))}));function c(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[m]="string"==typeof e?e:i,o[1]=s;for(var p=2;p<r;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},58617:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>p});var a=n(7896),i=(n(2784),n(30876));const r={title:"Configuration"},o="Configuration",s={unversionedId:"config",id:"config",title:"Configuration",description:"No matter whether you're using PostGraphile CLI, library mode or schema only,",source:"@site/postgraphile/config.mdx",sourceDirName:".",slug:"/config",permalink:"/postgraphile/next/config",draft:!1,editUrl:"https://github.com/graphile/crystal/tree/main/postgraphile/website/postgraphile/config.mdx",tags:[],version:"current",frontMatter:{title:"Configuration"},sidebar:"docs",previous:{title:"Usage - Schema Only",permalink:"/postgraphile/next/usage-schema"},next:{title:"Requirements",permalink:"/postgraphile/next/requirements"}},l={},p=[{value:"Creating your configuration file",id:"creating-your-configuration-file",level:2},{value:"General structure",id:"general-structure",level:2},{value:"Simple example",id:"simple-example",level:3},{value:"Larger example",id:"larger-example",level:3},{value:"Viewing the available options",id:"viewing-the-available-options",level:3},{value:"Viewing the resolved configuration",id:"viewing-the-resolved-configuration",level:3},{value:"Option reference",id:"option-reference",level:2},{value:"<code>inflection</code> options",id:"inflection-options",level:3},{value:"<code>pgServices</code>",id:"pgservices",level:3},{value:"<code>makePgService</code>",id:"makepgservice",level:3},{value:"<code>adaptorSettings</code>",id:"adaptorsettings",level:4},{value:"<code>postgraphile/adaptors/pg</code>",id:"postgraphileadaptorspg",level:5},{value:"<code>gather</code> options",id:"gather-options",level:3},{value:"<code>schema</code> options",id:"schema-options",level:3},{value:"<code>grafast</code> options",id:"grafast-options",level:3},{value:"<code>grafserv</code> options",id:"grafserv-options",level:3},{value:"Making HTTP data available to plan resolvers",id:"making-http-data-available-to-plan-resolvers",level:2},{value:"<code>pgSettings</code>",id:"pgsettings",level:2},{value:"Exposing HTTP request data to PostgreSQL",id:"exposing-http-request-data-to-postgresql",level:3},{value:"Accessing pgSettings data in PostgreSQL",id:"accessing-pgsettings-data-in-postgresql",level:3}],h={toc:p},m="wrapper";function u(e){let{components:t,...r}=e;return(0,i.kt)(m,(0,a.Z)({},h,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"configuration"},"Configuration"),(0,i.kt)("p",null,"No matter whether you're using PostGraphile CLI, library mode or schema only,\nPostGraphile (and other elements of the stack including Graphile Build,\nGra",(0,i.kt)("em",{parentName:"p"},"fast")," and Grafserv) are configured via a ",(0,i.kt)("a",{parentName:"p",href:"https://star.graphile.org/graphile-config/preset"},(0,i.kt)("inlineCode",{parentName:"a"},"graphile-config"),'\n"preset."')),(0,i.kt)("p",null,"A preset is a simple JS object that contains a combination of: other presets,\nplugins, and options for the various scopes. Your configuration, your preset,\nwill almost certainly need to extend an existing preset or presets; which\npreset(s) to extend depends on what you're looking for from PostGraphile."),(0,i.kt)("p",null,"The PostGraphile base presets are named after crystals; the first base preset\navailable is ",(0,i.kt)("inlineCode",{parentName:"p"},"postgraphile/presets/amber"),", so you'll almost definitely want\nthat."),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"Please don't name your own presets after crystals, or we may end up having\nconfusion!")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"If you're coming from PostGraphile V4")," you may then want to add your own\nV4-themed preset with the ",(0,i.kt)("inlineCode",{parentName:"p"},"makeV4Preset()")," factory - see the ",(0,i.kt)("a",{parentName:"p",href:"./migrating-from-v4/"},"V4 migration\ndocs")," for more information."),(0,i.kt)("p",null,"If your schema is meant to be consumed by Relay, you may add the\n",(0,i.kt)("inlineCode",{parentName:"p"},"postgraphile/presets/relay")," preset which enables behaviors and plugins\noptimized for Relay consumption."),(0,i.kt)("h2",{id:"creating-your-configuration-file"},"Creating your configuration file"),(0,i.kt)("p",null,"Though you can build a preset anywhere in your source code and pass it to the\nrelevant APIs, we recommend that you put your preset into a\n",(0,i.kt)("inlineCode",{parentName:"p"},"graphile.config.mjs")," (or ",(0,i.kt)("inlineCode",{parentName:"p"},".ts")," or ",(0,i.kt)("inlineCode",{parentName:"p"},".mts")," or ",(0,i.kt)("inlineCode",{parentName:"p"},".js")," etc) file, so that it can\neasily be picked up by the PostGraphile CLI and any other utilities (e.g. the\n",(0,i.kt)("inlineCode",{parentName:"p"},"graphile")," command). You may write your preset in either JS or TS, and you may\nexpose it as either CommonJS (",(0,i.kt)("inlineCode",{parentName:"p"},"module.exports = ...;"),") or ESM (",(0,i.kt)("inlineCode",{parentName:"p"},"export default\n...;"),"). In our examples, we'll typically use ",(0,i.kt)("inlineCode",{parentName:"p"},".mjs")," since it's modern but\nwithout the overhead of requiring TypeScript."),(0,i.kt)("p",null,'Here\'s an example preset that just extends the "Amber" preset:'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="graphile.config.mjs"',title:'"graphile.config.mjs"'},'import { PostGraphileAmberPreset } from "postgraphile/presets/amber";\n\n/** @type {GraphileConfig.Preset} */\nconst preset = {\n  extends: [PostGraphileAmberPreset],\n};\n\nexport default preset;\n')),(0,i.kt)("p",null,"You could also have created this in TypeScript, in which case you might add a\ncouple of ",(0,i.kt)("inlineCode",{parentName:"p"},"import")," statements to the top in order to ensure that the relevant\nTypeScript types exist."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="graphile.config.ts"',title:'"graphile.config.ts"'},'import "graphile-config";\nimport "postgraphile";\nimport { PostGraphileAmberPreset } from "postgraphile/presets/amber";\n\nconst preset: GraphileConfig.Preset = {\n  extends: [PostGraphileAmberPreset],\n};\n\nexport default preset;\n')),(0,i.kt)("p",null,"Similarly you can create your config as a ",(0,i.kt)("inlineCode",{parentName:"p"},".js"),", ",(0,i.kt)("inlineCode",{parentName:"p"},".cjs"),", ",(0,i.kt)("inlineCode",{parentName:"p"},".mts")," or ",(0,i.kt)("inlineCode",{parentName:"p"},".cts")," file;\nthe PostGraphile CLI will pick up all of these automatically assuming that you\nhave TypeScript installed locally."),(0,i.kt)("h2",{id:"general-structure"},"General structure"),(0,i.kt)("p",null,"A preset is a plain JavaScript object, and every key in the preset is optional.\n",(0,i.kt)("inlineCode",{parentName:"p"},"{}")," is a valid (but not very useful!) preset. The key ",(0,i.kt)("inlineCode",{parentName:"p"},"default")," is forbidden\nat the top level of a preset, this allows us to detect common issues with\nESM/CommonJS interoperability."),(0,i.kt)("p",null,"The value for the ",(0,i.kt)("inlineCode",{parentName:"p"},"extends")," key, if specified, must be an array of other presets\nyour preset wishes to inherit from."),(0,i.kt)("p",null,"The value for the ",(0,i.kt)("inlineCode",{parentName:"p"},"plugins")," key, if specified, must be an array of\n",(0,i.kt)("a",{parentName:"p",href:"https://star.graphile.org/graphile-config/plugin"},(0,i.kt)("inlineCode",{parentName:"a"},"graphile-config")," plugins"),"\nthat your preset wishes to make use of. Plugins must always have unique names,\nand will be automatically de-duplicated by the system if the same plugin is\nreferenced in multiple presets."),(0,i.kt)("p",null,"The preset also accepts keys for each supported scope. ",(0,i.kt)("inlineCode",{parentName:"p"},"graphile-config")," has no\nnative scopes, but different Graphile projects can register their own scopes.\nFor example: ",(0,i.kt)("inlineCode",{parentName:"p"},"graphile-build")," registers the ",(0,i.kt)("inlineCode",{parentName:"p"},"inflection"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"gather")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"schema"),"\nscopes; ",(0,i.kt)("inlineCode",{parentName:"p"},"graphile-build-pg")," registers the ",(0,i.kt)("inlineCode",{parentName:"p"},"pgServices")," scope; Gra",(0,i.kt)("em",{parentName:"p"},"fast"),"\nregisters the ",(0,i.kt)("inlineCode",{parentName:"p"},"grafast")," scope; Grafserv registers the ",(0,i.kt)("inlineCode",{parentName:"p"},"grafserv")," scope; and\n",(0,i.kt)("inlineCode",{parentName:"p"},"ruru")," registers the ",(0,i.kt)("inlineCode",{parentName:"p"},"ruru")," scope."),(0,i.kt)("p",null,"We highly recommend using TypeScript for dealing with your preset so that you\nget auto-completion for the options available in each scope; you can also use\nthe ",(0,i.kt)("inlineCode",{parentName:"p"},"graphile config options")," command detailed below. It may be necessary to\nadd ",(0,i.kt)("inlineCode",{parentName:"p"},'import "postgraphile"')," at the top of the configuration file so that\nTypeScript imports all the available scopes."),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"The schema build process in PostGraphile is:"),(0,i.kt)("ul",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ul"},"Synchronously build the inflectors via the ",(0,i.kt)("inlineCode",{parentName:"li"},"inflection")," phase - inflectors are\nused throughout the phases"),(0,i.kt)("li",{parentName:"ul"},"Asynchronously build the registry by performing database introspection in the\n",(0,i.kt)("inlineCode",{parentName:"li"},"gather")," phase"),(0,i.kt)("li",{parentName:"ul"},"Synchronously determine the behaviors of each of the entities in the registry during the ",(0,i.kt)("inlineCode",{parentName:"li"},"behavior")," phase"),(0,i.kt)("li",{parentName:"ul"},"Synchronously build the GraphQL schema during the ",(0,i.kt)("inlineCode",{parentName:"li"},"schema")," phase"))),(0,i.kt)("h3",{id:"simple-example"},"Simple example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="graphile.config.ts"',title:'"graphile.config.ts"'},'import "postgraphile"; // To import the TypeScript types\nimport { PostGraphileAmberPreset } from "postgraphile/presets/amber";\nimport { makePgService } from "postgraphile/adaptors/pg";\n\nconst preset: GraphileConfig.Preset = {\n  extends: [PostGraphileAmberPreset],\n  grafserv: { port: 5678 },\n  pgServices: [makePgService({ connectionString: "postgres:///my_db" })],\n};\n')),(0,i.kt)("h3",{id:"larger-example"},"Larger example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="graphile.config.ts"',title:'"graphile.config.ts"'},'// Only needed for TypeScript types support\nimport "postgraphile";\n\n// The standard base preset to use, includes the main PostGraphile features\nimport { PostGraphileAmberPreset } from "postgraphile/presets/amber";\n\n// More presets you might want to mix in\nimport { makeV4Preset } from "postgraphile/presets/v4";\nimport { PgRelayPreset } from "postgraphile/presets/relay";\n\n// Use the \'pg\' module to connect to the database\nimport { makePgService } from "postgraphile/adaptors/pg";\n\n// In case we want to customize the Ruru we render:\nimport { defaultHTMLParts } from "postgraphile/grafserv/ruru/server";\n\n// A plugin for the system to use for persisted operations support\nimport PersistedPlugin from "@grafserv/persisted";\n\nconst preset: GraphileConfig.Preset = {\n  extends: [\n    PostGraphileAmberPreset,\n    /* Add more presets here, e.g.: */\n    makeV4Preset({\n      simpleCollections: "both",\n      jwtPgTypeIdentifier: \'"b"."jwt_token"\',\n      dynamicJson: true,\n      graphiql: true,\n      graphiqlRoute: "/",\n    }),\n    PgRelayPreset,\n  ],\n\n  plugins: [\n    /* Add plugins here, e.g.: */\n    PersistedPlugin,\n  ],\n\n  inflection: {\n    /* options for the inflection system */\n  },\n  gather: {\n    /* options for the gather phase, e.g.: */\n    pgStrictFunctions: true,\n    installWatchFixtures: true,\n  },\n  schema: {\n    /* options for the schema build phase, e.g.: */\n    retryOnInitFail: true,\n    exportSchemaSDLPath: `${process.cwd()}/latestSchema.graphql`,\n    exportSchemaIntrospectionResultPath: `${process.cwd()}/latestSchema.json`,\n    sortExport: true,\n  },\n  grafast: {\n    /* options for Grafast, including setting GraphQL context, e.g.: */\n    context: {\n      meaningOfLife: 42,\n    },\n    // explain: true, // DO NOT ENABLE IN PRODUCTION!\n  },\n  grafserv: {\n    /* options for Grafserv, e.g.: */\n    port: 5678,\n    graphqlPath: "/graphql",\n    websockets: true,\n    graphqlOverGET: true,\n    persistedOperationsDirectory: `${process.cwd()}/.persisted_operations`,\n    allowUnpersistedOperation: true,\n  },\n  ruru: {\n    /* options for customizing Ruru, e.g.: */\n    htmlParts: {\n      metaTags: defaultHTMLParts.metaTags + "\x3c!-- HELLO WORLD! --\x3e",\n    },\n  },\n  pgServices: [\n    /* list of PG database configurations, e.g.: */\n    makePgService({\n      // Database connection string, read from an environmental variable:\n      connectionString: process.env.DATABASE_URL,\n\n      // List of database schemas to expose:\n      schemas: ["app_public"],\n\n      // Enable LISTEN/NOTIFY:\n      pubsub: true,\n    }),\n  ],\n};\n\nexport default preset;\n')),(0,i.kt)("h3",{id:"viewing-the-available-options"},"Viewing the available options"),(0,i.kt)("p",null,"Once you have a basic configuration file, you can use the ",(0,i.kt)("inlineCode",{parentName:"p"},"graphile")," CLI to\nfind out what options are available to you:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"graphile config options\n")),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"The ",(0,i.kt)("inlineCode",{parentName:"p"},"graphile")," CLI is a development aid only, and is not needed at runtime or\nin production (or in development really, it's just a handy little helper). This\nutility is sponsors-only source-available software. If you're not a sponsor\nthere's a 30 day free trial that starts as soon as you run it for the first\ntime. You may sponsor at any level for access to this utility. Read the details\nin the ",(0,i.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/graphile/v/alpha"},"graphile command's\nREADME"),".")),(0,i.kt)("p",null,"Note that the options available will be influenced by the modules that you are\nusing, so be sure to import any plugins and presets at the top of your config\nfile."),(0,i.kt)("figure",null,(0,i.kt)("p",null,(0,i.kt)("a",{target:"_blank",href:n(51588).Z},(0,i.kt)("img",{alt:"Cropped screenshot of &#39;graphile config options&#39;",src:n(36054).Z,width:"1931",height:"1053"}))),(0,i.kt)("figcaption",null,"Screenshot of part of the coloured markdown output from executing ",(0,i.kt)("code",null,"graphile config options")," showing the options available to be set inside the config file.")),(0,i.kt)("h3",{id:"viewing-the-resolved-configuration"},"Viewing the resolved configuration"),(0,i.kt)("p",null,"You can also use the ",(0,i.kt)("inlineCode",{parentName:"p"},"graphile")," CLI to print out your resolved configuration\n(once all the presets have been applied). This can help with debugging:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"graphile config print\n")),(0,i.kt)("figure",null,(0,i.kt)("p",null,(0,i.kt)("a",{target:"_blank",href:n(11992).Z},(0,i.kt)("img",{alt:"Cropped screenshot of &#39;graphile config print&#39;",src:n(91805).Z,width:"1893",height:"1148"}))),(0,i.kt)("figcaption",null,"Screenshot of part of the coloured output from executing ",(0,i.kt)("code",null,"graphile config print")," showing the options that the local configuration file is using.")),(0,i.kt)("h2",{id:"option-reference"},"Option reference"),(0,i.kt)("p",null,"What follows are some of the more commonly used options to serve as a quick\nreference, but this list can quickly become out of date (feel free to send a\nPR!). You can use TypeScript or the sponsors-only ",(0,i.kt)("inlineCode",{parentName:"p"},"graphile config options"),"\ncommand mentioned above to see what options are available to you - different\npresets and plugins make different options available."),(0,i.kt)("h3",{id:"inflection-options"},(0,i.kt)("inlineCode",{parentName:"h3"},"inflection")," options"),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"(TypeScript type: ",(0,i.kt)("inlineCode",{parentName:"em"},"GraphileBuild.InflectionOptions"),")")),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"None at this time.")),(0,i.kt)("h3",{id:"pgservices"},(0,i.kt)("inlineCode",{parentName:"h3"},"pgServices")),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"(TypeScript type: ",(0,i.kt)("inlineCode",{parentName:"em"},"ReadonlyArray<GraphileConfig.PgServiceConfiguration>"),")")),(0,i.kt)("p",null,"Details the PostgreSQL database(s) for PostGraphile to connect to; this is a\nseparate option because it's used in both the ",(0,i.kt)("inlineCode",{parentName:"p"},"gather")," phase (for introspection)\nand at runtime."),(0,i.kt)("p",null,"Generally it's best to construct this by using the ",(0,i.kt)("inlineCode",{parentName:"p"},"makePgService")," helper from\nthe adaptor(s) you are using (see below), but if you want to know the\nnitty-gritty: each entry in the list is an object with the following keys (only\n",(0,i.kt)("inlineCode",{parentName:"p"},"name")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"adaptor")," are required):"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"name: string")," - an arbitrary unique name for this config; please keep it\nalphanumeric! Don't set this unless you have more than one pgService; see\nwarning below."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"adaptor: string")," - the name of the module to use as the postgres adaptor;\ne.g. ",(0,i.kt)("inlineCode",{parentName:"li"},"@dataplan/pg/adaptors/pg")," for the ",(0,i.kt)("inlineCode",{parentName:"li"},"pg")," module"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"adaptorSettings")," - options to pass to the adaptor, these are different for\neach adaptor (see ",(0,i.kt)("a",{parentName:"li",href:"#adaptorsettings"},(0,i.kt)("inlineCode",{parentName:"a"},"adaptorSettings"))," below)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"schemas: string[]")," - an array of PostgreSQL schema names to use"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"pgSettings: (requestContext: Grafast.RequestContext) => Record<string, string> | null")," -\na callback function that will be called by the server to determine the\npgSettings to use for a particular request"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"pgSettingsForIntrospection: Record<string, string> | null")," - the pgSettings\nto use when introspecting the database (for example if you want to change\nroles)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"pgSubscriber: PgSubscriber")," - a ",(0,i.kt)("inlineCode",{parentName:"li"},"PgSubscriber")," instance that allows code to\nsubscribe to LISTEN/NOTIFY events in the database - useful for GraphQL\nsubscriptions, and also for schema watch mode."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"withPgClientKey: string")," - the key on the ",(0,i.kt)("inlineCode",{parentName:"li"},"context")," object to store the\n",(0,i.kt)("inlineCode",{parentName:"li"},"withPgClient")," method the schema uses for communicating with the database.\nDefaults to ",(0,i.kt)("inlineCode",{parentName:"li"},"withPgClient")," if ",(0,i.kt)("inlineCode",{parentName:"li"},"name")," is ",(0,i.kt)("inlineCode",{parentName:"li"},'"main"')," (the default), or\n",(0,i.kt)("inlineCode",{parentName:"li"},"${name}_withPgClient")," otherwise."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"pgSettingsKey: string")," - the key on the ",(0,i.kt)("inlineCode",{parentName:"li"},"context")," object to store the\n",(0,i.kt)("inlineCode",{parentName:"li"},"pgSettings")," configuration to use when communicating with the database.\nDefaults to ",(0,i.kt)("inlineCode",{parentName:"li"},"pgSettings")," if ",(0,i.kt)("inlineCode",{parentName:"li"},"name")," is ",(0,i.kt)("inlineCode",{parentName:"li"},'"main"')," (the default), or\n",(0,i.kt)("inlineCode",{parentName:"li"},"${name}_pgSettings")," otherwise."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"pgSubscriberKey: string")," - the key on the ",(0,i.kt)("inlineCode",{parentName:"li"},"context")," object to store the\n",(0,i.kt)("inlineCode",{parentName:"li"},"pgSubscriber")," instance to, for use during GraphQL subscriptions. Defaults to\n",(0,i.kt)("inlineCode",{parentName:"li"},"pgSubscriber")," if ",(0,i.kt)("inlineCode",{parentName:"li"},"name")," is ",(0,i.kt)("inlineCode",{parentName:"li"},'"main"')," (the default), or ",(0,i.kt)("inlineCode",{parentName:"li"},"${name}_pgSubscriber"),'\notherwise."')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="Example manual configuration"',title:'"Example',manual:!0,'configuration"':!0},'import * as pg from "pg";\n\nconst pgServices = [\n  {\n    name: "main",\n    schemas: ["app_public"],\n    pgSettingsKey: "pgSettings",\n    withPgClientKey: "withPgClient",\n    adaptor: "@dataplan/pg/adaptors/pg",\n    adaptorSettings: {\n      pool: new pg.Pool({ connectionString: process.env.DATABASE_URL }),\n      // superuserConnectionString: process.env.SUPERUSER_DATABASE_URL,\n    },\n  },\n];\n')),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("mdxAdmonitionTitle",{parentName:"admonition"},"Don't set ",(0,i.kt)("inlineCode",{parentName:"mdxAdmonitionTitle"},"name")," unless you need to!"),(0,i.kt)("p",{parentName:"admonition"},"We recommend that you don't set a ",(0,i.kt)("inlineCode",{parentName:"p"},"name")," unless you have more than one\npgService. If you do, the different services may need different properties on\n",(0,i.kt)("inlineCode",{parentName:"p"},"context")," to detail how to connect, the settings to use, and how to subscribe\nto events. The ",(0,i.kt)("inlineCode",{parentName:"p"},"withPgClientKey"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"pgSettingsKey")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"pgSubscriberKey")," options\ndictate under which keys these properties are stored on the context. By\ndefault, if the pgService's ",(0,i.kt)("inlineCode",{parentName:"p"},"name")," is left at its default (",(0,i.kt)("inlineCode",{parentName:"p"},'"main"'),") then it\nuses ",(0,i.kt)("inlineCode",{parentName:"p"},'"withPgClient"'),", ",(0,i.kt)("inlineCode",{parentName:"p"},'"pgSettings"')," and ",(0,i.kt)("inlineCode",{parentName:"p"},'"pgSubscriber"')," respectively for\nthese keys; otherwise it prefixes the keys with the name of the service and an\nunderscore, for example a pgService with ",(0,i.kt)("inlineCode",{parentName:"p"},'name: "otherdb"')," would use the\ncontext keys ",(0,i.kt)("inlineCode",{parentName:"p"},"otherdb_withPgClient"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"otherdb_pgSettings")," and\n",(0,i.kt)("inlineCode",{parentName:"p"},"otherdb_pgSubscriber"),".")),(0,i.kt)("h3",{id:"makepgservice"},(0,i.kt)("inlineCode",{parentName:"h3"},"makePgService")),(0,i.kt)("p",null,"When PostGraphile (or, strictly, ",(0,i.kt)("inlineCode",{parentName:"p"},"@dataplan/pg"),') wishes to communicate with\nPostgreSQL, it does so using an "adaptor". The adaptor must expose a common set\nof functionality, but on top of that it can add adaptor-specific features, for\nexample you might write an adaptor to add support for using your ORM of choice,\nso that in your custom fields/plan resolvers you can use that ORM to execute\nqueries against the database.'),(0,i.kt)("p",null,"Your choice of adaptor is quite important if you want to write custom JS logic\nin your schema, but otherwise it likely comes down to performance, convenience,\nand maybe avoiding additional dependencies. By default, PostGraphile uses the\n",(0,i.kt)("inlineCode",{parentName:"p"},"postgraphile/adaptors/pg")," adaptor which wraps ",(0,i.kt)("a",{parentName:"p",href:"https://npmjs.com/package/pg"},"the ",(0,i.kt)("inlineCode",{parentName:"a"},"pg"),"\nmodule"),"."),(0,i.kt)("p",null,"Every adaptor should expose a ",(0,i.kt)("inlineCode",{parentName:"p"},"makePgService")," helper function that takes a\ncommon set of optional configuration parameters:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"connectionString")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"schemas")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"superuserConnectionString")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"pubsub")," (create a pgSubscriber entry; should default to ",(0,i.kt)("inlineCode",{parentName:"li"},"true"),")"),(0,i.kt)("li",{parentName:"ul"},"pass-through options (same as in ",(0,i.kt)("inlineCode",{parentName:"li"},"pgServices")," above):",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"name"),' (default: "main")'),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"pgSettingsKey")," (default with default ",(0,i.kt)("inlineCode",{parentName:"li"},"name"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"pgSettings"),", otherwise: ",(0,i.kt)("inlineCode",{parentName:"li"},"${name}_pgSettings"),")"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"withPgClientKey")," (default with default ",(0,i.kt)("inlineCode",{parentName:"li"},"name"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"withPgClient"),", otherwise: ",(0,i.kt)("inlineCode",{parentName:"li"},"${name}_withPgClient"),")"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"pgSubscriberKey")," (default with default ",(0,i.kt)("inlineCode",{parentName:"li"},"name"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"pgSubscriber"),", otherwise: ",(0,i.kt)("inlineCode",{parentName:"li"},"${name}_pgSubscriber"),")"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"pgSettings"))))),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"These common options are those that the ",(0,i.kt)("inlineCode",{parentName:"p"},"postgraphile")," CLI might pass, which is\nwhy every adaptor should support them.")),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"The ",(0,i.kt)("inlineCode",{parentName:"p"},"name")," option must be unique across all your ",(0,i.kt)("inlineCode",{parentName:"p"},"pgServices"),"; therefore if you\nhave more than one entry in ",(0,i.kt)("inlineCode",{parentName:"p"},"pgServices")," you must give each additional entry an\nexplicit and unique name.")),(0,i.kt)("p",null,"Each adaptor may additionally accept any other options it likes (but care\nshould be taken to not conflict with options of other adaptors, or options that\nwe might want to add to core in future)."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"makePgService")," will return a fully resolved configuration object, suitable for\ninclusion into the ",(0,i.kt)("inlineCode",{parentName:"p"},"pgServices")," array in your ",(0,i.kt)("inlineCode",{parentName:"p"},"graphile.config.mjs")," (or similar)\nfile."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="Example configuration via makePgService"',title:'"Example',configuration:!0,via:!0,'makePgService"':!0},'import { makePgService } from "postgraphile/adaptors/pg";\n\n/** @type {GraphileConfig.Preset} */\nconst preset = {\n  // ...\n  pgServices: [\n    makePgService({\n      // Database connection string:\n      connectionString: process.env.DATABASE_URL,\n\n      // List of database schemas:\n      schemas: ["app_public"],\n\n      // Enable LISTEN/NOTIFY:\n      pubsub: true,\n\n      // Optional, only needed for `--watch` mode:\n      superuserConnectionString: process.env.SUPERUSER_DATABASE_URL,\n    }),\n  ],\n};\n')),(0,i.kt)("h4",{id:"adaptorsettings"},(0,i.kt)("inlineCode",{parentName:"h4"},"adaptorSettings")),(0,i.kt)("p",null,"Each adaptor has its own adaptor-specific settings."),(0,i.kt)("h5",{id:"postgraphileadaptorspg"},(0,i.kt)("inlineCode",{parentName:"h5"},"postgraphile/adaptors/pg")),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"(Or, equivalently, ",(0,i.kt)("inlineCode",{parentName:"em"},"postgraphile/@dataplan/pg/adaptors/pg")," or ",(0,i.kt)("inlineCode",{parentName:"em"},"@dataplan/pg/adaptors/pg"),")")),(0,i.kt)("p",null,"This adaptor uses the ",(0,i.kt)("inlineCode",{parentName:"p"},"pg")," module under the hood and uses the ",(0,i.kt)("inlineCode",{parentName:"p"},"pg.Pool")," API\nprimarily, it accepts the following options:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"pool")," - pass your own pre-built ",(0,i.kt)("inlineCode",{parentName:"li"},"pg.Pool")," instance to use, in which case all\nother (non-superuser) options will be ignored. You are responsible for\nreleasing this pool!"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"superuserPool")," - as ",(0,i.kt)("inlineCode",{parentName:"li"},"pool"),", but for superuser connections (only needed to\ninstall the watch fixtures in watch mode)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"connectionString")," - the database connection string to use, we'll create a\npool for you automatically (and handle releasing it) using this connection\nstring"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"poolConfig")," - additional configuration options (options other than\n",(0,i.kt)("inlineCode",{parentName:"li"},"connectionString"),") to pass through to ",(0,i.kt)("inlineCode",{parentName:"li"},"pg.Pool"),"; see the ",(0,i.kt)("a",{parentName:"li",href:"https://node-postgres.com/apis/pool"},"pg.Pool\noptions")," which inherit the ",(0,i.kt)("a",{parentName:"li",href:"https://node-postgres.com/apis/client"},"pg.Client\noptions"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"superuserConnectionString")," - as ",(0,i.kt)("inlineCode",{parentName:"li"},"connectionString"),", but for superuser\nconnections (only needed to install the watch fixtures in watch mode)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"pubsub")," (default: ",(0,i.kt)("inlineCode",{parentName:"li"},"true"),") - enable LISTEN/NOTIFY via creation of a\n",(0,i.kt)("inlineCode",{parentName:"li"},"pgSubscriber"))),(0,i.kt)("h3",{id:"gather-options"},(0,i.kt)("inlineCode",{parentName:"h3"},"gather")," options"),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"(TypeScript type: ",(0,i.kt)("inlineCode",{parentName:"em"},"GraphileBuild.GatherOptions"),")")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"pgStrictFunctions: boolean")," - if true, we'll treat all PostgreSQL function\narguments that don't have defaults as being required (non-nullable)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"pgJwtTypes: string | string[]")," - an array of (or comma separated list of)\nthe names (including schemas) for the types in the database to convert into a\nJWT (equivalent to giving these type the behavior ",(0,i.kt)("inlineCode",{parentName:"li"},'"-table +jwt"'),"); example:\n",(0,i.kt)("inlineCode",{parentName:"li"},'pgJwtTypes: "app_public.jwt_token"')),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"installWatchFixtures: boolean"),' - if not false and schema is in watch mode\nthen we will attempt to install the "event triggers" into the database so that\nPostGraphile can be notified when your database changes')),(0,i.kt)("p",null,"Deprecated options:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"pgV4UseTableNameForNodeIdentifier: boolean")," - if true, uses the table name\ninstead of the type name in the Node identifier (highly discouraged because it\nsignificantly increases the risk of NodeID conflicts)")),(0,i.kt)("h3",{id:"schema-options"},(0,i.kt)("inlineCode",{parentName:"h3"},"schema")," options"),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"(TypeScript type: ",(0,i.kt)("inlineCode",{parentName:"em"},"GraphileBuild.SchemaOptions"),")")),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"Plugins may add additional options, please refer to your plugins' documentation\nto determine the options that they offer.")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"defaultBehavior: string | undefined")," - if set, applies a default\n",(0,i.kt)("a",{parentName:"li",href:"./behavior"},"behavior")," to all entities; for example to prefer lists\nover connections: ",(0,i.kt)("inlineCode",{parentName:"li"},"+list -connection"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"dontSwallowErrors: boolean")," - if true, errors during the schema build process\nwill throw rather than the system trying to recover from them. Recommended,\nbut not enabled by default as it can be a barrier to entry to new users."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"jsonScalarAsString: boolean"),' - if true, JSON values will be stringified\nrather than returned as "dynamic" objects.'),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"pgForbidSetofFunctionsToReturnNull: boolean")," - if true, setof functions\ncannot return null, so our list and connection types can be non-nullable in\nmore places."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"pgJwtSecret")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"pgJwtSignOptions")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"pgOrderByNullsLast: boolean | undefined")," - if true, orders such that nulls are\nalways last; if false, orders such that nulls are always first; otherwise uses\nthe default ordering"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"pgUseCustomNetworkScalars: boolean")," - if not false, adds the ",(0,i.kt)("inlineCode",{parentName:"li"},"CidrAddress"),",\n",(0,i.kt)("inlineCode",{parentName:"li"},"MacAddress")," and similar types for PostgreSQL network scalars.")),(0,i.kt)("h3",{id:"grafast-options"},(0,i.kt)("inlineCode",{parentName:"h3"},"grafast")," options"),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"(TypeScript type: ",(0,i.kt)("inlineCode",{parentName:"em"},"GraphileConfig.GrafastOptions"),")")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"explain")," - a list of 'explain' types that should be exposed to clients via\n",(0,i.kt)("inlineCode",{parentName:"li"},"extensions.explain")," (",(0,i.kt)("inlineCode",{parentName:"li"},"plan")," for the operation plan, ",(0,i.kt)("inlineCode",{parentName:"li"},"sql")," for the\nSQL), or ",(0,i.kt)("inlineCode",{parentName:"li"},"true")," to expose everything."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"context")," - an object (or function that returns an object, or promise to an\nobject) to be merged into the GraphQL context, accessible from plan\nresolvers. If a function, it will receive two parameters, first is the\nrequest context (which may contain details such as the incoming HTTP request,\ndepends on what server/etc you are using) and the second is the current\ncontext object that your results will be merged into (overwriting\npre-existing keys).")),(0,i.kt)("h3",{id:"grafserv-options"},(0,i.kt)("inlineCode",{parentName:"h3"},"grafserv")," options"),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"(TypeScript type: ",(0,i.kt)("inlineCode",{parentName:"em"},"GraphileConfig.GrafservOptions"),")")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"port: number")," - Port number to listen on (default: 5678)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"host: string")," - Host to listen on (default: '127.0.0.1'; consider setting to\n'0.0.0.0' in Docker and similar environments)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"graphqlPath: string")," - The path at which GraphQL will be available; usually\n",(0,i.kt)("inlineCode",{parentName:"li"},"/graphql")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"graphiqlPath: string")," - The path at which GraphiQL will be available; usually\n",(0,i.kt)("inlineCode",{parentName:"li"},"/")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"eventStreamPath: string")," - The path at which the GraphQL event stream would\nbe made available; usually ",(0,i.kt)("inlineCode",{parentName:"li"},"/graphql/stream")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"graphqlOverGET: boolean")," - If true, we'll support GraphQL queries over the\nGET method (beware of the security implications, for example cross-site\ntiming attacks)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"graphiql: boolean")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"graphiqlOnGraphQLGET: boolean")," - If true, then we will render GraphiQL on GET\nrequests to the ",(0,i.kt)("inlineCode",{parentName:"li"},"/graphql")," endpoint"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"watch: boolean")," - Set true to enable watch mode"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"maxRequestLength: number")," - The length, in bytes, for the largest request\nbody that the server will accept, only used if the framework of choice\ndoesn't already handle input parsing")),(0,i.kt)("h2",{id:"making-http-data-available-to-plan-resolvers"},"Making HTTP data available to plan resolvers"),(0,i.kt)("p",null,"Using the ",(0,i.kt)("inlineCode",{parentName:"p"},"grafast.context")," callback we can extract data from the incoming HTTP\nrequest and make it accessible from within the Gra",(0,i.kt)("em",{parentName:"p"},"fast")," schema via the GraphQL context."),(0,i.kt)("p",null,"Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="graphile.config.js"',title:'"graphile.config.js"'},"export default {\n  grafast: {\n    async context(requestContext, args) {\n      const req = requestContext.node?.req;\n      // You can perform asynchronous actions here if you need to; for example\n      // looking up the current user in the database.\n\n      // Return here things that your resolvers need\n      return {\n        // Return the current user from Passport.js or similar\n        user: req.user,\n\n        // Add a helper to get a header\n        getHeader(name) {\n          return req?.get(name);\n        },\n\n        // Give access to the database-owner PostgreSQL pool, for example to\n        // perform privileged actions\n        rootPgPool,\n      };\n    },\n  },\n};\n")),(0,i.kt)("admonition",{type:"warning"},(0,i.kt)("p",{parentName:"admonition"},"When adding details to ",(0,i.kt)("inlineCode",{parentName:"p"},"grafast.context"),", you must careful to not add properties that\nwill clash with system context keys such as ",(0,i.kt)("inlineCode",{parentName:"p"},"withPgClient"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"pgSettings"),",\n",(0,i.kt)("inlineCode",{parentName:"p"},"pgSubscriber")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"jwtClaims")," (you can see the existing context keys by\ninspecting the ",(0,i.kt)("inlineCode",{parentName:"p"},"contextValue")," property of second argument to the ",(0,i.kt)("inlineCode",{parentName:"p"},"grafast.context"),"\ncallback: ",(0,i.kt)("inlineCode",{parentName:"p"},"args.contextValue"),")."),(0,i.kt)("p",{parentName:"admonition"},"For the absolute best future compatibility, we recommend that you prefix your\ncontext keys with your initials, company name, or similar.")),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"It's ",(0,i.kt)("em",{parentName:"p"},"not")," a good idea to give direct access to the ",(0,i.kt)("inlineCode",{parentName:"p"},"req")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"res")," objects\nvia ",(0,i.kt)("inlineCode",{parentName:"p"},"grafast.context")," as it binds the GraphQL context too tightly to the HTTP\nrequest lifecycle \u2014 this will cause you issues if you try and use the GraphQL\nschema in other contexts (e.g. directly from the application, in integration\ntests, or over alternative transports such as websockets for realtime).\nInstead, add helpers to get/set the data you need that can be implemented in\neach future situation.")),(0,i.kt)("h2",{id:"pgsettings"},(0,i.kt)("inlineCode",{parentName:"h2"},"pgSettings")),(0,i.kt)("p",null,"Connections from PostGraphile to the PostgreSQL database may need to carry with\nthem custom settings to be set within the PostgreSQL transaction. These can be\nused to indicate simple PostgreSQL settings such as ",(0,i.kt)("inlineCode",{parentName:"p"},"statement_timeout=5000"),",\nor can be used to indicate details of the currently active user (e.g.\n",(0,i.kt)("inlineCode",{parentName:"p"},"jwt.claims.user_id = 42"),")."),(0,i.kt)("p",null,"Every ",(0,i.kt)("inlineCode",{parentName:"p"},"pgService")," can indicate its own ",(0,i.kt)("inlineCode",{parentName:"p"},"pgSettings")," callback to dictate which\nsettings that specific service should use with its associated database (see\n",(0,i.kt)("a",{parentName:"p",href:"#pgservices"},(0,i.kt)("inlineCode",{parentName:"a"},"pgServices"))," above), and these settings are added to the\nGraphQL context using the key set in that services' ",(0,i.kt)("inlineCode",{parentName:"p"},"pgSettingsKey"),"."),(0,i.kt)("p",null,"Presets may also add values to ",(0,i.kt)("inlineCode",{parentName:"p"},"pgSettings"),", for example\n",(0,i.kt)("inlineCode",{parentName:"p"},"postgraphile/presets/lazy-jwt")," parses the ",(0,i.kt)("inlineCode",{parentName:"p"},"Authorization")," header and adds the\nclaims from the JWT to ",(0,i.kt)("inlineCode",{parentName:"p"},"pgSettings"),"."),(0,i.kt)("p",null,"For most PostGraphile users there's only one pgService, and the default\n",(0,i.kt)("inlineCode",{parentName:"p"},"pgSettingsKey")," is ",(0,i.kt)("inlineCode",{parentName:"p"},'"pgSettings"'),", so rather than configuring pgSettings via\nthe adaptor you might opt to configure it via including a ",(0,i.kt)("inlineCode",{parentName:"p"},"pgSettings"),' key in\nthe object you return from the Grafast context callback mentioned in the\n"Grafast options" section above. The value for this key should be a POJO (plain\nold JavaScript object) with string keys and string values, and you should be\ncareful to copy across settings from the pgService adaptor and any\npresets/plugins that may have added to it. For example:'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="graphile.config.mjs"',title:'"graphile.config.mjs"'},'export default {\n  // ...\n\n  grafast: {\n    context(requestContext, args) {\n      return {\n        // highlight-start\n        pgSettings: {\n          // If any pgSettings were already set, mix them in\n          ...args.contextValue?.pgSettings,\n          // Add our own settings\n          statement_timeout: "10000",\n        },\n        // highlight-end\n      };\n    },\n  },\n};\n')),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"You can use ",(0,i.kt)("inlineCode",{parentName:"p"},"pgSettings")," to define variables that your Postgres\nfunctions/policies depend on, or to tweak internal Postgres settings."),(0,i.kt)("p",{parentName:"admonition"},"When adding variables for your own usage, the keys ",(0,i.kt)("strong",{parentName:"p"},"must")," contain either one\nor two period (",(0,i.kt)("inlineCode",{parentName:"p"},"."),") characters, and the prefix (the bit before the first\nperiod) must not be used by any Postgres extension. We recommend using a prefix\nsuch as ",(0,i.kt)("inlineCode",{parentName:"p"},"jwt.")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"myapp."),". Examples: ",(0,i.kt)("inlineCode",{parentName:"p"},"jwt.claims.userid"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"myapp.is_admin")),(0,i.kt)("p",{parentName:"admonition"},"Variables without periods will be interpreted as internal Postgres settings,\nsuch as ",(0,i.kt)("inlineCode",{parentName:"p"},"role"),", and will be applied by Postgres.")),(0,i.kt)("h3",{id:"exposing-http-request-data-to-postgresql"},"Exposing HTTP request data to PostgreSQL"),(0,i.kt)("p",null,"Using the ",(0,i.kt)("inlineCode",{parentName:"p"},"pgSettings")," functionality mentioned above you can extend the data\nmade available within PostgreSQL through ",(0,i.kt)("inlineCode",{parentName:"p"},"current_setting(...)"),". Remember: the\n",(0,i.kt)("inlineCode",{parentName:"p"},"grafast.context")," entry can be a callback (even an asynchronous callback if you\nneed) which can extract details from the HTTP request."),(0,i.kt)("p",null,"When using PostGraphile in library mode, you will likely have a middleware that\nhandles user authentication (whether this be via sessions, cookies, or JWTs).\nYou can use the ",(0,i.kt)("inlineCode",{parentName:"p"},"requestContext")," to extract details from the request that came\nthrough your Grafserv adaptor and then expose this data to PostgreSQL; for\nexample in an express app you might do something like:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="graphile.config.js"',title:'"graphile.config.js"'},'export default {\n  // ...\n\n  grafast: {\n    async context(requestContext, args) {\n      // Extract request details from the requestContext:\n      // highlight-next-line\n      const req = requestContext.expressv4?.req;\n\n      return {\n        pgSettings: {\n          ...args.contextValue?.pgSettings,\n          // Expose a specific header (if present) to PostgreSQL\n          // highlight-next-line\n          "myapp.headers.x_something": req?.getHeader("x-something"),\n          // Expose the user id from the request, if present\n          // highlight-next-line\n          "myapp.user_id": req?.user?.id,\n        },\n      };\n    },\n  },\n};\n')),(0,i.kt)("p",null,"If you're using the PostGraphile CLI then you won't have middlewares to do the\nheavy lifting for you, but you can still process incoming request headers -\nthis more complicated example extracts the user's ID from a JWT and sends that\nand the value of a specific HTTP header to PostgreSQL:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="graphile.config.js"',title:'"graphile.config.js"'},'import jwt from "jsonwebtoken";\n\nconst JWT_SECRET = process.env.JWT_SECRET;\n\nexport default {\n  // ...\n\n  grafast: {\n    async context(requestContext, args) {\n      // Extract request details from the requestContext:\n      // highlight-next-line\n      const req = requestContext.node?.req;\n      // Or: const req = requestContext.expressv4?.req;\n      // Or: const ctx = requestContext.koav2?.ctx;\n      // Or: const req = requestContext.fastifyv4?.request;\n\n      const context = {\n        // Base settings for all requests:\n        pgSettings: {\n          ...args.contextValue?.pgSettings,\n          // Expose a specific header (if present) to PostgreSQL\n          // highlight-next-line\n          "myapp.headers.x_something": req?.getHeader("x-something"),\n        },\n      };\n\n      // Process the authorization header, if present\n      const auth = req?.headers["authorization"];\n      if (typeof auth === "string" && typeof JWT_SECRET === "string") {\n        const parts = auth.split(" ");\n        if (parts.length === 2 && parts[0].toLowerCase() === "bearer") {\n          const token = parts[1];\n          const claims = jwt.verify(token, JWT_SECRET, {\n            algorithms: ["HS256", "HS384"],\n            audience: "postgraphile",\n            complete: false,\n          });\n          // Expose the user id from the request, if present\n          // highlight-next-line\n          context.pgSettings["myapp.user_id"] = claims.uid;\n        }\n      }\n\n      return context;\n    },\n  },\n};\n')),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"GraphQL itself is transport agnostic, as is ",(0,i.kt)("inlineCode",{parentName:"p"},"grafast"),", so depending on how you\nchoose to use your PostGraphile schema you may or may not have access to an\nHTTP request. Your ",(0,i.kt)("inlineCode",{parentName:"p"},"context")," callback should be written to support all the\ndifferent ways that your schema may be used: directly, over HTTP, using\nwebsockets, etc."),(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("strong",{parentName:"p"},"Do not")," expose the ",(0,i.kt)("inlineCode",{parentName:"p"},"request"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"response")," or\n",(0,i.kt)("inlineCode",{parentName:"p"},"requestContext")," objects via the GraphQL context, always use abstractions.")),(0,i.kt)("h3",{id:"accessing-pgsettings-data-in-postgresql"},"Accessing pgSettings data in PostgreSQL"),(0,i.kt)("p",null,"With either of the above examples, you could write an SQL function\n",(0,i.kt)("inlineCode",{parentName:"p"},"get_x_something()")," to get the ",(0,i.kt)("inlineCode",{parentName:"p"},"myapp.headers.x_something")," setting:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"create function get_x_something() returns text as $$\n  /* highlight-next-line */\n  select nullif(current_setting('myapp.headers.x_something', true), '')::text;\n$$ language sql stable;\n")),(0,i.kt)("p",null,"By default, everything in ",(0,i.kt)("inlineCode",{parentName:"p"},"pgSettings")," is applied to the current transaction\nwith ",(0,i.kt)("inlineCode",{parentName:"p"},"set_config($key, $value, true)"),"; note that ",(0,i.kt)("inlineCode",{parentName:"p"},"set_config")," only supports\nstring values so it is best to only feed ",(0,i.kt)("inlineCode",{parentName:"p"},"pgSettings")," string values (we'll\n",(0,i.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#string_coercion"},"convert other values using the ",(0,i.kt)("inlineCode",{parentName:"a"},"String()")," function"),", which may not\nhave the effect you intend). All settings are automatically reset when the\ntransaction completes."),(0,i.kt)("p",null,"Here's an example of switching the PostgreSQL client into the 'visitor' role,\nand applying the application setting ",(0,i.kt)("inlineCode",{parentName:"p"},"jwt.claims.user_id")," using the ",(0,i.kt)("inlineCode",{parentName:"p"},"req.user"),"\nobject from an Express server:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="graphile.config.js"',title:'"graphile.config.js"'},'export default {\n  grafast: {\n    context(requestContext, args) {\n      // Base context used for all GraphQL requests\n      const context = {\n        pgSettings: {\n          ...args.contextValue?.pgSettings,\n          // highlight-next-line\n          role: "visitor",\n        },\n      };\n\n      // Extract the current user from the Express request:\n      // highlight-next-line\n      const user = requestContext.expressv4?.req.user;\n\n      // If there\'s a user, pass additional data to Postgres:\n      if (user) {\n        // highlight-next-line\n        context.pgSettings["jwt.claims.user_id"] = String(user.id);\n      }\n\n      return context;\n    },\n  },\n};\n')))}u.isMDXComponent=!0},51588:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/files/graphile-config-options-screenshot-3b1600840a76c7877ffdc429babee129.png"},11992:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/files/graphile-config-print-screenshot-b777b5ff361f7ae94952d098ce955ec5.png"},36054:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/graphile-config-options-screenshot-3b1600840a76c7877ffdc429babee129.png"},91805:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/graphile-config-print-screenshot-b777b5ff361f7ae94952d098ce955ec5.png"}}]);