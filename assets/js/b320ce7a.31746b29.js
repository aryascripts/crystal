"use strict";(self.webpackChunk_localrepo_postgraphile_website=self.webpackChunk_localrepo_postgraphile_website||[]).push([[2013],{30876:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>g});var r=a(2784);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},o=Object.keys(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var l=r.createContext({}),p=function(e){var t=r.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},c=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),m=p(a),h=n,g=m["".concat(l,".").concat(h)]||m[h]||u[h]||o;return a?r.createElement(g,i(i({ref:t},c),{},{components:a})):r.createElement(g,i({ref:t},c))}));function g(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=a.length,i=new Array(o);i[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[m]="string"==typeof e?e:n,i[1]=s;for(var p=2;p<o;p++)i[p]=a[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,a)}h.displayName="MDXCreateElement"},43689:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var r=a(7896),n=(a(2784),a(30876));const o={layout:"page",path:"/postgraphile/make-process-schema-plugin/",title:"makeProcessSchemaPlugin"},i=void 0,s={unversionedId:"make-process-schema-plugin",id:"make-process-schema-plugin",title:"makeProcessSchemaPlugin",description:"This plugin enables a way of processing the schema after it's built.",source:"@site/postgraphile/make-process-schema-plugin.md",sourceDirName:".",slug:"/make-process-schema-plugin",permalink:"/postgraphile/next/make-process-schema-plugin",draft:!1,editUrl:"https://github.com/graphile/crystal/tree/main/postgraphile/website/postgraphile/make-process-schema-plugin.md",tags:[],version:"current",frontMatter:{layout:"page",path:"/postgraphile/make-process-schema-plugin/",title:"makeProcessSchemaPlugin"},sidebar:"docs",previous:{title:"makeExtendSchemaPlugin",permalink:"/postgraphile/next/make-extend-schema-plugin"},next:{title:"makeWrapPlansPlugin",permalink:"/postgraphile/next/make-wrap-plans-plugin"}},l={},p=[{value:"Signature",id:"signature",level:2},{value:"Example: exporting the schema as exportable code",id:"example-exporting-the-schema-as-exportable-code",level:2}],c={toc:p},m="wrapper";function u(e){let{components:t,...a}=e;return(0,n.kt)(m,(0,r.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"This plugin enables a way of processing the schema after it's built."),(0,n.kt)("p",null,"Use cases include:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Printing the schema SDL to a file"),(0,n.kt)("li",{parentName:"ul"},"Uploading the schema SDL to a network service"),(0,n.kt)("li",{parentName:"ul"},"Checking the schema against your persisted queries"),(0,n.kt)("li",{parentName:"ul"},"Validating the schema against your custom logic"),(0,n.kt)("li",{parentName:"ul"},"Exporting the executable schema (in JavaScript) to a file"),(0,n.kt)("li",{parentName:"ul"},"Replacing the schema with a mocked version or a derivative version (e.g.\nstitching it with another schema)"),(0,n.kt)("li",{parentName:"ul"},"Integrating with third-party libraries")),(0,n.kt)("h2",{id:"signature"},"Signature"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"function makeProcessSchemaPlugin(\n  process: (schema: GraphQLSchema) => GraphQLSchema,\n): GraphileConfig.Plugin;\n")),(0,n.kt)("p",null,"The plugin accepts one argument: a schema processing function which will be\ncalled with the generated schema and must either return the same schema (e.g. if\nyou're doing a read-only operation, or mutating the schema directly) or return\nan alternative schema (typically a derivative)."),(0,n.kt)("admonition",{type:"info"},(0,n.kt)("p",{parentName:"admonition"},"The callback to this plugin operates synchronously. If you need to do\nasynchronous work then be sure to handle any errors that may occur, and note\nthat the result of the asynchronous work will not affect the return result of\nthis plugin (and thus the schema being used by your server).")),(0,n.kt)("admonition",{type:"warning"},(0,n.kt)("p",{parentName:"admonition"},"Because PostGraphile schemas use Gra",(0,n.kt)("em",{parentName:"p"},"fast")," plan resolvers, third party tooling\nthat manipulate traditional resolvers are likely to break the schema, and not\nachieve the goals set out. For example, ",(0,n.kt)("inlineCode",{parentName:"p"},"graphql-shield")," is currently not\ncompatible with Gra",(0,n.kt)("em",{parentName:"p"},"fast")," plans.")),(0,n.kt)("h2",{id:"example-exporting-the-schema-as-exportable-code"},"Example: exporting the schema as exportable code"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},'import { makeProcessSchemaPlugin } from "postgraphile/utils";\nimport { exportSchema } from "graphile-export";\n\nconst ExportSchemaPlugin = makeProcessSchemaPlugin((schema) => {\n  exportSchema(schema, `${process.cwd()}/exported-schema.mjs`, {\n    mode: "typeDefs",\n  }).catch((e) => {\n    console.error(e);\n  });\n  return schema;\n});\n')))}u.isMDXComponent=!0}}]);