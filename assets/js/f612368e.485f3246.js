"use strict";(self.webpackChunk_localrepo_postgraphile_website=self.webpackChunk_localrepo_postgraphile_website||[]).push([[8190],{30876:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>g});var r=n(2784);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=p(n),h=a,g=c["".concat(s,".").concat(h)]||c[h]||d[h]||i;return n?r.createElement(g,o(o({ref:t},u),{},{components:n})):r.createElement(g,o({ref:t},u))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=h;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[c]="string"==typeof e?e:a,o[1]=l;for(var p=2;p<i;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},65162:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var r=n(7896),a=(n(2784),n(30876));const i={layout:"page",path:"/postgraphile/best-practices/",title:"PostGraphile best practices"},o=void 0,l={unversionedId:"best-practices",id:"best-practices",title:"PostGraphile best practices",description:"This guide is a work in progress. If you have ideas for best practices, please",source:"@site/postgraphile/best-practices.md",sourceDirName:".",slug:"/best-practices",permalink:"/postgraphile/next/best-practices",draft:!1,editUrl:"https://github.com/graphile/crystal/tree/main/postgraphile/website/postgraphile/best-practices.md",tags:[],version:"current",frontMatter:{layout:"page",path:"/postgraphile/best-practices/",title:"PostGraphile best practices"},sidebar:"docs",previous:{title:"Evaluating",permalink:"/postgraphile/next/evaluating"},next:{title:"Production considerations",permalink:"/postgraphile/next/production"}},s={},p=[{value:"Foreign Key Indexes",id:"foreign-key-indexes",level:3},{value:"Row Level Security",id:"row-level-security",level:3},{value:"Use Table GRANT for SELECT/DELETE and Column GRANT for INSERT/UPDATE",id:"use-table-grant-for-selectdelete-and-column-grant-for-insertupdate",level:3},{value:"Simplify Your GraphQL Field Names",id:"simplify-your-graphql-field-names",level:3},{value:"Protect Your API",id:"protect-your-api",level:3},{value:"Use <code>LANGUAGE sql</code> Over <code>LANGUAGE plpgsql</code> Where Possible",id:"use-language-sql-over-language-plpgsql-where-possible",level:3},{value:"Name Triggers With A Numeric Prefix",id:"name-triggers-with-a-numeric-prefix",level:3}],u={toc:p},c="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(c,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,'This guide is a work in progress. If you have ideas for best practices, please\nuse the "Suggest improvements to this page" link above to submit them, or\ndiscuss them in #documentation on\n',(0,a.kt)("a",{parentName:"p",href:"http://discord.gg/graphile"},"the PostGraphile Discord chat"),"."),(0,a.kt)("h3",{id:"foreign-key-indexes"},"Foreign Key Indexes"),(0,a.kt)("p",null,"PostgreSQL does ",(0,a.kt)("em",{parentName:"p"},"NOT")," add indexes to foreign keys by default. This isn't an\nissue for the forward relation (getting the record that your record belongs\nto), but for the reverse relation (getting all the records that belong to your\nrecord) it can make the lookup very expensive. Always add indexes to your\nforeign keys."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sql"},"create table users (id serial primary key);\ncreate table things (id serial primary key, user_id int not null references users);\n/* highlight-next-line */\ncreate index on things (user_id);\n")),(0,a.kt)("p",null,'Out of the box, if you don\'t do this then the "reverse relation" will not\nappear in your GraphQL schema. You can force it to appear by giving the\nforeign key constraint the ',(0,a.kt)("inlineCode",{parentName:"p"},"+select")," behavior, or you can disable this behavior\nby adding ",(0,a.kt)("inlineCode",{parentName:"p"},"disablePlugins: ['PgIndexBehaviorsPlugin']")," to your configuration."),(0,a.kt)("h3",{id:"row-level-security"},"Row Level Security"),(0,a.kt)("p",null,"If you're using RLS, it's best to enable it on every table in your database.\nYou should at least enable it on every table in your exposed schemas. It's\nbetter to enable RLS and create a policy with ",(0,a.kt)("inlineCode",{parentName:"p"},"using (true)")," to say \"anything\ngoes\" than to not enable RLS; this helps your team mates understand intent:\nwhen you enable RLS you're being explicit about what access is allowed, whereas\nif you don't you're just implicitly allowing all access, which could have been\nan oversight."),(0,a.kt)("h3",{id:"use-table-grant-for-selectdelete-and-column-grant-for-insertupdate"},"Use Table GRANT for SELECT/DELETE and Column GRANT for INSERT/UPDATE"),(0,a.kt)("p",null,"The following are fine:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sql"},"-- \u2705 Fine\nGRANT SELECT ON users TO graphql_role;\n-- \u2705 Fine\nGRANT INSERT (column_1, column_2, ...) ON users TO graphql_role;\n-- \u2705 Fine\nGRANT UPDATE (column_a, column_b, ...) ON users TO graphql_role;\n-- \u2705 Fine\nGRANT DELETE ON users TO graphql_role;\n")),(0,a.kt)("p",null,"The following should be avoided:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sql"},"-- \ud83d\uded1 DO NOT USE\nGRANT SELECT (column_a, column_b) ON users TO graphql_role;\n-- \ud83d\uded1 DO NOT USE\nGRANT INSERT ON users TO graphql_role;\n-- \ud83d\uded1 DO NOT USE\nGRANT UPDATE ON users TO graphql_role;\n")),(0,a.kt)("p",null,"Column-level SELECT grants\n",(0,a.kt)("a",{parentName:"p",href:"./requirements/#dont-use-column-based-select-grants"},"cause a lot of issues"),"\nnot just for PostGraphile:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Cannot ",(0,a.kt)("inlineCode",{parentName:"li"},"SELECT * FROM")),(0,a.kt)("li",{parentName:"ul"},"Cannot use ",(0,a.kt)("inlineCode",{parentName:"li"},"RETURNING *")," on mutations"),(0,a.kt)("li",{parentName:"ul"},"Cannot pass a row type into a function (like we do for computed columns)")),(0,a.kt)("p",null,"Table-level INSERT/UPDATE grants are not advisable because they lack the\nexplicitness that should come from such operations."),(0,a.kt)("h3",{id:"simplify-your-graphql-field-names"},"Simplify Your GraphQL Field Names"),(0,a.kt)("p",null,"You can get a leg up on this\n",(0,a.kt)("a",{parentName:"p",href:"https://npmjs.com/package/@graphile/simplify-inflection"},"using ",(0,a.kt)("inlineCode",{parentName:"a"},"@graphile/simplify-inflection")),".\nThe long names PostGraphile uses by default are to try and avoid people getting\nnaming conflicts when they run PostGraphile for the first time. Once you're more\ncomfortable you should move to using shorter names as it's a GraphQL best\npractice."),(0,a.kt)("h3",{id:"protect-your-api"},"Protect Your API"),(0,a.kt)("p",null,"See ",(0,a.kt)("a",{parentName:"p",href:"./production/"},"Production Considerations"),"."),(0,a.kt)("h3",{id:"use-language-sql-over-language-plpgsql-where-possible"},"Use ",(0,a.kt)("inlineCode",{parentName:"h3"},"LANGUAGE sql")," Over ",(0,a.kt)("inlineCode",{parentName:"h3"},"LANGUAGE plpgsql")," Where Possible"),(0,a.kt)("p",null,"Performance reasons. Specifically, under many circumstances, functions in ",(0,a.kt)("inlineCode",{parentName:"p"},"SQL"),"\n(but not ",(0,a.kt)("inlineCode",{parentName:"p"},"plpgsql"),") can be inlined into the call-site and are thereby\ntransparent to the query planner. The PostgreSQL docs\n",(0,a.kt)("a",{parentName:"p",href:"https://wiki.postgresql.org/wiki/Inlining_of_SQL_functions"},"have a lot more details"),"."),(0,a.kt)("h3",{id:"name-triggers-with-a-numeric-prefix"},"Name Triggers With A Numeric Prefix"),(0,a.kt)("p",null,"e.g. ",(0,a.kt)("inlineCode",{parentName:"p"},"_200_do_a_thing")," / ",(0,a.kt)("inlineCode",{parentName:"p"},"_800_do_something_else")),(0,a.kt)("p",null,"Reason: triggers in PostgreSQL run in lexicographical order."))}d.isMDXComponent=!0}}]);