"use strict";(self.webpackChunk_localrepo_star_website=self.webpackChunk_localrepo_star_website||[]).push([[1348],{876:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var r=n(2784);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,s=function(e,t){if(null==e)return{};var n,r,s={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,s=e.mdxType,o=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=p(n),m=s,f=u["".concat(l,".").concat(m)]||u[m]||d[m]||o;return n?r.createElement(f,a(a({ref:t},c),{},{components:n})):r.createElement(f,a({ref:t},c))}));function f(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var o=n.length,a=new Array(o);a[0]=m;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[u]="string"==typeof e?e:s,a[1]=i;for(var p=2;p<o;p++)a[p]=n[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},3315:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var r=n(7896),s=(n(2784),n(876));const o={sidebar_position:3,title:"Preset"},a="Graphile Config Preset",i={unversionedId:"preset",id:"preset",title:"Preset",description:"A preset bundles together a list of plugins, and options for various of the",source:"@site/graphile-config/preset.md",sourceDirName:".",slug:"/preset",permalink:"/graphile-config/preset",draft:!1,editUrl:"https://github.com/graphile/crystal/tree/main/utils/website/graphile-config/preset.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,title:"Preset"},sidebar:"tutorialSidebar",previous:{title:"Plugin",permalink:"/graphile-config/plugin"}},l={},p=[],c={toc:p},u="wrapper";function d(e){let{components:t,...n}=e;return(0,s.kt)(u,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"graphile-config-preset"},"Graphile Config Preset"),(0,s.kt)("p",null,'A preset bundles together a list of plugins, and options for various of the\n"scopes". You may use more than one preset at a time, and presets may also\ncompose (extend) other presets. When a library is passed a list of presets it\nresults in a resolved preset (a preset that has no "extends") using the\n',(0,s.kt)("inlineCode",{parentName:"p"},"ResolvePresets")," algorithm; broadly all the ",(0,s.kt)("inlineCode",{parentName:"p"},"extends")," are resolved in order, the\nplugins specified are merged as a set (each plugin will only be included once)\nand the options are merged via object merging such that the options specified\nlast win."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"NOTE"),": if you compose two presets (PresetA and PresetB) that both ",(0,s.kt)("inlineCode",{parentName:"p"},"extends"),"\nthe same underlying preset (BASE) and apply some overrides, then the overrides\nin PresetA will be overridden by re-applying the BASE preset again. For this\nreason, presets that are expected to be combined with other presets should not\n",(0,s.kt)("inlineCode",{parentName:"p"},"extends")," common/shared presets, instead the end-user should be expected to add\nthese presets themselves."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"NOTE"),": the order of presets is significant."),(0,s.kt)("p",null,"ResolvePresets(presets):"),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},"Let {finalPreset} be an empty preset."),(0,s.kt)("li",{parentName:"ol"},"For each {preset} in {presets}:",(0,s.kt)("ol",{parentName:"li"},(0,s.kt)("li",{parentName:"ol"},"Let {resolvedPreset} be {ResolvePreset(preset)}."),(0,s.kt)("li",{parentName:"ol"},"Let {finalPreset} be {MergePreset(finalPreset, resolvedPreset)}."))),(0,s.kt)("li",{parentName:"ol"},"Return {finalPreset}.")),(0,s.kt)("p",null,"ResolvePreset(preset):"),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},"Let {presets} be the list specified in the {extends} property of {preset} (or\nan empty list if none specified)."),(0,s.kt)("li",{parentName:"ol"},"Let {basePreset} be {ResolvePresets(presets)}."),(0,s.kt)("li",{parentName:"ol"},"Return {MergePreset(basePreset, preset)}.")),(0,s.kt)("p",null,"MergePreset(basePreset, extendingPreset):"),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},"Let {finalPreset} be an empty preset."),(0,s.kt)("li",{parentName:"ol"},"Assert: {basePreset} has an empty or non-existent {extends} property."),(0,s.kt)("li",{parentName:"ol"},"Let {plugins} be the list of plugins defined in {basePreset} union the list\nof plugins in {extendingPreset}."),(0,s.kt)("li",{parentName:"ol"},"Let the list of plugins for {finalPreset} be {plugins}."),(0,s.kt)("li",{parentName:"ol"},"Let {scopes} be the list of scopes defined in {basePreset} union the list of\nscopes in {extendingPreset}."),(0,s.kt)("li",{parentName:"ol"},"For each {scope} in {scopes}:",(0,s.kt)("ol",{parentName:"li"},(0,s.kt)("li",{parentName:"ol"},"Let {baseScope} be the {scope} in {basePreset}."),(0,s.kt)("li",{parentName:"ol"},"Let {extendingScope} be the {scope} in {extendingPreset}."),(0,s.kt)("li",{parentName:"ol"},"If {baseScope} and {extendingScope} both exist:",(0,s.kt)("ol",{parentName:"li"},(0,s.kt)("li",{parentName:"ol"},"Let {scope} in {finalPreset} be the result of merging {baseScope} and\n{extendingScope} akin to\n",(0,s.kt)("inlineCode",{parentName:"li"},"Object.assign({}, baseScope, extendingScope)"),"."))),(0,s.kt)("li",{parentName:"ol"},"Else: let {scope} in {finalPreset} be whichever of {baseScope} and\n{extendingScope} actually exist."))),(0,s.kt)("li",{parentName:"ol"},"Return {finalPreset}.")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"IMPORTANT"),": the ",(0,s.kt)("inlineCode",{parentName:"p"},"default")," name must not be used as a top-level key in a\npreset to enable compatibility with the various ESM emulations."))}d.isMDXComponent=!0}}]);