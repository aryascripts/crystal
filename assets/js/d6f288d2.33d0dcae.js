"use strict";(self.webpackChunk_localrepo_postgraphile_website=self.webpackChunk_localrepo_postgraphile_website||[]).push([[4542],{30876:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>d});var n=r(2784);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),p=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},u=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},c="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),c=p(r),m=a,d=c["".concat(l,".").concat(m)]||c[m]||h[m]||o;return r?n.createElement(d,s(s({ref:t},u),{},{components:r})):n.createElement(d,s({ref:t},u))}));function d(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,s=new Array(o);s[0]=m;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[c]="string"==typeof e?e:a,s[1]=i;for(var p=2;p<o;p++)s[p]=r[p];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},84743:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var n=r(7896),a=(r(2784),r(30876));const o={layout:"page",path:"/postgraphile/usage/",title:"Usage"},s=void 0,i={unversionedId:"usage",id:"version-4.x/usage",title:"Usage",description:"PostGraphile is formed of three layers.",source:"@site/versioned_docs/version-4.x/usage.md",sourceDirName:".",slug:"/usage",permalink:"/postgraphile/current/usage",draft:!1,editUrl:"https://github.com/graphile/crystal/tree/main/postgraphile/website/versioned_docs/version-4.x/usage.md",tags:[],version:"4.x",frontMatter:{layout:"page",path:"/postgraphile/usage/",title:"Usage"},sidebar:"docs",previous:{title:"Computed columns",permalink:"/postgraphile/current/examples/computed-columns"},next:{title:"Command Line Interface",permalink:"/postgraphile/current/usage-cli"}},l={},p=[],u={toc:p},c="wrapper";function h(e){let{components:t,...r}=e;return(0,a.kt)(c,(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"PostGraphile is formed of three layers."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"At the very top is the ",(0,a.kt)("a",{parentName:"li",href:"./usage-cli/"},(0,a.kt)("strong",{parentName:"a"},"PostGraphile CLI")),". This layer is the\nmost user-friendly and is responsible for three things: accepting common\noptions from the command line; spinning up a HTTP server (or a cluster of\nthem, or none at all depending on what options you're using); and mounting the\nPostGraphile middleware (see next). ",(0,a.kt)("strong",{parentName:"li"},"Most users should start with this layer,\nmany users use it successfully in production, and it's where we recommend you\nstart.")),(0,a.kt)("li",{parentName:"ul"},"The PostGraphile CLI wraps the\n",(0,a.kt)("a",{parentName:"li",href:"./usage-library/"},(0,a.kt)("strong",{parentName:"a"},"PostGraphile library's")," middleware"),". This middleware is\nsuitable for mounting in Node.js HTTP, ",(0,a.kt)("strong",{parentName:"li"},"Connect"),", ",(0,a.kt)("strong",{parentName:"li"},"Express")," or ",(0,a.kt)("strong",{parentName:"li"},"Koa"),'\napplications (the library also exports "route handlers" that are suitable for\nuse in other frameworks such as ',(0,a.kt)("strong",{parentName:"li"},"Fastify")," and ",(0,a.kt)("strong",{parentName:"li"},"Restify"),"). This layer is\nresponsible for receiving, deciphering and validating the GraphQL HTTP request\nfrom the user according to the options supplied; configuring a PG client with\nthe relevant settings; and then sending the query on to the GraphQL schema\n(see next) to be resolved. ",(0,a.kt)("strong",{parentName:"li"},"About 70% of PostGraphile users end up using this\nlayer in their applications"),"; reasons to use this over the CLI include the\nability to add Express middlewares before PostGraphile (e.g. to perform rate\nlimiting, sessions, custom logging, custom authentication and other concerns)\nand the ability to take greater control over the PostGraphile system."),(0,a.kt)("li",{parentName:"ul"},"Deepest down is the\n",(0,a.kt)("a",{parentName:"li",href:"./usage-schema/"},(0,a.kt)("strong",{parentName:"a"},"PostGraphile GraphQL schema"),' ("schema-only")')," itself\nwhich contains all the types, fields and resolvers. (The schema is constructed\ndynamically, so cannot be written to disk.) ",(0,a.kt)("strong",{parentName:"li"},"Most users will never use this\nlevel."))),(0,a.kt)("p",null,"The deeper you go in the stack, the more complex your setup code will be, but\nthe more powerful your integration can be. We're always trying to expose as much\npower as is reasonable through the CLI, but it's not sensible to make every\npossible thing a CLI option - if you need that level of customisation then you\nshould opt for the middleware."),(0,a.kt)("p",null,"We recommend that you start with the PostGraphile CLI and then move to the\nPostGraphile middleware if you need deeper integration with Node.js."),(0,a.kt)("p",null,"Which layer would you like to read more about?"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"./usage-cli/"},(0,a.kt)("strong",{parentName:"a"},"CLI"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"./usage-library/"},(0,a.kt)("strong",{parentName:"a"},"Middleware"),' ("library")')),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"./usage-schema/"},(0,a.kt)("strong",{parentName:"a"},"GraphQL schema"),' ("schema-only")'))))}h.isMDXComponent=!0}}]);