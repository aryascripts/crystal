"use strict";(self.webpackChunk_localrepo_postgraphile_website=self.webpackChunk_localrepo_postgraphile_website||[]).push([[3827],{30876:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>h});var n=a(2784);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var s=n.createContext({}),p=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},c=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=p(a),d=i,h=m["".concat(s,".").concat(d)]||m[d]||u[d]||r;return a?n.createElement(h,o(o({ref:t},c),{},{components:a})):n.createElement(h,o({ref:t},c))}));function h(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=a.length,o=new Array(r);o[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[m]="string"==typeof e?e:i,o[1]=l;for(var p=2;p<r;p++)o[p]=a[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},94535:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>l,toc:()=>p});var n=a(7896),i=(a(2784),a(30876));const r={layout:"page",path:"/postgraphile/jwt-guide/",title:"PostGraphile JWT guide"},o=void 0,l={unversionedId:"jwt-guide",id:"jwt-guide",title:"PostGraphile JWT guide",description:"This specification was authored by",source:"@site/postgraphile/jwt-guide.md",sourceDirName:".",slug:"/jwt-guide",permalink:"/postgraphile/next/jwt-guide",draft:!1,editUrl:"https://github.com/graphile/crystal/tree/main/postgraphile/website/postgraphile/jwt-guide.md",tags:[],version:"current",frontMatter:{layout:"page",path:"/postgraphile/jwt-guide/",title:"PostGraphile JWT guide"},sidebar:"docs",previous:{title:"Production considerations",permalink:"/postgraphile/next/production"},next:{title:"PostGraphile JWT/JWK verification quickstart",permalink:"/postgraphile/next/jwk-verification"}},s={},p=[{value:"PostgreSQL JSON Web Token Serialization Specification",id:"postgresql-json-web-token-serialization-specification",level:2},{value:"Example",id:"example",level:3},{value:"A Note on <code>local</code>",id:"a-note-on-local",level:3},{value:"Retrieving Claims in PostgreSQL",id:"retrieving-claims-in-postgresql",level:3}],c={toc:p},m="wrapper";function u(e){let{components:t,...a}=e;return(0,i.kt)(m,(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"This specification was authored by\n",(0,i.kt)("a",{parentName:"p",href:"https://twitter.com/calebmer"},"Caleb Meredith")," for use in the PostGraphQL\nproject. The language of the specification is meant to be generally applicable\nand adoptable by any who might want to use it.")),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"What follows is a specification of how you can use JWTs to\nauthenticate a user with PostgreSQL such that PostgreSQL may perform your\nauthorization checks. ",(0,i.kt)("strong",{parentName:"p"},"This is not the only way of achieving this goal with\nPostGraphile"),", for example you can do as the PostGraphile maintainer does and use\nstandard session-based authentication (i.e. with cookies) via the relevant\nExpress/Koa/Fastify middleware and PostGraphile's\n",(0,i.kt)("a",{parentName:"p",href:"./config#pgsettings"},(0,i.kt)("inlineCode",{parentName:"a"},"pgSettings")," functionality")," allowing you to\nleverage powerful pre-built authentication stacks such as\n",(0,i.kt)("a",{parentName:"p",href:"http://www.passportjs.org/"},"passport.js"),' which has OAuth integration with most\nmajor "social login" providers.')),(0,i.kt)("h2",{id:"postgresql-json-web-token-serialization-specification"},"PostgreSQL JSON Web Token Serialization Specification"),(0,i.kt)("p",null,"This specification aims to define a standard way to serialize ",(0,i.kt)("a",{parentName:"p",href:"https://jwt.io/"},"JSON Web\nTokens")," (JWT, ",(0,i.kt)("a",{parentName:"p",href:"https://tools.ietf.org/html/rfc7519"},"RFC 7519"),") to a PostgreSQL database for developers\nwho want to move authorization logic into their PostgreSQL schema."),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://tools.ietf.org/html/rfc7519#section-2"},"Terminology")," from the JSON Web Token specification will be used."),(0,i.kt)("p",null,"After a JSON Web Token has been verified and decoded, the resulting claims will\nbe serialized to the PostgreSQL database in two ways:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Using the ",(0,i.kt)("inlineCode",{parentName:"p"},"role")," claim, the corresponding role will be set in the database\nusing ",(0,i.kt)("a",{parentName:"p",href:"http://www.postgresql.org/docs/current/static/sql-set-role.html"},(0,i.kt)("inlineCode",{parentName:"a"},"SET ROLE")),":"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"set local role $role;\n")),(0,i.kt)("p",{parentName:"li"},"Where ",(0,i.kt)("inlineCode",{parentName:"p"},"$role")," is the claim value for the ",(0,i.kt)("inlineCode",{parentName:"p"},"role")," claim. It is not an error if\nthe ",(0,i.kt)("inlineCode",{parentName:"p"},"role")," claim is not set.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"All remaining claims will be set using the ",(0,i.kt)("a",{parentName:"p",href:"http://www.postgresql.org/docs/current/static/sql-set.html"},(0,i.kt)("inlineCode",{parentName:"a"},"SET"))," command under the\n",(0,i.kt)("inlineCode",{parentName:"p"},"jwt.claims")," namespace. Using:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"set local jwt.claims.$claim_name to $claim_value;\n")),(0,i.kt)("p",{parentName:"li"},"Will be run for every claim including registered claims like ",(0,i.kt)("inlineCode",{parentName:"p"},"iss"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"sub"),",\nand the claim specified 1 (",(0,i.kt)("inlineCode",{parentName:"p"},"role"),"). ",(0,i.kt)("inlineCode",{parentName:"p"},"$claim_name")," is the name of the claim\nand ",(0,i.kt)("inlineCode",{parentName:"p"},"$claim_value")," is the associated value."))),(0,i.kt)("h3",{id:"example"},"Example"),(0,i.kt)("p",null,"A JSON Web Token with the following claims:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "sub": "postgraphql",\n  "role": "user",\n  "user_id": 2\n}\n')),(0,i.kt)("p",null,"Would result in the following SQL being run:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"set local role user;\nset local jwt.claims.sub to 'postgraphql';\nset local jwt.claims.role to 'user';\nset local jwt.claims.user_id to 2;\n")),(0,i.kt)("h3",{id:"a-note-on-local"},"A Note on ",(0,i.kt)("inlineCode",{parentName:"h3"},"local")),(0,i.kt)("p",null,"Using ",(0,i.kt)("inlineCode",{parentName:"p"},"local")," for ",(0,i.kt)("a",{parentName:"p",href:"http://www.postgresql.org/docs/current/static/sql-set.html"},(0,i.kt)("inlineCode",{parentName:"a"},"SET"))," and ",(0,i.kt)("a",{parentName:"p",href:"http://www.postgresql.org/docs/current/static/sql-set-role.html"},(0,i.kt)("inlineCode",{parentName:"a"},"SET ROLE"))," is not required,\nhowever it is recommended. This is so that every transaction block (beginning\nwith ",(0,i.kt)("inlineCode",{parentName:"p"},"BEGIN")," and ending with ",(0,i.kt)("inlineCode",{parentName:"p"},"COMMIT")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"ROLLBACK"),") will have its own local\nparameters. See the following demonstration:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"begin;\nset local jwt.claims.user_id to 2;\n\n-- Has access to `jwt.claims.user_id`\ncommit;\n\n-- Does not have access to `jwt.claims.user_id`\n")),(0,i.kt)("h3",{id:"retrieving-claims-in-postgresql"},"Retrieving Claims in PostgreSQL"),(0,i.kt)("p",null,"In order to retrieve a claim set by the serialization of a JSON Web Token as\ndefined in this spec, either the ",(0,i.kt)("inlineCode",{parentName:"p"},"current_setting")," function or the\n",(0,i.kt)("a",{parentName:"p",href:"http://www.postgresql.org/docs/current/static/sql-show.html"},(0,i.kt)("inlineCode",{parentName:"a"},"SHOW"))," command may be used like so:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"select current_setting('jwt.claims.user_id');\n-- Or\u2026\nshow jwt.claims.user_id;\n")))}u.isMDXComponent=!0}}]);