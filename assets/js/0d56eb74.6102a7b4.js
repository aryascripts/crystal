"use strict";(self.webpackChunk_localrepo_grafast_website=self.webpackChunk_localrepo_grafast_website||[]).push([[4776],{30876:(e,t,n)=>{n.d(t,{Zo:()=>g,kt:()=>f});var r=n(2784);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),o=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},g=function(e){var t=o(e.components);return r.createElement(p.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,g=l(e,["components","mdxType","originalType","parentName"]),u=o(n),d=a,f=u["".concat(p,".").concat(d)]||u[d]||c[d]||i;return n?r.createElement(f,s(s({ref:t},g),{},{components:n})):r.createElement(f,s({ref:t},g))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,s=new Array(i);s[0]=d;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[u]="string"==typeof e?e:a,s[1]=l;for(var o=2;o<i;o++)s[o]=n[o];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},26146:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>c,frontMatter:()=>i,metadata:()=>l,toc:()=>o});var r=n(7896),a=(n(2784),n(30876));const i={},s="pgInsertSingle",l={unversionedId:"step-library/dataplan-pg/pgInsertSingle",id:"step-library/dataplan-pg/pgInsertSingle",title:"pgInsertSingle",description:"Inserts a single row into the given resource, setting the given attributes (if any).",source:"@site/grafast/step-library/dataplan-pg/pgInsertSingle.md",sourceDirName:"step-library/dataplan-pg",slug:"/step-library/dataplan-pg/pgInsertSingle",permalink:"/grafast/step-library/dataplan-pg/pgInsertSingle",draft:!1,editUrl:"https://github.com/graphile/crystal/tree/main/grafast/website/grafast/step-library/dataplan-pg/pgInsertSingle.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"pgDeleteSingle",permalink:"/grafast/step-library/dataplan-pg/pgDeleteSingle"},next:{title:"pgPolymorphic",permalink:"/grafast/step-library/dataplan-pg/pgPolymorphic"}},p={},o=[{value:"$pgInsertSingle.set(attr, $value)",id:"pginsertsinglesetattr-value",level:2},{value:"$pgInsertSingle.setPlan()",id:"pginsertsinglesetplan",level:2},{value:"$pgInsertSingle.get(attr)",id:"pginsertsinglegetattr",level:2},{value:"$pgInsertSingle.record()",id:"pginsertsinglerecord",level:2}],g={toc:o},u="wrapper";function c(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,r.Z)({},g,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"pginsertsingle"},"pgInsertSingle"),(0,a.kt)("p",null,"Inserts a single row into the given ",(0,a.kt)("inlineCode",{parentName:"p"},"resource"),", setting the given attributes (if any)."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const $insertedUser = pgInsertSingle(usersResource, {\n  username: $username,\n});\n")),(0,a.kt)("h2",{id:"pginsertsinglesetattr-value"},"$pgInsertSingle.set(attr, $value)"),(0,a.kt)("p",null,"Adds another attribute to be inserted:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'const $insertedUser = pgInsertSingle(usersResource);\n$insertedUser.set("username", $username);\n$insertedUser.set("bio", $bio);\n\n// Roughly equivalent to:\n// `INSERT INTO users (username, bio) VALUES ($1, $2);`\n')),(0,a.kt)("h2",{id:"pginsertsinglesetplan"},"$pgInsertSingle.setPlan()"),(0,a.kt)("p",null,"Returns a ",(0,a.kt)("inlineCode",{parentName:"p"},"SetterStep"),' (a "modifier step", rather than an ',(0,a.kt)("inlineCode",{parentName:"p"},"ExecutableStep"),")\nthat can be useful when combined with ",(0,a.kt)("inlineCode",{parentName:"p"},"applyPlan")," plan resolvers in arguments\nand input fields to build up the attributes to set on the inserted row bit by\nbit."),(0,a.kt)("h2",{id:"pginsertsinglegetattr"},"$pgInsertSingle.get(attr)"),(0,a.kt)("p",null,"Returns a PgClassExpressionStep representing the given attribute from the\ninserted row. This is achieved by selecting the value using the\n",(0,a.kt)("inlineCode",{parentName:"p"},"INSERT INTO ... RETURNING ...")," syntax."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'const $id = $insertedUser.get("id");\n')),(0,a.kt)("h2",{id:"pginsertsinglerecord"},"$pgInsertSingle.record()"),(0,a.kt)("p",null,"Returns a PgClassExpressionStep representing the full record that was inserted."))}c.isMDXComponent=!0}}]);