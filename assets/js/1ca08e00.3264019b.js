"use strict";(self.webpackChunk_localrepo_grafast_website=self.webpackChunk_localrepo_grafast_website||[]).push([[9322],{30876:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>h});var i=t(2784);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,i,a=function(e,n){if(null==e)return{};var t,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=i.createContext({}),p=function(e){var n=i.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},d=function(e){var n=p(e.components);return i.createElement(s.Provider,{value:n},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},m=i.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),c=p(t),m=a,h=c["".concat(s,".").concat(m)]||c[m]||u[m]||r;return t?i.createElement(h,l(l({ref:n},d),{},{components:t})):i.createElement(h,l({ref:n},d))}));function h(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,l=new Array(r);l[0]=m;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o[c]="string"==typeof e?e:a,l[1]=o;for(var p=2;p<r;p++)l[p]=t[p];return i.createElement.apply(null,l)}return i.createElement.apply(null,t)}m.displayName="MDXCreateElement"},24311:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>r,metadata:()=>o,toc:()=>p});var i=t(7896),a=(t(2784),t(30876));const r={},l="pgUnionAll",o={unversionedId:"step-library/dataplan-pg/pgUnionAll",id:"step-library/dataplan-pg/pgUnionAll",title:"pgUnionAll",description:"If you need to pull data from multiple tables and cannot use joins to do so,",source:"@site/grafast/step-library/dataplan-pg/pgUnionAll.md",sourceDirName:"step-library/dataplan-pg",slug:"/step-library/dataplan-pg/pgUnionAll",permalink:"/grafast/step-library/dataplan-pg/pgUnionAll",draft:!1,editUrl:"https://github.com/graphile/crystal/tree/main/grafast/website/grafast/step-library/dataplan-pg/pgUnionAll.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"pgSingleTablePolymorphic",permalink:"/grafast/step-library/dataplan-pg/pgSingleTablePolymorphic"},next:{title:"pgUpdateSingle",permalink:"/grafast/step-library/dataplan-pg/pgUpdateSingle"}},s={},p=[{value:"pgUnionAll function",id:"pgunionall-function",level:2},{value:"Applying conditions",id:"applying-conditions",level:2},{value:"Custom ordering",id:"custom-ordering",level:2},{value:"Pagination",id:"pagination",level:2},{value:"Example",id:"example",level:2},{value:"pgUnionAll SQL explained",id:"pgunionall-sql-explained",level:2}],d={toc:p},c="wrapper";function u(e){let{components:n,...t}=e;return(0,a.kt)(c,(0,i.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"pgunionall"},"pgUnionAll"),(0,a.kt)("p",null,"If you need to pull data from multiple tables and cannot use joins to do so,\nthen ",(0,a.kt)("inlineCode",{parentName:"p"},"pgUnionAll")," is your friend."),(0,a.kt)("p",null,"This step class uses the SQL ",(0,a.kt)("inlineCode",{parentName:"p"},"UNION ALL")," construct to select a number\n(including zero, which is a good number for GraphQL unions ðŸ˜‰) of fields\nfrom a one or more different tables that might all be part of the same union or\ninterface in GraphQL."),(0,a.kt)("p",null,"You may specify a list of shared fields, and if so then you can order by these\nshared fields, or apply conditions to them, and we'll pass these orders and\nconditions down to the individual table selects (as part of the ",(0,a.kt)("inlineCode",{parentName:"p"},"UNION ALL"),") to\nensure that we get the results in the most efficient manner. You can of course\nstill select fields that are not shared using the normal GraphQL typed fragment\nspreading mechanism."),(0,a.kt)("admonition",{type:"warning"},(0,a.kt)("p",{parentName:"admonition"},"Right now these shared fields must match name and type exactly on each source\nin the union (we don't check this, but unexpected errors may occur at runtime\nif you don't adhere to it). There's definitely scope to soften these\nrequirements - get in touch if this is something you need.")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"pgUnionAll")," is polymorphic-capable (but it doesn't\nhave to be polymorphic!) and supports both limit/offset and cursor pagination."),(0,a.kt)("h2",{id:"pgunionall-function"},"pgUnionAll function"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"pgUnionAll")," function accepts one argument - the ",(0,a.kt)("inlineCode",{parentName:"p"},"PgUnionAllStepConfig"),".\nThis configuration object has the following entries:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"resourceByTypeName")," - (required) a map from GraphQL type name to the relevant\n",(0,a.kt)("inlineCode",{parentName:"li"},"PgResource")," from which matching records can be fetched."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"members")," - (optional) a list of details of the sources and relationship\npaths to combine in the ",(0,a.kt)("inlineCode",{parentName:"li"},"union all")," statement; each entry in ",(0,a.kt)("inlineCode",{parentName:"li"},"members")," will\nbecome another ",(0,a.kt)("inlineCode",{parentName:"li"},"union all"),"'d ",(0,a.kt)("inlineCode",{parentName:"li"},"select")," statement. If unspecified, we'll generate\nmembers for you based on ",(0,a.kt)("inlineCode",{parentName:"li"},"resourceByTypeName"),".",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"TODO: document subkeys of members"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"attributes")," - (optional) an object defining the available common attributes\n(if any) as a map from the attribute name to a specification object\ncontaining the ",(0,a.kt)("inlineCode",{parentName:"li"},"codec")," to use for the attribute; this is generally used with\nGraphQL interfaces"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"mode")," - (optional) ",(0,a.kt)("inlineCode",{parentName:"li"},"normal")," for normal mode (default), or ",(0,a.kt)("inlineCode",{parentName:"li"},"aggregate")," for\nperforming aggregates (such as ",(0,a.kt)("inlineCode",{parentName:"li"},"count(*)"),")")),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"Every ",(0,a.kt)("inlineCode",{parentName:"p"},"source")," must have the same ",(0,a.kt)("inlineCode",{parentName:"p"},"executor"),", whether the source is defined\nexplicitly, or implicitly by following the given relationships."),(0,a.kt)("p",{parentName:"admonition"},"Every final ",(0,a.kt)("inlineCode",{parentName:"p"},"source")," (the source found at the end of any relationship paths)\nmust have a primary key (an entry in ",(0,a.kt)("inlineCode",{parentName:"p"},"source.uniques")," with\n",(0,a.kt)("inlineCode",{parentName:"p"},"isPrimary === true"),") that can be used to fetch the resulting record that\nmatches the entry in the union.")),(0,a.kt)("h2",{id:"applying-conditions"},"Applying conditions"),(0,a.kt)("p",null,"Conditions can be applied to the resulting step via the ",(0,a.kt)("inlineCode",{parentName:"p"},".where()")," method,\nwhich accepts an object containing the following keys:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"attribute")," - the (string) name of the attribute from the ",(0,a.kt)("inlineCode",{parentName:"li"},"pgUnionAll"),(0,a.kt)("inlineCode",{parentName:"li"},"attributes")," to apply the condition against"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"callback")," - a callback function, invoked for each union source and passed\nthe alias for that source, that should return an SQL fragment expressing the\ncondition.")),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},(0,a.kt)("inlineCode",{parentName:"p"},"callback")," will be called for each entry in ",(0,a.kt)("inlineCode",{parentName:"p"},"members")," since each source is\nresponsible for adding its own conditions.")),(0,a.kt)("h2",{id:"custom-ordering"},"Custom ordering"),(0,a.kt)("p",null,"The order of the union can be specified via the ",(0,a.kt)("inlineCode",{parentName:"p"},".orderBy()")," method,\nwhich accepts an object containing the following keys:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"attribute")," - the (string) name of the attribute from the ",(0,a.kt)("inlineCode",{parentName:"li"},"pgUnionAll"),(0,a.kt)("inlineCode",{parentName:"li"},"attributes")," to use for ordering."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"direction")," - either ",(0,a.kt)("inlineCode",{parentName:"li"},"ASC")," for ascending order, or ",(0,a.kt)("inlineCode",{parentName:"li"},"DESC")," for descending\norder. All other values have undefined results that may change in a patch\nrelease.")),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"Every entry in ",(0,a.kt)("inlineCode",{parentName:"p"},"members")," will be ordered, and the ",(0,a.kt)("inlineCode",{parentName:"p"},"union all")," will be ordered again\nto ensure a stable ordering result.")),(0,a.kt)("h2",{id:"pagination"},"Pagination"),(0,a.kt)("p",null,"Limit/offset pagination can be accomplished via ",(0,a.kt)("inlineCode",{parentName:"p"},".setFirst($n)")," and\n",(0,a.kt)("inlineCode",{parentName:"p"},".setOffset($n)"),". ",(0,a.kt)("inlineCode",{parentName:"p"},"pgUnionAll")," also implements the relevant interfaces to\nsupport the ",(0,a.kt)("a",{parentName:"p",href:"/grafast/step-library/standard-steps/connection"},(0,a.kt)("inlineCode",{parentName:"a"},"connection"))," step for cursor\npagination."),(0,a.kt)("h2",{id:"example"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'const $vulnerabilities = pgUnionAll({\n  executor: firstPartyVulnerabilitiesResource.executor,\n  resourceByTypeName: {\n    FirstPartyVulnerability: firstPartyVulnerabilitiesResource,\n    ThirdPartyVulnerability: thirdPartyVulnerabilitiesResource,\n  },\n  attributes: {\n    cvss_score: {\n      codec: TYPES.float,\n    },\n  },\n});\n$vulnerabilities.orderBy({\n  attribute: "cvss_score",\n  direction: "DESC",\n});\n$vulnerabilities.where({\n  attribute: "cvss_score",\n  callback: (alias) =>\n    sql`${alias} > ${$vulnerabilities.placeholder(constant(6), TYPES.float)}`,\n});\n$vulnerabilities.setFirst(2);\n$vulnerabilities.setOffset(2);\n')),(0,a.kt)("h2",{id:"pgunionall-sql-explained"},"pgUnionAll SQL explained"),(0,a.kt)("p",null,"Though the ",(0,a.kt)("inlineCode",{parentName:"p"},"UNION ALL")," complicates PostgreSQL's planning and execution, we've\nput effort into building the most efficient SQL queries we can for this\nproblem, whilst still supporting pagination, custom conditions and custom\nordering. This does result in more complex SQL queries than you may be used\nto from this module. Effectively the queries look like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sql"},'-- OUTER SELECT\nselect\n  __union__."0"::text,\n  __union__."1"::text\nfrom (\n    -- MIDDLE SELECT\n    select\n      __first_table__."0",\n      __first_table__."1",\n      __first_table__."2",\n      "n"\n    from (\n      -- INNER SELECT\n      select\n        __first_table__."column1" as "0",\n        __first_table__."id" as "1",\n        \'FirstTable\' as "2",\n        row_number() over (partition by 1) as "n"\n      from first_table as __first_table__\n      where ...\n      order by __first_table__."column1"\n      limit ...\n    )\n  -- Any number of additional "middle selects" from different tables\n  -- via \'union all\'\n  union all\n    select\n  ...\n  order by\n    "0" desc,\n    "n" asc,\n    "2" asc\n  limit ...\n  offset ...\n) __union__\n')),(0,a.kt)("p",null,'We\'ll have as many "inner select" and "middle select" fragments as there are\ntables in the union.'),(0,a.kt)("p",null,'Each "inner select" is responsible for selecting the requisite common fields\nfrom each individual table, applying any conditions (into the ',(0,a.kt)("inlineCode",{parentName:"p"},"where")," clause),\napplying the ordering (",(0,a.kt)("inlineCode",{parentName:"p"},"order by")," clause), and applying a limit (which will be\nthe main limit plus the offset so that we can source enough rows for the\n",(0,a.kt)("inlineCode",{parentName:"p"},"union all"),"'s limit/offset to apply)."),(0,a.kt)("p",null,"The middle select exists solely because ",(0,a.kt)("inlineCode",{parentName:"p"},"union all")," only\nallows a single ",(0,a.kt)("inlineCode",{parentName:"p"},"order by")," at the end of the statement, and for some reason we\nthink we know better how to optimize this query than Postgres does... (Time\nwill tell.) So the middle select just re-selects the relevant attributes."),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"union all")," statement then orders by the relevant attributes again\n(including the type name and the ",(0,a.kt)("inlineCode",{parentName:"p"},"row_number()")," to ensure there's a stable\norder) and applies the final limit/offset."),(0,a.kt)("p",null,'Finally the "outer select" selects the fields we need, and casts them according\nto the codecs involved. Note that we couldn\'t have cast them earlier since they\nwere used in ordering, and casting them to text (for example) could seriously\ncompromise the ordering.'))}u.isMDXComponent=!0}}]);