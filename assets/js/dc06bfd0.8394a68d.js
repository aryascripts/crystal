"use strict";(self.webpackChunk_localrepo_postgraphile_website=self.webpackChunk_localrepo_postgraphile_website||[]).push([[9566],{30876:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>d});var r=n(2784);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),l=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(s.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,u=p(e,["components","mdxType","originalType","parentName"]),c=l(n),h=o,d=c["".concat(s,".").concat(h)]||c[h]||m[h]||a;return n?r.createElement(d,i(i({ref:t},u),{},{components:n})):r.createElement(d,i({ref:t},u))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=h;var p={};for(var s in t)hasOwnProperty.call(t,s)&&(p[s]=t[s]);p.originalType=e,p[c]="string"==typeof e?e:o,i[1]=p;for(var l=2;l<a;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},14415:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>a,metadata:()=>p,toc:()=>l});var r=n(7896),o=(n(2784),n(30876));const a={},i="Exporting your schema",p={unversionedId:"exporting-schema",id:"exporting-schema",title:"Exporting your schema",description:"One of the major new features of PostGraphile V5 is the ability to export your",source:"@site/postgraphile/exporting-schema.md",sourceDirName:".",slug:"/exporting-schema",permalink:"/postgraphile/next/exporting-schema",draft:!1,editUrl:"https://github.com/graphile/crystal/tree/main/postgraphile/website/postgraphile/exporting-schema.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Behavior",permalink:"/postgraphile/next/behavior"},next:{title:"Quick start guide",permalink:"/postgraphile/next/quick-start-guide"}},s={},l=[{value:"Running the export",id:"running-the-export",level:2}],u={toc:l},c="wrapper";function m(e){let{components:t,...n}=e;return(0,o.kt)(c,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"exporting-your-schema"},"Exporting your schema"),(0,o.kt)("p",null,'One of the major new features of PostGraphile V5 is the ability to export your\nschema as executable code. You might use this as a way to "eject" your schema so\nthat you can take care of writing it yourself, or you could use it to make\nstartup in production faster by removing the need for introspection and the\nplugin systems of graphile-build, or you might just use it to get a better\nunderstanding of how your schema works.'),(0,o.kt)("p",null,"However you plan to use it, it's a powerful and exciting new feature! To use\nthis feature:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"build your schema"),(0,o.kt)("li",{parentName:"ol"},"call ",(0,o.kt)("inlineCode",{parentName:"li"},"exportSchema")," on it")),(0,o.kt)("p",null,"Here's a simple example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'import { exportSchema } from "graphile-export";\nimport { makeSchema } from "postgraphile";\nimport config from "./graphile.config.js";\nimport * as jsonwebtoken from "jsonwebtoken";\n\nasync function main() {\n  const { schema, resolvedPreset } = await makeSchema(config);\n  const exportFileLocation = `${__dirname}/exported-schema.mjs`;\n  await exportSchema(schema, exportFileLocation, {\n    mode: "graphql-js",\n    // or:\n    // mode: "typeDefs",\n    modules: {\n      jsonwebtoken: jsonwebtoken,\n    },\n  });\n}\n\nmain().catch((e) => {\n  console.error(e);\n  process.exit(1);\n});\n')),(0,o.kt)("p",null,"Run this file, and you should see a ",(0,o.kt)("inlineCode",{parentName:"p"},"exported-schema.mjs")," file containing your\nexecutable schema. You'll notice that this schema does not import\ngraphile-build, graphile-build-pg, etc - it just imports what it needs from\n",(0,o.kt)("inlineCode",{parentName:"p"},"graphql"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"grafast")," and similar runtime modules."),(0,o.kt)("admonition",{type:"warning"},(0,o.kt)("p",{parentName:"admonition"},"Not all PostGraphile plugins support exporting the schema, if you use plugins\nthat don't support exporting then your exported schema is likely to have\nruntime or even security issues. It is essential that you thoroughly test\nyour exported schema before relying on it.")),(0,o.kt)("admonition",{type:"warning"},(0,o.kt)("p",{parentName:"admonition"},"Exporting a GraphQL schema is error-prone, so you should test your exported\nschema thoroughly. The main failure mode for exported schemas is runtime errors\nor incorrect variable references when an exported function attempts to\nreference a variable in the parent scope and that variable wasn't correctly\nhandled via the ",(0,o.kt)("inlineCode",{parentName:"p"},"EXPORTABLE()")," function from ",(0,o.kt)("inlineCode",{parentName:"p"},"graphile-export"),". Using\n",(0,o.kt)("inlineCode",{parentName:"p"},"eslint-plugin-graphile-export")," will help catch most of these kinds of errors,\nbut you should be careful to ensure that every function that will be exported\nis either wrapped with ",(0,o.kt)("inlineCode",{parentName:"p"},"EXPORTABLE")," (with the correct args) or is from a\ndeclared module - see the ",(0,o.kt)("inlineCode",{parentName:"p"},"graphile-export")," documentation.")),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"If you will be exporting your GraphQL schema we ",(0,o.kt)("strong",{parentName:"p"},"highly recommend")," that you\nadopt the exported schema into every facet of your development lifecycle: you\nshould use the exported schema in development, you should use it when running\ntests, and you should use it on your staging environments. This will give lots\nof opportunity for you and your QA engineer colleagues to catch any bugs in the\nexport.")),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"We ",(0,o.kt)("strong",{parentName:"p"},"highly recommend")," that plugin authors (both for internal project plugins\nand plugins distributed via ",(0,o.kt)("inlineCode",{parentName:"p"},"npm"),") use the\n",(0,o.kt)("a",{parentName:"p",href:"http://www.npmjs.com/package/eslint-plugin-graphile-export"},"eslint-plugin-graphile-export"),"\nESLint plugin to ensure that your methods are correctly exported. This plugin\nis still experimental so limit it to only running against your plugin code, but\nit really helps to catch a variety of issues that may prevent your schema from\nbeing exported correctly.")),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"You may get value from running ESLint, TypeScript, and/or other code validation\ntooling against the exported code to ensure there are no undefined variable\nreferences or similar.")),(0,o.kt)("h2",{id:"running-the-export"},"Running the export"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="run-exported.mjs"',title:'"run-exported.mjs"'},'import { grafserv } from "postgraphile/grafserv/node";\nimport { createServer } from "node:http";\nimport preset from "./graphile.config.js";\nimport { schema } from "./exported-schema.mjs";\n\nconst server = createServer();\nconst serv = grafserv({ preset, schema });\nserv.addTo(server);\nserver.listen(5555);\nconsole.log("Listening on http://localhost:5555/");\n')))}m.isMDXComponent=!0}}]);