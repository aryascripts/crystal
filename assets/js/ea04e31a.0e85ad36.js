"use strict";(self.webpackChunk_localrepo_postgraphile_website=self.webpackChunk_localrepo_postgraphile_website||[]).push([[3572],{30876:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var r=n(2784);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},u="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(n),m=o,d=u["".concat(l,".").concat(m)]||u[m]||f[m]||i;return n?r.createElement(d,a(a({ref:t},p),{},{components:n})):r.createElement(d,a({ref:t},p))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:o,a[1]=s;for(var c=2;c<i;c++)a[c]=n[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},25662:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>f,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var r=n(7896),o=(n(2784),n(30876));const i={layout:"page",path:"/postgraphile/function-restrictions/",title:"Database Function Restrictions"},a=void 0,s={unversionedId:"function-restrictions",id:"version-4.x/function-restrictions",title:"Database Function Restrictions",description:"PostGraphile supports a wide range of PostgreSQL functions; however we do not",source:"@site/versioned_docs/version-4.x/function-restrictions.md",sourceDirName:".",slug:"/function-restrictions",permalink:"/postgraphile/current/function-restrictions",draft:!1,editUrl:"https://github.com/graphile/crystal/tree/main/postgraphile/website/versioned_docs/version-4.x/function-restrictions.md",tags:[],version:"4.x",frontMatter:{layout:"page",path:"/postgraphile/function-restrictions/",title:"Database Function Restrictions"},sidebar:"docs",previous:{title:"Custom Mutations",permalink:"/postgraphile/current/custom-mutations"},next:{title:"Database Function Gallery",permalink:"/postgraphile/current/function-gallery"}},l={},c=[{value:"Thanks",id:"thanks",level:3}],p={toc:c},u="wrapper";function f(e){let{components:t,...n}=e;return(0,o.kt)(u,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"PostGraphile supports a wide range of PostgreSQL functions; however we do not\nsupport:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"VARIADIC functions"),(0,o.kt)("li",{parentName:"ul"},"overloaded functions (because it's not currently possible to expose them\nneatly over GraphQL)"),(0,o.kt)("li",{parentName:"ul"},"functions that return ",(0,o.kt)("inlineCode",{parentName:"li"},"record")," without any more type information (because we\ndon't know what columns that ",(0,o.kt)("inlineCode",{parentName:"li"},"record")," will contain, and thus cannot convert it\nto GraphQL)",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"to solve this, change ",(0,o.kt)("inlineCode",{parentName:"li"},"record")," to be the name of a composite type that\nyou've defined with ",(0,o.kt)("inlineCode",{parentName:"li"},"CREATE TYPE")," (or similar)")))),(0,o.kt)("h3",{id:"thanks"},"Thanks"),(0,o.kt)("p",null,"This page used to be a lot larger; until community contributor Matt Bretl\nswooped in and lifted almost all the restrictions ","\u2014"," thanks Matt!"))}f.isMDXComponent=!0}}]);