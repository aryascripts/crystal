"use strict";(self.webpackChunk_localrepo_postgraphile_website=self.webpackChunk_localrepo_postgraphile_website||[]).push([[804],{30876:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>h});var a=r(2784);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},i=Object.keys(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var l=a.createContext({}),p=function(e){var t=a.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},c=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},g=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=p(r),g=n,h=u["".concat(l,".").concat(g)]||u[g]||d[g]||i;return r?a.createElement(h,o(o({ref:t},c),{},{components:r})):a.createElement(h,o({ref:t},c))}));function h(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=r.length,o=new Array(i);o[0]=g;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:n,o[1]=s;for(var p=2;p<i;p++)o[p]=r[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,r)}g.displayName="MDXCreateElement"},81835:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var a=r(7896),n=(r(2784),r(30876));const i={title:"Registry"},o=void 0,s={unversionedId:"registry",id:"registry",title:"Registry",description:"As you know: PostGraphile builds a GraphQL schema for you by introspecting your",source:"@site/postgraphile/registry.md",sourceDirName:".",slug:"/registry",permalink:"/postgraphile/next/registry",draft:!1,editUrl:"https://github.com/graphile/crystal/tree/main/postgraphile/website/postgraphile/registry.md",tags:[],version:"current",frontMatter:{title:"Registry"},sidebar:"docs",previous:{title:"Quick start guide",permalink:"/postgraphile/next/quick-start-guide"},next:{title:"Inflection",permalink:"/postgraphile/next/inflection"}},l={},p=[{value:"Codecs",id:"codecs",level:2},{value:"Resources",id:"resources",level:2},{value:"Relations",id:"relations",level:2},{value:"Registry",id:"registry",level:2}],c={toc:p},u="wrapper";function d(e){let{components:t,...r}=e;return(0,n.kt)(u,(0,a.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"As you know: PostGraphile builds a GraphQL schema for you by introspecting your\ndatabase. What you may not know is that it does this through multiple phases\nusing the ",(0,n.kt)("a",{parentName:"p",href:"https://build.graphile.org/graphile-build/"},"Graphile Build")," library.\nIn the ",(0,n.kt)("inlineCode",{parentName:"p"},"gather"),' phase, PostGraphile introspects your database, and builds up a\n"registry" of all of the "codecs", "resources" and "relations" that it finds.\nThen during the ',(0,n.kt)("inlineCode",{parentName:"p"},"schema")," phase, it inspects this registry and uses it to decide\nwhat your GraphQL schema should contain."),(0,n.kt)("p",null,"When you're just getting started with PostGraphile, it's not very important to\nunderstand the registry, you can get away with these basic concepts to help you\nto understand error messages:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"A ",(0,n.kt)("inlineCode",{parentName:"li"},"codec")," represents a database type (a scalar, composite, list, domain or range type)"),(0,n.kt)("li",{parentName:"ul"},"A ",(0,n.kt)("inlineCode",{parentName:"li"},"resource")," represents something in the database from which you can pull data (a table, view, materialized view or function)"),(0,n.kt)("li",{parentName:"ul"},"A ",(0,n.kt)("inlineCode",{parentName:"li"},"relation")," is a uni-directional link from a codec (e.g. a table ",(0,n.kt)("em",{parentName:"li"},"type"),") to a resource (e.g. a table itself)")),(0,n.kt)("p",null,"However, once you want to start writing your own plans, for example via\n",(0,n.kt)("a",{parentName:"p",href:"/postgraphile/next/make-extend-schema-plugin"},(0,n.kt)("inlineCode",{parentName:"a"},"makeExtendSchemaPlugin")),", understanding the\nregistry becomes more important."),(0,n.kt)("h2",{id:"codecs"},"Codecs"),(0,n.kt)("p",null,'A "codec" describes a type in your PostgreSQL database. There are built-in\ncodecs for the basic scalars:'),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},'import { TYPES } from "postgraphile/@dataplan/pg";\n\nconst { int, bool, text /* ... */ } = TYPES;\n')),(0,n.kt)("p",null,"PostGraphile will automatically generate codecs for all of the types in your\ndatabase, whether they are scalar, composite (including the underlying type\nthat each of your tables/views/etc have), list, domain, or range types."),(0,n.kt)("p",null,"PostGraphile automatically names these types after their name in the database\nvia an inflector. For example, composite types use the ",(0,n.kt)("inlineCode",{parentName:"p"},"classCodecName"),"\ninflector."),(0,n.kt)("p",null,"You can read more about codecs (including how to make your own, and what the\nbuilt-in scalar codecs are) in the ",(0,n.kt)("inlineCode",{parentName:"p"},"@dataplan/pg")," documentation:\n",(0,n.kt)("a",{parentName:"p",href:"https://grafast.org/grafast/step-library/dataplan-pg/registry/codecs"},"https://grafast.org/grafast/step-library/dataplan-pg/registry/codecs")),(0,n.kt)("h2",{id:"resources"},"Resources"),(0,n.kt)("p",null,'A "resource" represents something that you can pull data from in your database.\nMost commonly this is a table, but it also includes views, materialized views\nand functions. You can even build resources for custom SQL expressions should\nyou wish.'),(0,n.kt)("p",null,"PostGraphile automatically build resources for you based on all your tables,\nviews, materialized views and functions."),(0,n.kt)("p",null,'There are two main classes of resources. "Table-like" resources don\'t accept\nany parameters, you can get resources from them directly using\n',(0,n.kt)("a",{parentName:"p",href:"https://grafast.org/grafast/step-library/dataplan-pg/registry/resources#resourcefindspec"},(0,n.kt)("inlineCode",{parentName:"a"},"resource.find(spec)")),"\nor\n",(0,n.kt)("a",{parentName:"p",href:"https://grafast.org/grafast/step-library/dataplan-pg/registry/resources#resourcegetspec"},(0,n.kt)("inlineCode",{parentName:"a"},"resource.get(spec)")),'.\n"Function-like" resources require a list of parameters (even an empty list),\nand for these you would use\n',(0,n.kt)("a",{parentName:"p",href:"https://grafast.org/grafast/step-library/dataplan-pg/registry/resources#resourcefindspec"},(0,n.kt)("inlineCode",{parentName:"a"},"resource.execute(args)")),"."),(0,n.kt)("p",null,"You can read more about resources in the ",(0,n.kt)("inlineCode",{parentName:"p"},"@dataplan/pg")," documentation:\n",(0,n.kt)("a",{parentName:"p",href:"https://grafast.org/grafast/step-library/dataplan-pg/registry/resources"},"https://grafast.org/grafast/step-library/dataplan-pg/registry/resources")),(0,n.kt)("h2",{id:"relations"},"Relations"),(0,n.kt)("p",null,'A "relation" is a uni-directional (one way) relationship from a codec (i.e.\ntype) to a table-like resource (i.e. table). Assuming you have some data for\nthe given codec (whether you got that data from a table, function, or even read\nit from a file), a relation describes how to get from that to the related\nrecords (or record) in the given resource.'),(0,n.kt)("p",null,"In general, foreign key constraints will register ",(0,n.kt)("em",{parentName:"p"},"two"),' relations, one for the\nreferring table (the table on which the foreign key is defined) to the\nreferenced table (this is the "forward" relation, and is always unique) and one\nfrom the referenced table back to the referring table (this is the "backward"\nor "referencee" relation, and may or may not be unique depending on the unique\nconstraints on the referring table).'),(0,n.kt)("p",null,"You can read more about relations in the ",(0,n.kt)("inlineCode",{parentName:"p"},"@dataplan/pg")," documentation:\n",(0,n.kt)("a",{parentName:"p",href:"https://grafast.org/grafast/step-library/dataplan-pg/registry/relations"},"https://grafast.org/grafast/step-library/dataplan-pg/registry/relations")),(0,n.kt)("h2",{id:"registry"},"Registry"),(0,n.kt)("p",null,"The registry is the container for codecs, resources, and relations. When you're\nwriting a plugin, if you have a reference to the ",(0,n.kt)("inlineCode",{parentName:"p"},"build")," object then you can\naccess the registry via ",(0,n.kt)("inlineCode",{parentName:"p"},"build.input.pgRegistry"),". It contains the properties\n",(0,n.kt)("inlineCode",{parentName:"p"},"pgCodecs"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"pgResources")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"pgRelations"),". If you had a ",(0,n.kt)("inlineCode",{parentName:"p"},"users")," table then,\ndepending on the inflectors you're using, it's codec might be\n",(0,n.kt)("inlineCode",{parentName:"p"},"build.input.pgRegistry.pgCodecs.users"),", its resource\n",(0,n.kt)("inlineCode",{parentName:"p"},"build.input.pgRegistry.pgResources.users")," and its relations a keyed object\n(hash/map/record) stored at ",(0,n.kt)("inlineCode",{parentName:"p"},"build.input.pgRegistry.pgRelations.users"),"."),(0,n.kt)("p",null,"You can read more about the registry in the ",(0,n.kt)("inlineCode",{parentName:"p"},"@dataplan/pg")," documentation:\n",(0,n.kt)("a",{parentName:"p",href:"https://grafast.org/grafast/step-library/dataplan-pg/registry/"},"https://grafast.org/grafast/step-library/dataplan-pg/registry/")))}d.isMDXComponent=!0}}]);