"use strict";(self.webpackChunk_localrepo_postgraphile_website=self.webpackChunk_localrepo_postgraphile_website||[]).push([[8317],{30876:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>h});var a=t(2784);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),p=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=p(e.components);return a.createElement(s.Provider,{value:n},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(t),d=r,h=u["".concat(s,".").concat(d)]||u[d]||m[d]||o;return t?a.createElement(h,i(i({ref:n},c),{},{components:t})):a.createElement(h,i({ref:n},c))}));function h(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=d;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[u]="string"==typeof e?e:r,i[1]=l;for(var p=2;p<o;p++)i[p]=t[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},10538:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var a=t(7896),r=(t(2784),t(30876));const o={layout:"page",path:"/postgraphile/relations/",title:"Relations"},i=void 0,l={unversionedId:"relations",id:"version-4.x/relations",title:"Relations",description:"We automatically discover relations between database tables by inspecting their",source:"@site/versioned_docs/version-4.x/relations.md",sourceDirName:".",slug:"/relations",permalink:"/postgraphile/current/relations",draft:!1,editUrl:"https://github.com/graphile/crystal/tree/main/postgraphile/website/versioned_docs/version-4.x/relations.md",tags:[],version:"4.x",frontMatter:{layout:"page",path:"/postgraphile/relations/",title:"Relations"},sidebar:"docs",previous:{title:"PostgreSQL Tables",permalink:"/postgraphile/current/tables"},next:{title:"Connections",permalink:"/postgraphile/current/connections"}},s={},p=[{value:"Examples",id:"examples",level:3},{value:"Example database schema for one-to-many relation",id:"example-database-schema-for-one-to-many-relation",level:4},{value:"Example query against the above schema",id:"example-query-against-the-above-schema",level:4},{value:"Many-to-many relations",id:"many-to-many-relations",level:4}],c={toc:p},u="wrapper";function m(e){let{components:n,...t}=e;return(0,r.kt)(u,(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"We automatically discover relations between database tables by inspecting their\nforeign keys (and indexes if ",(0,r.kt)("inlineCode",{parentName:"p"},"--no-ignore-indexes")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"ignoreIndexes: false")," is\nset), and use these to build relations into the generated GraphQL schema."),(0,r.kt)("p",null,"An example of a foreign key constraint when defining a table would be the\n",(0,r.kt)("inlineCode",{parentName:"p"},"REFERENCES")," keyword below:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql",metastring:"{4}","{4}":!0},"CREATE TABLE app_public.users (\n  -- ...\n  organization_id int NOT NULL\n    REFERENCES app_public.organizations ON DELETE CASCADE,\n  -- ...\n);\nCREATE INDEX ON app_public.users (organization_id);\n")),(0,r.kt)("p",null,"Alternatively a foreign key constraint can be added after table creation:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"ALTER TABLE users\n  ADD CONSTRAINT users_organization_id_fkey\n  FOREIGN KEY (organization_id)\n  REFERENCES organizations\n  ON DELETE CASCADE;\nCREATE INDEX ON users (organization_id);\n")),(0,r.kt)("p",null,"You can read more about defining foreign key constraints, including constraints\nthat utilise multiple columns, in the\n",(0,r.kt)("a",{parentName:"p",href:"https://www.postgresql.org/docs/current/static/ddl-constraints.html#DDL-CONSTRAINTS-FK"},"PostgreSQL documentation"),"."),(0,r.kt)("p",null,"PostGraphile detects and exposes one-to-one, one-to-many and many-to-one\nrelations automatically. Many-to-many relationships can be handled with the\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/graphile-contrib/pg-many-to-many"},"many-to-many relations plugin"),"."),(0,r.kt)("p",null,"By default, relations are exposed as GraphQL fields using a camelCase\ncombination of the target type and the source fields (inflectors:\n",(0,r.kt)("inlineCode",{parentName:"p"},"singleRelationByKeys"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"singleRelationByKeysBackwards"),", and\n",(0,r.kt)("inlineCode",{parentName:"p"},"manyRelationByKeys"),"). Unique constraints expose a GraphQL table type directly,\nnon-unique constraints expose a ",(0,r.kt)("a",{parentName:"p",href:"./connections/"},"connection"),". The GraphQL\nconnections that these relations expose support pagination,\n",(0,r.kt)("a",{parentName:"p",href:"./filtering/"},"filtering"),", and ordering."),(0,r.kt)("h3",{id:"examples"},"Examples"),(0,r.kt)("h4",{id:"example-database-schema-for-one-to-many-relation"},"Example database schema for one-to-many relation"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"create schema a;\ncreate schema c;\n\ncreate table c.person (\n  id serial primary key,\n  name varchar not null,\n  about text,\n  email varchar not null unique,\n  created_at timestamp default current_timestamp\n);\n\ncreate table a.post (\n  id serial primary key,\n  headline text not null,\n  body text,\n  -- `references` \ud83d\udc47  sets up the foreign key relation\n  author_id int4 references c.person(id)\n);\ncreate index on a.post (author_id);\n")),(0,r.kt)("h4",{id:"example-query-against-the-above-schema"},"Example query against the above schema"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"{\n  allPosts {\n    nodes {\n      headline\n      body\n\n      # this relation is automatically exposed\n      personByAuthorId {\n        id\n        name\n        about\n      }\n    }\n  }\n}\n")),(0,r.kt)("h4",{id:"many-to-many-relations"},"Many-to-many relations"),(0,r.kt)("p",null,"Many-to-many relations can be handled with the\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/graphile-contrib/pg-many-to-many"},"many-to-many relations plugin"),"\nor by using a computed column that returns ",(0,r.kt)("inlineCode",{parentName:"p"},"setof"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'\ncreate table post (\n  id serial primary key,\n  headline text,\n  body text\n);\ncreate table author (\n  id serial primary key,\n  name text\n);\ncreate table post_author (\n  post_id integer references post,\n  author_id integer references author,\n  primary key (post_id, author_id)\n);\n\ncreate function "post_authorsByPostId"(p post)\nreturns setof author as $$\n  select author.*\n  from author\n  inner join post_author\n  on (post_author.author_id = author.id)\n  where post_author.post_id = p.id;\n$$ language sql stable;\n\n')))}m.isMDXComponent=!0}}]);