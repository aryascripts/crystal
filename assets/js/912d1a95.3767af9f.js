"use strict";(self.webpackChunk_localrepo_postgraphile_website=self.webpackChunk_localrepo_postgraphile_website||[]).push([[9190],{30876:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>h});var r=t(2784);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),p=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=p(e.components);return r.createElement(l.Provider,{value:n},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=p(t),m=a,h=u["".concat(l,".").concat(m)]||u[m]||d[m]||i;return t?r.createElement(h,o(o({ref:n},c),{},{components:t})):r.createElement(h,o({ref:n},c))}));function h(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=m;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[u]="string"==typeof e?e:a,o[1]=s;for(var p=2;p<i;p++)o[p]=t[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},83602:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var r=t(7896),a=(t(2784),t(30876));const i={layout:"page",path:"/postgraphile/bundling-webpack/",title:"Bundling PostGraphile with Webpack"},o=void 0,s={unversionedId:"bundling-webpack",id:"version-4.x/bundling-webpack",title:"Bundling PostGraphile with Webpack",description:"PostGraphile is designed to be ran as a standard Node.js application on the",source:"@site/versioned_docs/version-4.x/bundling-webpack.md",sourceDirName:".",slug:"/bundling-webpack",permalink:"/postgraphile/current/bundling-webpack",draft:!1,editUrl:"https://github.com/graphile/crystal/tree/main/postgraphile/website/versioned_docs/version-4.x/bundling-webpack.md",tags:[],version:"4.x",frontMatter:{layout:"page",path:"/postgraphile/bundling-webpack/",title:"Bundling PostGraphile with Webpack"},sidebar:"docs",previous:{title:"Testing with Jest",permalink:"/postgraphile/current/testing-jest"},next:{title:"Multiple GraphQL Schemas with PostGraphile",permalink:"/postgraphile/current/multiple-schemas"}},l={},p=[],c={toc:p},u="wrapper";function d(e){let{components:n,...t}=e;return(0,a.kt)(u,(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"PostGraphile is designed to be ran as a standard Node.js application on the\nserver, using the built in ",(0,a.kt)("inlineCode",{parentName:"p"},"require"),' functionality which reads code from the\nfilesystem. However, if system startup time is a critical metric in your\nenvironment (for example on serverless environments) this "searching and loading\nfrom disk" behaviour can be ',(0,a.kt)("strong",{parentName:"p"},"very")," expensive. One way to solve this problem is\nto bundle your code up into a single JavaScript file so that no filesystem\naccess is required."),(0,a.kt)("p",null,"Webpack is a tool that you can use to bundle JavaScript code up; there are,\nhowever, many gotchas to doing so due to the way that a bundler works, and some\nof these apply to PostGraphile:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"__dirname")," is less meaningful once the package is bundled, since ",(0,a.kt)("inlineCode",{parentName:"li"},"__dirname"),"\nin the bundle likely refers to a different location than ",(0,a.kt)("inlineCode",{parentName:"li"},"__dirname")," did in\nthe original code."),(0,a.kt)("li",{parentName:"ul"},"Bundlers have particular problems with conditional ",(0,a.kt)("inlineCode",{parentName:"li"},"require(...)"),"s and with\nnative modules. Unfortunately PostGraphile depends on modules that have both\nof these problems.")),(0,a.kt)("p",null,"Worry not, for we can work around these issues with some configuration!"),(0,a.kt)("p",null,"A minimal webpack config for PostGraphile (depending on what other resources you\nuse) might be this one from ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/chadfurman"},"@chadfurman"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'module.exports = {\n  // All your other webpack options:\n  // ...\n\n  // We\'re targetting node:\n  target: "node",\n\n  // CUSTOMIZE THIS!\n  context: `${__dirname}/app`,\n\n  // Update `__dirname` references to point to the correct location, relative to\n  // `context`:\n  // https://webpack.js.org/configuration/node/#node__dirname\n  node: {\n    __dirname: true,\n  },\n\n  // We cannot bundle native modules, so leave it out:\n  externals: ["pg-native"],\n};\n')),(0,a.kt)("p",null,"A more invasive and optimised config can be found in our\n",(0,a.kt)("a",{parentName:"p",href:"https://github.com/graphile/postgraphile-lambda-example"},"Lambda example"),"; note\nthat it cannot be used with watch mode and does not support subscriptions.\nHere's a simplified and commented version of it:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'const webpack = require("webpack");\nconst TerserPlugin = require("terser-webpack-plugin");\n\nmodule.exports = {\n  //...\n\n  target: "node",\n  plugins: [\n    // Prevent loading pg-native (in a weird, backwards kind of way!)\n    new webpack.DefinePlugin({\n      // Nice light dependencies\n      "process.env.NODE_ENV": \'"production"\',\n      "process.env.POSTGRAPHILE_ENV": \'"production"\',\n\n      // Forces node-postgres to attempt to use the native module, HOWEVER we\n      // trick this below by replacing the native module with the JavaScript\n      // client using `NormalModuleReplacementPlugin`. \ud83d\ude08\n      "process.env.NODE_PG_FORCE_NATIVE": \'"1"\',\n\n      // Set this if you want the smallest bundle; it excludes GraphiQL\n      "process.env.POSTGRAPHILE_OMIT_ASSETS": \'"1"\',\n    }),\n\n    // Here\'s where we replace the native `pg` module reference with the\n    // JavaScript client. (See NODE_PG_FORCE_NATIVE above.)\n    new webpack.NormalModuleReplacementPlugin(\n      /pg\\/lib\\/native\\/index\\.js$/,\n      "../client.js",\n    ),\n\n    // Omit websocket functionality from postgraphile:\n    new webpack.NormalModuleReplacementPlugin(\n      /postgraphile\\/build\\/postgraphile\\/http\\/subscriptions\\.js$/,\n      `${__dirname}/src/postgraphile-http-subscriptions.js`,\n    ),\n\n    // Just in case you install express, omit the expensive view file:\n    new webpack.NormalModuleReplacementPlugin(\n      /express\\/lib\\/view\\.js$/,\n      `${__dirname}/src/express-lib-view.js`,\n    ),\n  ],\n\n  // We don\'t need to use __dirname any more:\n  node: {\n    __dirname: false, // just output `__dirname`\n  },\n\n  // Without this, you may get errors such as `Error: GraphQL conflict for \'e\'\n  // detected! Multiple versions of graphql exist in your node_modules?`\n  // May not be necessary for newer versions of the `graphql` module.\n  optimization: {\n    minimizer: [\n      new TerserPlugin({\n        terserOptions: {\n          mangle: false, // < This is the important part\n        },\n      }),\n    ],\n  },\n};\n')),(0,a.kt)("p",null,"Note this config depends on\n",(0,a.kt)("a",{parentName:"p",href:"https://raw.githubusercontent.com/graphile/postgraphile-lambda-example/master/src/express-lib-view.js"},"express-lib-view.js"),"\nand\n",(0,a.kt)("a",{parentName:"p",href:"https://github.com/graphile/postgraphile-lambda-example/blob/master/src/postgraphile-http-subscriptions.js"},(0,a.kt)("inlineCode",{parentName:"a"},"postgraphile-http-subscriptions.js"))),(0,a.kt)("p",null,"Install webpack with ",(0,a.kt)("inlineCode",{parentName:"p"},"yarn add --dev webpack webpack-cli")," and then you can run\nit as ",(0,a.kt)("inlineCode",{parentName:"p"},"yarn webpack"),"."))}d.isMDXComponent=!0}}]);