"use strict";(self.webpackChunk_localrepo_postgraphile_website=self.webpackChunk_localrepo_postgraphile_website||[]).push([[5710],{30876:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var r=n(2784);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},u="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=p(n),m=i,d=u["".concat(l,".").concat(m)]||u[m]||h[m]||a;return n?r.createElement(d,o(o({ref:t},c),{},{components:n})):r.createElement(d,o({ref:t},c))}));function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:i,o[1]=s;for(var p=2;p<a;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},61656:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>p});var r=n(7896),i=(n(2784),n(30876));const a={layout:"page",path:"/postgraphile/multiple-schemas/",title:"Multiple GraphQL Schemas with PostGraphile"},o=void 0,s={unversionedId:"multiple-schemas",id:"version-4.x/multiple-schemas",title:"Multiple GraphQL Schemas with PostGraphile",description:"Each \u200bPostGraphile instance only creates a single GraphQL schema \u2500 you don't get",source:"@site/versioned_docs/version-4.x/multiple-schemas.md",sourceDirName:".",slug:"/multiple-schemas",permalink:"/postgraphile/current/multiple-schemas",draft:!1,editUrl:"https://github.com/graphile/crystal/tree/main/postgraphile/website/versioned_docs/version-4.x/multiple-schemas.md",tags:[],version:"4.x",frontMatter:{layout:"page",path:"/postgraphile/multiple-schemas/",title:"Multiple GraphQL Schemas with PostGraphile"},sidebar:"docs",previous:{title:"Bundling PostGraphile with Webpack",permalink:"/postgraphile/current/bundling-webpack"},next:{title:"Running PostGraphile in Docker",permalink:"/postgraphile/current/running-postgraphile-in-docker"}},l={},p=[{value:"Multiple endpoints",id:"multiple-endpoints",level:3},{value:"Single endpoint, multiple GraphQL schemas",id:"single-endpoint-multiple-graphql-schemas",level:3}],c={toc:p},u="wrapper";function h(e){let{components:t,...n}=e;return(0,i.kt)(u,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Each \u200bPostGraphile instance only creates a single GraphQL schema \u2500 you don't get\none schema per user based on permissions, for example. Typically, in GraphQL, a\nsingle schema is what you want \u2500 it allows you to use the various GraphQL\ntooling for autocomplete, linting, mapping, etc using the same shared schema."),(0,i.kt)("p",null,'However it sometimes makes sense to provide two or more different schemas; for\nexample if you have two completely independent use-cases, or if you need to\ngenerate a special "admin" schema that only admins can access.'),(0,i.kt)("p",null,"Typically it's a good idea to put different schemas on different URIs; it makes\nit easier to point to the relevant schema, download its description, and perform\nthe relevant linting/etc with it. If someone is not allowed access to a schema\nthey simply cannot access that endpoint."),(0,i.kt)("p",null,"It's possible to run multiple PostGraphile schemas in a single Node.js server,\neither mounting them at different endpoints or on the same URI and use a simple\nmiddleware to switch between them. The key thing is to not call ",(0,i.kt)("inlineCode",{parentName:"p"},"postgraphile"),"\nmore times then the number of services you have. So if you have two services you\nwant to only be calling ",(0,i.kt)("inlineCode",{parentName:"p"},"postgraphile")," ",(0,i.kt)("em",{parentName:"p"},"twice")," and not once for every request.\n(This is because every time ",(0,i.kt)("inlineCode",{parentName:"p"},"postgraphile")," is called, it will perform a fresh\nintrospection of your database schema and generate the GraphQL API from that -\nthis would cause considerable lag!)"),(0,i.kt)("h3",{id:"multiple-endpoints"},"Multiple endpoints"),(0,i.kt)("p",null,"Here's an example of mounting multiple PostGraphiles at different endpoints:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'const services = {\n  notification: "CONNECTION_STRING_TO_NOTIFICATION_SERVICE",\n  user: "CONNECTION_STRING_TO_USER_SERVICE",\n};\n\nfor (const [service, connectionString] of Object.entries(services)) {\n  app.use(\n    postgraphile(connectionString, "public", {\n      graphiql: true,\n      graphqlRoute: `/${service}/graphql`,\n      graphiqlRoute: `/${service}/graphiql`,\n    }),\n  );\n}\n')),(0,i.kt)("h3",{id:"single-endpoint-multiple-graphql-schemas"},"Single endpoint, multiple GraphQL schemas"),(0,i.kt)("p",null,"Here's an example of switching which PostGraphile is used at a single endpoint\nbased on some information provided in the HTTP request:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'const services = {\n  notification: postgraphile(\n    "CONNECTION_STRING_TO_NOTIFICATION_SERVICE",\n    "public",\n    {\n      graphiql: true,\n    },\n  ),\n  user: postgraphile("CONNECTION_STRING_TO_USER_SERVICE", "public", {\n    graphiql: true,\n  }),\n};\n\napp.use((req, res, next) => {\n  if (someCondition) {\n    services.notification(req, res, next);\n  } else {\n    services.user(req, res, next);\n  }\n});\n')),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"Code from the example by @calebmer in this issue:\n",(0,i.kt)("a",{parentName:"em",href:"https://github.com/graphile/postgraphile/issues/427#issuecomment-293032341"},"https://github.com/graphile/postgraphile/issues/427#issuecomment-293032341"))))}h.isMDXComponent=!0}}]);