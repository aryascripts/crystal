"use strict";(self.webpackChunk_localrepo_postgraphile_website=self.webpackChunk_localrepo_postgraphile_website||[]).push([[83],{30876:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var i=n(2784);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},o=Object.keys(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=i.createContext({}),p=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=p(e.components);return i.createElement(s.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},g=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=p(n),g=r,h=c["".concat(s,".").concat(g)]||c[g]||m[g]||o;return n?i.createElement(h,a(a({ref:t},u),{},{components:n})):i.createElement(h,a({ref:t},u))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,a=new Array(o);a[0]=g;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[c]="string"==typeof e?e:r,a[1]=l;for(var p=2;p<o;p++)a[p]=n[p];return i.createElement.apply(null,a)}return i.createElement.apply(null,n)}g.displayName="MDXCreateElement"},37504:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var i=n(7896),r=(n(2784),n(30876));const o={layout:"page",path:"/postgraphile/filtering/",title:"Filtering"},a=void 0,l={unversionedId:"filtering",id:"version-4.x/filtering",title:"Filtering",description:"Out of the box, PostGraphile supports rudimentary filtering on",source:"@site/versioned_docs/version-4.x/filtering.md",sourceDirName:".",slug:"/filtering",permalink:"/postgraphile/current/filtering",draft:!1,editUrl:"https://github.com/graphile/crystal/tree/main/postgraphile/website/versioned_docs/version-4.x/filtering.md",tags:[],version:"4.x",frontMatter:{layout:"page",path:"/postgraphile/filtering/",title:"Filtering"},sidebar:"docs",previous:{title:"Connections",permalink:"/postgraphile/current/connections"},next:{title:"CRUD Mutations",permalink:"/postgraphile/current/crud-mutations"}},s={},p=[{value:"Advanced filtering",id:"advanced-filtering",level:3},{value:"Filter Plugin",id:"filter-plugin",level:4},{value:"Other plugins",id:"other-plugins",level:4}],u={toc:p},c="wrapper";function m(e){let{components:t,...n}=e;return(0,r.kt)(c,(0,i.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Out of the box, PostGraphile supports rudimentary filtering on\n",(0,r.kt)("a",{parentName:"p",href:"./connections/"},"connections")," using a ",(0,r.kt)("inlineCode",{parentName:"p"},"condition")," argument. This allows you to\nfilter for specific values (e.g. ",(0,r.kt)("inlineCode",{parentName:"p"},'username: "Alice"')," or ",(0,r.kt)("inlineCode",{parentName:"p"},"category: ARTICLE"),")."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"./examples/#Collections__Relation_condition"},"See an example using the ",(0,r.kt)("inlineCode",{parentName:"a"},"connection")," argument.")),(0,r.kt)("p",null,"It's important when implementing filters to keep performance in mind, so\nPostGraphile gives you the ability to omit certain fields from the list of\nfilters using the ",(0,r.kt)("inlineCode",{parentName:"p"},"@omit filter")," ",(0,r.kt)("a",{parentName:"p",href:"./smart-comments/"},"smart comment"),". You may\nalso use the ",(0,r.kt)("inlineCode",{parentName:"p"},"--no-ignore-indexes")," option to try and automatically omit fields\nthat don't appear to be indexed."),(0,r.kt)("h3",{id:"advanced-filtering"},"Advanced filtering"),(0,r.kt)("p",null,"You can extend PostGraphile's schema with more advance filtering capabilities by\nadding fields using ",(0,r.kt)("a",{parentName:"p",href:"./custom-queries/"},"custom queries"),",\n",(0,r.kt)("a",{parentName:"p",href:"./computed-columns/"},"computed columns")," or by using\n",(0,r.kt)("a",{parentName:"p",href:"./make-extend-schema-plugin/"},"makeExtendSchemaPlugin"),"."),(0,r.kt)("p",null,"You can also augment PostGraphile's existing connections using custom\n",(0,r.kt)("a",{parentName:"p",href:"./extending-raw/"},"Graphile Engine plugins"),", such as the following:"),(0,r.kt)("h4",{id:"filter-plugin"},"Filter Plugin"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"\ud83d\udea8",(0,r.kt)("strong",{parentName:"p"},"BEWARE"),"\ud83d\udea8: adding powerful generic filtering capabilities to your GraphQL\nAPI is strongly discouraged, not just by Benjie (the maintainer of\nPostGraphile) but also\n",(0,r.kt)("a",{parentName:"p",href:"https://twitter.com/leeb/status/1004655619431731200"},"by Lee Byron")," (one of\nthe inventors of GraphQL) and various other experts in the GraphQL ecosystem.\nIt is ",(0,r.kt)("strong",{parentName:"p"},"strongly advised")," that you add only very specific filters using one\nof the techniques above (and that you make their inputs as simple as possible)\nrather than using a generic filtering plugin like this. Not heeding this\nadvice may lead to very significant performance issues down the line that are\nvery hard for you to dig your way out of.")),(0,r.kt)("p",null,"A very popular plugin is Matt Bretl's connection-filter plugin, located at\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/graphile-contrib/postgraphile-plugin-connection-filter"},"https://github.com/graphile-contrib/postgraphile-plugin-connection-filter"),".\nThis adds a ",(0,r.kt)("inlineCode",{parentName:"p"},"filter")," argument to connections that enables you to use advanced\nfilters, including filtering on related records from other tables, using greater\nthan, less than and ranges for filtering, and even filtering against the output\nof functions. If you need advanced filtering in your GraphQL API (and you can\nuse something like\n",(0,r.kt)("a",{parentName:"p",href:"./production/#simple-query-whitelist-persisted-queries"},"persisted queries")," to\nprevent malicious parties issuing complex requests) then I recommend you check\nit out!"),(0,r.kt)("p",null,"Be aware that the connection-filter plugin has no live-query specific handling.\nThis means while ",(0,r.kt)("a",{parentName:"p",href:"./live-queries/"},"live queries")," will work, the filters are not\ntaken into account when checking if the query result changed. This means that\nyou may get a subscription update every time something in the collection\nchanges, even if the result with the applied filter is still the same."),(0,r.kt)("p",null,"With the included ",(0,r.kt)("inlineCode",{parentName:"p"},"condition")," filters live queries work as expected until you\nstart using ",(0,r.kt)("inlineCode",{parentName:"p"},"makeAddPgConditionPlugin")," to add your own conditions."),(0,r.kt)("h4",{id:"other-plugins"},"Other plugins"),(0,r.kt)("p",null,"Some more of the community plugins relate to filtering, you can read more about\nthem on the ",(0,r.kt)("a",{parentName:"p",href:"./community-plugins/"},"community plugins page")))}m.isMDXComponent=!0}}]);