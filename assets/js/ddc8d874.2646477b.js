"use strict";(self.webpackChunk_localrepo_postgraphile_website=self.webpackChunk_localrepo_postgraphile_website||[]).push([[9753],{30876:(e,t,n)=>{n.d(t,{Zo:()=>h,kt:()=>c});var a=n(2784);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},h=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,h=l(e,["components","mdxType","originalType","parentName"]),d=p(n),m=r,c=d["".concat(s,".").concat(m)]||d[m]||u[m]||i;return n?a.createElement(c,o(o({ref:t},h),{},{components:n})):a.createElement(c,o({ref:t},h))}));function c(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[d]="string"==typeof e?e:r,o[1]=l;for(var p=2;p<i;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},80255:(e,t,n)=>{n.d(t,{Z:()=>i});var a=n(74224),r=n(2784);function i(){return r.createElement(r.Fragment,null,r.createElement("span",{className:a.Z.proTag},r.createElement("a",{href:"/pricing/"},r.createElement("span",{className:a.Z.firstLetter},"P"),"ro")))}},50058:(e,t,n)=>{n.d(t,{Z:()=>i});var a=n(74224),r=n(2784);function i(){return r.createElement(r.Fragment,null,r.createElement("span",{className:a.Z.sponTag},r.createElement("a",{href:"/sponsor/"},r.createElement("span",{className:a.Z.firstLetter},"S"),"pon")))}},73864:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>h,contentTitle:()=>s,default:()=>c,frontMatter:()=>l,metadata:()=>p,toc:()=>d});var a=n(7896),r=(n(2784),n(30876)),i=n(80255),o=n(50058);const l={layout:"page",path:"/postgraphile/usage-library/",title:"PostGraphile as a Library",fullTitle:"Using PostGraphile as a Library"},s=void 0,p={unversionedId:"usage-library",id:"version-4.x/usage-library",title:"PostGraphile as a Library",description:"Library mode is the most popular way of running PostGraphile; it gives more",source:"@site/versioned_docs/version-4.x/usage-library.md",sourceDirName:".",slug:"/usage-library",permalink:"/postgraphile/current/usage-library",draft:!1,editUrl:"https://github.com/graphile/crystal/tree/main/postgraphile/website/versioned_docs/version-4.x/usage-library.md",tags:[],version:"4.x",frontMatter:{layout:"page",path:"/postgraphile/usage-library/",title:"PostGraphile as a Library",fullTitle:"Using PostGraphile as a Library"},sidebar:"docs",previous:{title:"Command Line Interface",permalink:"/postgraphile/current/usage-cli"},next:{title:"Usage - Schema Only",permalink:"/postgraphile/current/usage-schema"}},h={},d=[{value:"HTTP Middleware",id:"http-middleware",level:3},{value:"Route Handlers",id:"route-handlers",level:3},{value:"Recommended options",id:"recommended-options",level:3},{value:"For Development",id:"for-development",level:4},{value:"For Production",id:"for-production",level:4},{value:"API: <code>postgraphile(pgConfig, schemaName, options)</code>",id:"api-postgraphilepgconfig-schemaname-options",level:3},{value:"Exposing HTTP request data to PostgreSQL",id:"exposing-http-request-data-to-postgresql",level:3},{value:"<code>pgSettings</code> function",id:"pgsettings-function",level:4},{value:"Making HTTP data available to resolvers",id:"making-http-data-available-to-resolvers",level:3},{value:"<code>additionalGraphQLContextFromRequest</code> function",id:"additionalgraphqlcontextfromrequest-function",level:4},{value:"Mounting PostGraphile middleware under a subpath",id:"mounting-postgraphile-middleware-under-a-subpath",level:3},{value:"Composing PostGraphile middleware with other middleware",id:"composing-postgraphile-middleware-with-other-middleware",level:3},{value:"handleErrors",id:"handleerrors",level:3}],u={toc:d},m="wrapper";function c(e){let{components:t,...n}=e;return(0,r.kt)(m,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Library mode is the most popular way of running PostGraphile; it gives more\npower than using the CLI (see ",(0,r.kt)("a",{parentName:"p",href:"./usage-cli/"},"CLI usage"),"), but is much easier to\nsetup and more fully featured than ",(0,r.kt)("a",{parentName:"p",href:"./usage-schema/"},"Schema-only Usage"),"."),(0,r.kt)("p",null,"Details of\n",(0,r.kt)("a",{parentName:"p",href:"#api-postgraphilepgconfig-schemaname-options"},"the configuration options can be found below"),"."),(0,r.kt)("p",null,"PostGraphile supports usage in library mode within various Node server\nframeworks. There are two ways of using the PostGraphile library mode inside a\nserver framework: very concisely as middleware, or via the more verbose\nindividual route handlers introduced in PostGraphile v4.10.0. The below table\nsummarises the support of these modes by each of the frameworks we support, and\nthe following documentation sections detail how to use them."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Framework"),(0,r.kt)("th",{parentName:"tr",align:"center"},"\xa0","\xa0","\xa0","\xa0",(0,r.kt)("a",{parentName:"th",href:"#http-middleware"},"Middleware"),"\xa0","\xa0"),(0,r.kt)("th",{parentName:"tr",align:"center"},"\xa0","\xa0",(0,r.kt)("a",{parentName:"th",href:"#route-handlers"},"Route handlers"),"\xa0","\xa0","\xa0","\xa0"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Example"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"https://nodejs.org/api/http.html"},"Node HTTP")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Yes"),(0,r.kt)("td",{parentName:"tr",align:"center"},"-"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"https://github.com/graphile/postgraphile/blob/v4/examples/servers/node/index.ts"},"simple"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"http://koajs.com"},"Koa")),(0,r.kt)("td",{parentName:"tr",align:"center"},">=v4.10.0"),(0,r.kt)("td",{parentName:"tr",align:"center"},"Yes"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"https://github.com/graphile/postgraphile/blob/v4/examples/servers/koa/vanilla.ts"},"vanilla")," ","|"," ",(0,r.kt)("a",{parentName:"td",href:"https://github.com/graphile/postgraphile/blob/v4/examples/servers/koa/rum-and-raisin.ts"},"flavourful"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"https://www.npmjs.com/package/express"},"Express")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Yes"),(0,r.kt)("td",{parentName:"tr",align:"center"},"Yes"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"https://github.com/graphile/postgraphile/blob/v4/examples/servers/express/vanilla.ts"},"vanilla")," ","|"," ",(0,r.kt)("a",{parentName:"td",href:"https://github.com/graphile/postgraphile/blob/v4/examples/servers/express/rum-and-raisin.ts"},"flavourful"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"http://npmjs.com/connect"},"Connect")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Yes"),(0,r.kt)("td",{parentName:"tr",align:"center"},"Yes"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Similar to Express")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"https://www.fastify.io/"},"Fastify")," v2"),(0,r.kt)("td",{parentName:"tr",align:"center"},">=v4.10.0"),(0,r.kt)("td",{parentName:"tr",align:"center"},"Yes"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Similar to Express")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"https://www.fastify.io/"},"Fastify")," v3"),(0,r.kt)("td",{parentName:"tr",align:"center"},"-"),(0,r.kt)("td",{parentName:"tr",align:"center"},"Yes"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"https://github.com/graphile/postgraphile/blob/v4/examples/servers/fastify3/vanilla.ts"},"vanilla")," ","|"," ",(0,r.kt)("a",{parentName:"td",href:"https://github.com/graphile/postgraphile/blob/v4/examples/servers/fastify3/rum-and-raisin.ts"},"flavourful"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"http://restify.com/"},"Restify")),(0,r.kt)("td",{parentName:"tr",align:"center"},"-"),(0,r.kt)("td",{parentName:"tr",align:"center"},"Yes"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"https://github.com/graphile/postgraphile/blob/v4/examples/servers/restify/vanilla.ts"},"vanilla")," ","|"," ",(0,r.kt)("a",{parentName:"td",href:"https://github.com/graphile/postgraphile/blob/v4/examples/servers/restify/rum-and-raisin.ts"},"flavourful"))))),(0,r.kt)("h3",{id:"http-middleware"},"HTTP Middleware"),(0,r.kt)("p",null,"To mount a PostGraphile instance on your own web server there is an export\n",(0,r.kt)("inlineCode",{parentName:"p"},"postgraphile")," from the ",(0,r.kt)("inlineCode",{parentName:"p"},"postgraphile")," package that can be used as HTTP\nmiddleware for Node's HTTP server, Express, Connect, Koa and Fastify v2 (but not\nFastify v3). Usage is generally of the form ",(0,r.kt)("inlineCode",{parentName:"p"},"app.use(postgraphile(...))"),"."),(0,r.kt)("p",null,"Additional frameworks such as ",(0,r.kt)("a",{parentName:"p",href:"http://restify.com/"},"Restify")," and\n",(0,r.kt)("a",{parentName:"p",href:"https://www.fastify.io/"},"Fastify")," are also supported since PostGraphile v4.10.0\nvia the ",(0,r.kt)("a",{parentName:"p",href:"#route-handlers"},"route handlers")," method detailed below."),(0,r.kt)("p",null,"To use PostGraphile with ",(0,r.kt)("inlineCode",{parentName:"p"},"express"),", for instance, a small example would be:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'const express = require("express");\nconst { postgraphile } = require("postgraphile");\n\nconst app = express();\n\napp.use(\n  postgraphile(\n    process.env.DATABASE_URL || "postgres://user:pass@host:5432/dbname",\n    "public",\n    {\n      watchPg: true,\n      graphiql: true,\n      enhanceGraphiql: true,\n    },\n  ),\n);\n\napp.listen(process.env.PORT || 3000);\n')),(0,r.kt)("p",null,"Or to use it with the built-in ",(0,r.kt)("inlineCode",{parentName:"p"},"http")," module:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'const http = require("http");\nconst { postgraphile } = require("postgraphile");\n\nhttp\n  .createServer(\n    postgraphile(\n      process.env.DATABASE_URL || "postgres://user:pass@host:5432/dbname",\n      "public",\n      {\n        watchPg: true,\n        graphiql: true,\n        enhanceGraphiql: true,\n      },\n    ),\n  )\n  .listen(process.env.PORT || 3000);\n')),(0,r.kt)("h3",{id:"route-handlers"},"Route Handlers"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Introduced in PostGraphile v4.10.0.")),(0,r.kt)("p",null,"If your server does not support the preferred middleware approach of mounting\nthe PostGraphile library, then you can mount PostGraphile's route handlers\nindividually. This looks slightly different depending on which server you're\nusing (see the table above for links to examples for each server), but broadly\nit follows the following pattern (this example uses Fastify v3)."),(0,r.kt)("p",null,"First we create the PostGraphile middleware:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'import { postgraphile } from "postgraphile";\n\nconst middleware = postgraphile(process.env.DATABASE_URL, "public", {\n  /* ... options here ... */\n});\n')),(0,r.kt)("p",null,"And your server:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'import Fastify from "fastify";\n\nconst app = Fastify({});\n')),(0,r.kt)("p",null,"Next we need an adaptor to convert a generic PostGraphile route handler into a\nhandler that's suitable for your given server framework. We provide the\nfollowing out of the box:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"PostGraphileResponseNode")," - for Node, Express, Connect, Nest, Restify, and\nFastify v2 (NOT v3)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"PostGraphileResponseKoa")," - for Koa"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"PostGraphileResponseFastify3")," - for Fastify v3")),(0,r.kt)("p",null,"You can also make your own by sub-classing ",(0,r.kt)("inlineCode",{parentName:"p"},"PostGraphileResponse"),", for help with\nthis ping @Benjie ",(0,r.kt)("a",{parentName:"p",href:"https://discord.gg/YM5Q2SR"},"on Discord"),"."),(0,r.kt)("p",null,"Note that some frameworks expect you to indicate failure by rejecting a promise,\nothers expect you to pass an error object to the ",(0,r.kt)("inlineCode",{parentName:"p"},"next(err)")," callback.\nPostGraphile's handler rejects on error, so if your framework (e.g. Express)\nrequires ",(0,r.kt)("inlineCode",{parentName:"p"},"next(err)")," you should add ",(0,r.kt)("inlineCode",{parentName:"p"},".catch(next)")," to the handler call."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'import { PostGraphileResponseFastify3 } from "postgraphile";\n\n// Converts a PostGraphile handler to a Fastify v3 handler\nconst convertHandler = (handler) => (request, reply) =>\n  handler(new PostGraphileResponseFastify3(request, reply));\n\n/* Other frameworks:\n\n// Converts a PostGraphile handler to an Express handler\nconst convertHandler = handler => (req, res, next) =>\n  handler(new PostGraphileResponseNode(req, res, next)).catch(next);\n\n// Converts a PostGraphile handler to a Koa handler\nconst convertHandler = handler => (ctx, next) =>\n  handler(new PostGraphileResponseKoa(ctx, next));\n*/\n')),(0,r.kt)("p",null,"Then we use the properties present on the PostGraphile middleware to mount our\nroute handlers. The properties available include:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"options")," - the PostGraphile options your server is using"),(0,r.kt)("li",{parentName:"ul"},"route strings:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"graphqlRoute")," (e.g. ",(0,r.kt)("inlineCode",{parentName:"li"},"/graphql"),") - the URL path the GraphQL endpoint should\nbe mounted at"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"graphiqlRoute")," (e.g. ",(0,r.kt)("inlineCode",{parentName:"li"},"/graphiql"),") - the URL path the GraphiQL (GraphQL IDE)\nendpoint should be mounted at"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"eventStreamRoute")," (e.g. ",(0,r.kt)("inlineCode",{parentName:"li"},"/graphql/stream"),") - the URL path the EventStream\nfor PostGraphile watch mode should be mounted at (relates to the\nX-GraphQL-Event-Stream header)"))),(0,r.kt)("li",{parentName:"ul"},"request handlers",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"graphqlRouteHandler")," - handles GraphQL POST and OPTIONS requests"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"graphiqlRouteHandler")," - handles GET requests to retrieve the GraphiQL\ninterface"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"faviconRouteHandler")," - serves the PostGraphile favicon"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"eventStreamRouteHandler")," - serves the PostGraphile watch-mode event stream")))),(0,r.kt)("p",null,"For Fastify, this might look something like:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'// OPTIONS requests, for CORS/etc\napp.options(\n  middleware.graphqlRoute,\n  convertHandler(middleware.graphqlRouteHandler),\n);\n\n// This is the main middleware\napp.post(\n  middleware.graphqlRoute,\n  convertHandler(middleware.graphqlRouteHandler),\n);\n\n// GraphiQL, if you need it\nif (middleware.options.graphiql) {\n  if (middleware.graphiqlRouteHandler) {\n    app.head(\n      middleware.graphiqlRoute,\n      convertHandler(middleware.graphiqlRouteHandler),\n    );\n    app.get(\n      middleware.graphiqlRoute,\n      convertHandler(middleware.graphiqlRouteHandler),\n    );\n  }\n  // Remove this if you don\'t want the PostGraphile logo as your favicon!\n  if (middleware.faviconRouteHandler) {\n    app.get("/favicon.ico", convertHandler(middleware.faviconRouteHandler));\n  }\n}\n\n// If you need watch mode, this is the route served by the\n// X-GraphQL-Event-Stream header; see:\n// https://github.com/graphql/graphql-over-http/issues/48\nif (middleware.options.watchPg) {\n  if (middleware.eventStreamRouteHandler) {\n    app.options(\n      middleware.eventStreamRoute,\n      convertHandler(middleware.eventStreamRouteHandler),\n    );\n    app.get(\n      middleware.eventStreamRoute,\n      convertHandler(middleware.eventStreamRouteHandler),\n    );\n  }\n}\n')),(0,r.kt)("p",null,"For Nest, this might look something like:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'import { Controller, Get, Post, Req, Next, Res } from "@nestjs/common";\nimport { Request, Response } from "express";\nimport { PostGraphileResponseNode } from "postgraphile";\nimport { middleware } from "./postgraphile.middleware";\n\n@Controller("/")\nexport class PostGraphileController {\n  @Get(middleware.graphiqlRoute)\n  graphiql(@Req() request: Request, @Res() response: Response, @Next() next) {\n    middleware.graphiqlRouteHandler(\n      new PostGraphileResponseNode(request, response, next),\n    );\n  }\n\n  @Post(middleware.graphqlRoute)\n  graphql(@Req() request: Request, @Res() response: Response, @Next() next) {\n    middleware.graphqlRouteHandler(\n      new PostGraphileResponseNode(request, response, next),\n    );\n  }\n}\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"IMPORTANT"),": although it's tempting to add your handlers with explicitly\nwritten paths, e.g. ",(0,r.kt)("inlineCode",{parentName:"p"},"app.post('/graphql', ...)"),", it's better to use the relevant\nmiddleware properties such as ",(0,r.kt)("inlineCode",{parentName:"p"},"middleware.graphqlRoute")," to ensure that\nPostGraphile is expecting the GraphQL endpoint to be in the same place that\nyou're expecting."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"IMPORTANT"),": it's advised that you also look through the full-flavoured\n\"rum-and-raisin\" example server for your framework; depending on what other\nmiddleware/plugins you're using (e.g. compression) you may need to add some tiny\nworkarounds for common issues (most notably relating to the Event Stream from\nwatch mode)."),(0,r.kt)("h3",{id:"recommended-options"},"Recommended options"),(0,r.kt)("p",null,"As PostGraphile evolves, we add more features; however we can't always enable\nthese features by default as they may be breaking changes. There are also\noptions that may have security repurcussions. For this reason, many features are\nbehind flags. We understand this page is very long, so we've included some\ndefault option sets you might like to use:"),(0,r.kt)("p",null,"We recommend you install the ",(0,r.kt)("inlineCode",{parentName:"p"},"@graphile-contrib/pg-simplify-inflector")," plugin."),(0,r.kt)("h4",{id:"for-development"},"For Development"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'const postgraphileOptions = {\n  subscriptions: true,\n  watchPg: true,\n  dynamicJson: true,\n  setofFunctionsContainNulls: false,\n  ignoreRBAC: false,\n  showErrorStack: "json",\n  extendedErrors: ["hint", "detail", "errcode"],\n  appendPlugins: [require("@graphile-contrib/pg-simplify-inflector")],\n  exportGqlSchemaPath: "schema.graphql",\n  graphiql: true,\n  enhanceGraphiql: true,\n  allowExplain(req) {\n    // TODO: customise condition!\n    return true;\n  },\n  enableQueryBatching: true,\n  legacyRelations: "omit",\n  pgSettings(req) {\n    /* TODO */\n  },\n};\n')),(0,r.kt)("h4",{id:"for-production"},"For Production"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'const postgraphileOptions = {\n  subscriptions: true,\n  retryOnInitFail: true,\n  dynamicJson: true,\n  setofFunctionsContainNulls: false,\n  ignoreRBAC: false,\n  extendedErrors: ["errcode"],\n  appendPlugins: [require("@graphile-contrib/pg-simplify-inflector")],\n  graphiql: false,\n  enableQueryBatching: true,\n  disableQueryLog: true, // our default logging has performance issues, but do make sure you have a logging system in place!\n  legacyRelations: "omit",\n  pgSettings(req) {\n    /* TODO */\n  },\n};\n')),(0,r.kt)("h3",{id:"api-postgraphilepgconfig-schemaname-options"},"API: ",(0,r.kt)("inlineCode",{parentName:"h3"},"postgraphile(pgConfig, schemaName, options)")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"postgraphile")," middleware factory function takes three arguments, all of\nwhich are optional. The below options are valid\nfor ",(0,r.kt)("tt",null,(0,r.kt)("a",{parentName:"p",href:"mailto:postgraphile@4.12.3"},"postgraphile@4.12.3")),"."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"pgConfig")),": Specifies the PostgreSQL database you wish to connect to. You\nmay pass a PostgreSQL connection string, a configuration object to pass to the\n",(0,r.kt)("a",{parentName:"li",href:"https://node-postgres.com/api/pool"},(0,r.kt)("inlineCode",{parentName:"a"},"pg.Pool"))," constructor, or a ",(0,r.kt)("a",{parentName:"li",href:"https://node-postgres.com/api/pool"},(0,r.kt)("inlineCode",{parentName:"a"},"pg.Pool"))," instance. Note: ",(0,r.kt)("inlineCode",{parentName:"li"},"pg.Pool")," has a\ndefault pool size of 10, to increase this you use the configuration\nobject/pg.Pool instance approach and pass a different value as ",(0,r.kt)("inlineCode",{parentName:"li"},"max"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"schemaName")),": A string, or array of strings, which specifies the\nPostgreSQL schema(s) you to expose via PostGraphile; defaults to 'public'"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"options")),": An object containing other miscellaneous options. Options\ninclude:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"watchPg"),": When true, PostGraphile will update the GraphQL API whenever your\ndatabase schema changes. This feature requires some changes to your database\nin the form of the\n",(0,r.kt)("a",{parentName:"li",href:"https://github.com/graphile/graphile-engine/blob/master/packages/graphile-build-pg/res/watch-fixtures.sql"},(0,r.kt)("inlineCode",{parentName:"a"},"postgraphile_watch")),"\nschema; PostGraphile will try to add this itself but requires DB superuser\nprivileges to do so. If PostGraphile can't install it, you can do so\nmanually. PostGraphile will not drop the schema when it exits, to remove it\nyou can execute: ",(0,r.kt)("inlineCode",{parentName:"li"},"DROP SCHEMA postgraphile_watch CASCADE;")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"retryOnInitFail"),": When false (default), PostGraphile will exit if it fails\nto build the initial schema (for example if it cannot connect to the\ndatabase, or if there are fatal naming conflicts in the schema). When true,\nPostGraphile will keep trying to rebuild the schema indefinitely, using an\nexponential backoff between attempts, starting at 100ms and increasing up to\n30s delay between retries. When a function, the function will be called\npassing the error and the number of attempts, and it should return true to\nretry, false to permanently abort trying."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ownerConnectionString"),": Connection string to use to connect to the database\nas a privileged user (e.g. for setting up watch fixtures, logical decoding,\netc)."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"subscriptions"),": Enable GraphQL websocket transport support for\nsubscriptions (you still need a subscriptions plugin currently)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"live"),": ","[EXPERIMENTAL]"," Enables live-query support via GraphQL subscriptions\n(sends updated payload any time nested collections/records change)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"websockets"),": Choose which websocket transport libraries to use. Use commas\nto define multiple. Defaults to ",(0,r.kt)("inlineCode",{parentName:"li"},"['v0', 'v1']")," if ",(0,r.kt)("inlineCode",{parentName:"li"},"subscriptions")," or ",(0,r.kt)("inlineCode",{parentName:"li"},"live"),"\nare true, ",(0,r.kt)("inlineCode",{parentName:"li"},"[]")," otherwise"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"websocketOperations"),": Toggle which GraphQL websocket transport operations\nare supported: 'subscriptions' or 'all'. Defaults to ",(0,r.kt)("inlineCode",{parentName:"li"},"subscriptions")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"websocketMiddlewares"),": ","[EXPERIMENTAL]"," If you're using websockets\n(subscriptions || live) then you may want to authenticate your users using\nsessions or similar. You can pass some simple middlewares here that will be\nexecuted against the websocket connection in order to perform\nauthentication. We current only support Express (not Koa, Fastify, Restify,\netc) middlewares here."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"pgDefaultRole"),": The default Postgres role to use. If no role was provided\nin a provided JWT token, this role will be used."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"dynamicJson"),": By default, JSON and JSONB fields are presented as strings\n(JSON encoded) from the GraphQL schema. Setting this to ",(0,r.kt)("inlineCode",{parentName:"li"},"true")," (recommended)\nenables raw JSON input and output, saving the need to parse / stringify JSON\nmanually."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"setofFunctionsContainNulls"),": If none of your ",(0,r.kt)("inlineCode",{parentName:"li"},"RETURNS SETOF compound_type"),"\nfunctions mix NULLs with the results then you may set this false to reduce\nthe nullables in the GraphQL schema."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"classicIds"),": Enables classic ids for Relay support. Instead of using the\nfield name ",(0,r.kt)("inlineCode",{parentName:"li"},"nodeId")," for globally unique ids, PostGraphile will instead use\nthe field name ",(0,r.kt)("inlineCode",{parentName:"li"},"id")," for its globally unique ids. This means that table ",(0,r.kt)("inlineCode",{parentName:"li"},"id"),"\ncolumns will also get renamed to ",(0,r.kt)("inlineCode",{parentName:"li"},"rowId"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"disableDefaultMutations"),": Setting this to ",(0,r.kt)("inlineCode",{parentName:"li"},"true")," will prevent the creation\nof the default mutation types & fields. Database mutation will only be\npossible through Postgres functions."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ignoreRBAC"),": Set false (recommended) to exclude fields, queries and\nmutations that are not available to any possible user (determined from the\nuser in connection string and any role they can become); set this option\ntrue to skip these checks and create GraphQL fields and types for\neverything. The default is ",(0,r.kt)("inlineCode",{parentName:"li"},"true"),", in v5 the default will change to ",(0,r.kt)("inlineCode",{parentName:"li"},"false"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ignoreIndexes"),": Set false (recommended) to exclude filters, orderBy, and\nrelations that would be expensive to access due to missing indexes. Changing\nthis from true to false is a breaking change, but false to true is not, so\nwe recommend you start with it set to ",(0,r.kt)("inlineCode",{parentName:"li"},"false"),". The default is ",(0,r.kt)("inlineCode",{parentName:"li"},"true"),", in v5\nthe default may change to ",(0,r.kt)("inlineCode",{parentName:"li"},"false"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"includeExtensionResources"),": By default, tables and functions that come from\nextensions are excluded from the generated GraphQL schema as general\napplications don't need them to be exposed to the end user. You can use this\nflag to include them in the generated schema (not recommended)."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"showErrorStack"),": Enables adding a ",(0,r.kt)("inlineCode",{parentName:"li"},"stack")," field to the error response. Can\nbe either the boolean ",(0,r.kt)("inlineCode",{parentName:"li"},"true")," (which results in a single stack string) or the\nstring ",(0,r.kt)("inlineCode",{parentName:"li"},"json")," (which causes the stack to become an array with elements for\neach line of the stack). Recommended in development, not recommended in\nproduction."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"extendedErrors"),": Extends the error response with additional details from\nthe Postgres error. Can be any combination of\n",(0,r.kt)("inlineCode",{parentName:"li"},"['hint', 'detail', 'errcode']"),". Default is ",(0,r.kt)("inlineCode",{parentName:"li"},"[]"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"handleErrors"),": Enables ability to modify errors before sending them down to\nthe client. Optionally can send down custom responses. If you use this then\n",(0,r.kt)("inlineCode",{parentName:"li"},"showErrorStack")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"extendedError")," may have no effect."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"appendPlugins"),": An array of\n",(0,r.kt)("a",{parentName:"li",href:"https://graphile.org/graphile-build/plugins/"},"Graphile Engine")," schema\nplugins to load after the default plugins."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"prependPlugins"),": An array of\n",(0,r.kt)("a",{parentName:"li",href:"https://graphile.org/graphile-build/plugins/"},"Graphile Engine")," schema\nplugins to load before the default plugins (you probably don't want this)."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"replaceAllPlugins"),": The full array of\n",(0,r.kt)("a",{parentName:"li",href:"https://graphile.org/graphile-build/plugins/"},"Graphile Engine")," schema\nplugins to use for schema generation (you almost definitely don't want\nthis!)."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"skipPlugins"),": An array of\n",(0,r.kt)("a",{parentName:"li",href:"https://graphile.org/graphile-build/plugins/"},"Graphile Engine")," schema\nplugins to skip."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"readCache"),": A file path string or an object. Reads cached values to improve\nstartup time (you may want to do this in production)."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"writeCache"),": A file path string. Writes computed values to local cache file\nso startup can be faster (do this during the build phase)."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"exportJsonSchemaPath"),": Enables saving the detected schema, in JSON format,\nto the given location. The directories must exist already, if the file\nexists it will be overwritten."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"exportGqlSchemaPath"),": Enables saving the detected schema, in GraphQL schema\nformat, to the given location. The directories must exist already, if the\nfile exists it will be overwritten."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"sortExport"),": If true, lexicographically (alphabetically) sort exported\nschema for more stable diffing."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"graphqlRoute"),": The endpoint the GraphQL executer will listen on. Defaults\nto ",(0,r.kt)("inlineCode",{parentName:"li"},"/graphql"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"eventStreamRoute"),": The endpoint the watch-mode EventStream will be mounted\non (only appropriate when watchPg is specified). Defaults to\n",(0,r.kt)("inlineCode",{parentName:"li"},"${graphqlRoute}/stream"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"externalGraphqlRoute"),": The URL to the GraphQL endpoint for embedding into\nthe GraphiQL client. We attempt to infer this (for many servers it is the\nsame as ",(0,r.kt)("inlineCode",{parentName:"li"},"graphqlRoute"),"), but you may need to specify it manually if you\nmount PostGraphile behind a URL-rewriting proxy, or mount PostGraphile on a\nsubpath in certain Node.js servers."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"externalEventStreamRoute"),": As with ",(0,r.kt)("inlineCode",{parentName:"li"},"externalGraphqlRoute"),", but for\n",(0,r.kt)("inlineCode",{parentName:"li"},"eventStreamRoute")," rather than ",(0,r.kt)("inlineCode",{parentName:"li"},"graphqlRoute"),". This is also used for the\n",(0,r.kt)("inlineCode",{parentName:"li"},"X-GraphQL-Event-Stream")," header."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"graphiqlRoute"),": The endpoint the GraphiQL query interface will listen on\n(",(0,r.kt)("strong",{parentName:"li"},"NOTE:")," GraphiQL will not be enabled unless the ",(0,r.kt)("inlineCode",{parentName:"li"},"graphiql")," option is set\nto ",(0,r.kt)("inlineCode",{parentName:"li"},"true"),"). Defaults to ",(0,r.kt)("inlineCode",{parentName:"li"},"/graphiql"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"externalUrlBase"),": DEPRECATED - use ",(0,r.kt)("inlineCode",{parentName:"li"},"externalGraphqlRoute")," and\n",(0,r.kt)("inlineCode",{parentName:"li"},"externalEventStreamRoute")," instead. If you are using watch mode, or have\nenabled GraphiQL, and you either mount PostGraphile under a path, or use\nPostGraphile behind some kind of proxy that puts PostGraphile under a\nsubpath (or both!) then you must specify this setting so that PostGraphile\ncan figure out it's external URL. (e.g. if you do\n",(0,r.kt)("inlineCode",{parentName:"li"},"app.use('/path/to', postgraphile(...))"),"), which is not officially\nsupported, then you should pass ",(0,r.kt)("inlineCode",{parentName:"li"},"externalUrlBase: '/path/to'"),".) This setting\nshould never end in a slash (",(0,r.kt)("inlineCode",{parentName:"li"},"/"),"). To specify that the external URL is the\nexpected one, either omit this setting or set it to the empty string ",(0,r.kt)("inlineCode",{parentName:"li"},"''"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"graphiql"),": Set this to ",(0,r.kt)("inlineCode",{parentName:"li"},"true")," to enable the GraphiQL interface."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"graphiqlCredentials"),": Set this to change the way GraphiQL handles\ncredentials. By default this is set to ",(0,r.kt)("inlineCode",{parentName:"li"},"same-origin"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"enhanceGraphiql"),": Set this to ",(0,r.kt)("inlineCode",{parentName:"li"},"true")," to add some enhancements to GraphiQL;\nintended for development usage only (automatically enables with\n",(0,r.kt)("inlineCode",{parentName:"li"},"subscriptions")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"live"),")."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"enableCors"),": Enables some generous CORS settings for the GraphQL endpoint.\nThere are some costs associated when enabling this, if at all possible try\nto put your API behind a reverse proxy."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"bodySizeLimit"),": Set the maximum size of HTTP request bodies that can be\nparsed (default 100kB). The size can be given as a human-readable string,\nsuch as '200kB' or '5MB' (case insensitive)."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"enableQueryBatching"),": ","[Experimental]"," Enable the middleware to process\nmultiple GraphQL queries in one request."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"jwtSecret"),": The secret for your JSON web tokens. This will be used to\nverify tokens in the ",(0,r.kt)("inlineCode",{parentName:"li"},"Authorization")," header, and signing JWT tokens you\nreturn in procedures."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"jwtPublicKey"),": The public key to verify the JWT when signed with RS265 or\nES256 algorithms."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"jwtVerifyOptions"),": Options with which to perform JWT verification - see\n",(0,r.kt)("a",{parentName:"li",href:"https://github.com/auth0/node-jsonwebtoken#jwtverifytoken-secretorpublickey-options-callback"},"https://github.com/auth0/node-jsonwebtoken#jwtverifytoken-secretorpublickey-options-callback"),"\nIf 'audience' property is unspecified, it will default to ","['postgraphile']",";\nto prevent audience verification set it explicitly to null."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"jwtSignOptions"),": Options with which to perform JWT signing - see\n",(0,r.kt)("a",{parentName:"li",href:"https://github.com/auth0/node-jsonwebtoken#jwtsignpayload-secretorprivatekey-options-callback"},"https://github.com/auth0/node-jsonwebtoken#jwtsignpayload-secretorprivatekey-options-callback")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"jwtRole"),": An array of (strings) path components that make up the path in\nthe jwt from which to extract the postgres role. By default, the role is\nextracted from ",(0,r.kt)("inlineCode",{parentName:"li"},"token.role"),", so the default value is ",(0,r.kt)("inlineCode",{parentName:"li"},"['role']"),". e.g.\n",(0,r.kt)("inlineCode",{parentName:"li"},'{ iat: 123456789, creds: { local: { role: "my_role" } } }')," the path would\nbe ",(0,r.kt)("inlineCode",{parentName:"li"},"token.creds.local.role")," i.e. ",(0,r.kt)("inlineCode",{parentName:"li"},"['creds', 'local', 'role']")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"jwtPgTypeIdentifier"),": The Postgres type identifier for the compound type\nwhich will be signed as a JWT token if ever found as the return type of a\nprocedure. Can be of the form: ",(0,r.kt)("inlineCode",{parentName:"li"},"my_schema.my_type"),". You may use quotes as\nneeded: ",(0,r.kt)("inlineCode",{parentName:"li"},'"my-special-schema".my_type'),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"jwtAudiences"),": ","[DEPRECATED]"," The audience to use when verifing the JWT\ntoken. Deprecated, use ",(0,r.kt)("inlineCode",{parentName:"li"},"jwtVerifyOptions.audience")," instead."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"legacyRelations"),": Some one-to-one relations were previously detected as\none-to-many - should we export 'only' the old relation shapes, both new and\nold but mark the old ones as 'deprecated' (default), or 'omit' (recommended)\nthe old relation shapes entirely."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"legacyJsonUuid"),": ONLY use this option if you require the v3 typenames\n'Json' and 'Uuid' over 'JSON' and 'UUID'."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"disableQueryLog"),": Turns off GraphQL query logging. By default PostGraphile\nwill log every GraphQL query it processes along with some other information.\nSet this to ",(0,r.kt)("inlineCode",{parentName:"li"},"true")," (recommended in production) to disable that feature."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"pgSettings"),": A plain object specifying custom config values to set in the\nPostgreSQL transaction (accessed via ",(0,r.kt)("inlineCode",{parentName:"li"},"current_setting('my.custom.setting')"),")\n",(0,r.kt)("strong",{parentName:"li"},"or")," an (optionally asynchronous) function which will return the same (or\na Promise to the same) based on the incoming web request (e.g. to extract\nsession data)."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"allowExplain"),": ","[Experimental]"," Determines if the 'Explain' feature in\nGraphiQL can be used to show the user the SQL statements that were executed.\nSet to a boolean to enable all users to use this, or to a function that\nfilters each request to determine if the request may use Explain. DO NOT USE\nIN PRODUCTION unless you're comfortable with the security repurcussions of\ndoing so."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"additionalGraphQLContextFromRequest"),": Some Graphile Engine schema plugins\nmay need additional information available on the ",(0,r.kt)("inlineCode",{parentName:"li"},"context")," argument to the\nresolver - you can use this function to provide such information based on\nthe incoming request - you can even use this to change the response\n","[experimental]",", e.g. setting cookies."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"pluginHook"),": ","[experimental]"," Plugin hook function, enables functionality\nwithin PostGraphile to be expanded with plugins. Generate with\n",(0,r.kt)("inlineCode",{parentName:"li"},"makePluginHook(plugins)")," passing a list of plugin objects."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"simpleCollections"),': Should we use relay pagination, or simple collections?\n"omit" (default) - relay connections only, "only" (not recommended) - simple\ncollections only (no Relay connections), "both" - both.'),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"queryCacheMaxSize"),": Max query cache size in bytes (extremely approximate,\nnot accurate at all). Default ",(0,r.kt)("inlineCode",{parentName:"li"},"50000000")," (~50MB). Set to 0 to disable.")))),(0,r.kt)("p",null,"The following options are not part of PostGraphile core, but are available from\nthe ",(0,r.kt)("inlineCode",{parentName:"p"},"@graphile/pg-pubsub")," ",(0,r.kt)("a",{parentName:"p",href:"./subscriptions/"},"subscriptions plugin"),' (formerly the\npaid "supporter" plugin, but now fully free and open source - please consider\n',(0,r.kt)("a",{parentName:"p",href:"https://graphile.org/sponsor/"},"sponsoring us"),"!):"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"simpleSubscriptions"),": set this to ",(0,r.kt)("inlineCode",{parentName:"li"},"true")," to add simple subscription support"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"subscriptionAuthorizationFunction [fn]")," set this to the name (excluding\narguments/parentheses) of a PG function to call to check user is allowed to\nsubscribe")),(0,r.kt)("p",null,"The following options are not part of PostGraphile core, but are available from\nthe Pro plugin - see ",(0,r.kt)("a",{parentName:"p",href:"/pricing/"},"Go Pro!")," for more information."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"options")),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"readOnlyConnection")," ",(0,r.kt)(i.Z,{mdxType:"Pro"})," ",(0,r.kt)(o.Z,{mdxType:"Spon"})," \u26a1\ufe0f","[experimental]"," set this to a PostgreSQL\nconnection string to use for read-only queries (i.e. not mutations)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"defaultPaginationCap")," ",(0,r.kt)(i.Z,{mdxType:"Pro"})," ",(0,r.kt)(o.Z,{mdxType:"Spon"})," \u26a1\ufe0f","[experimental]"," integer, ensure all\nconnections have first/last specified and are no large than this value\n(default: 50), set to -1 to disable; override via smart comment\n",(0,r.kt)("inlineCode",{parentName:"li"},"@paginationCap 50")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"graphqlDepthLimit"),(0,r.kt)(i.Z,{mdxType:"Pro"})," ",(0,r.kt)(o.Z,{mdxType:"Spon"})," \u26a1\ufe0f","[experimental]"," integer, validate GraphQL\nqueries are no deeper than the specified int (default: 16), set to -1 to\ndisable"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"graphqlCostLimit")," ",(0,r.kt)(i.Z,{mdxType:"Pro"})," ",(0,r.kt)(o.Z,{mdxType:"Spon"})," \u26a1\ufe0f","[experimental]"," integer, only allows queries with\na computed cost below the specified int (default: 1000), set to -1 to\ndisable"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"exposeGraphQLCost")," ",(0,r.kt)(i.Z,{mdxType:"Pro"})," ",(0,r.kt)(o.Z,{mdxType:"Spon"})," boolean, if true (default) then the calculated\nquery cost will be exposed on the resulting payload")))),(0,r.kt)("h3",{id:"exposing-http-request-data-to-postgresql"},"Exposing HTTP request data to PostgreSQL"),(0,r.kt)("h4",{id:"pgsettings-function"},(0,r.kt)("inlineCode",{parentName:"h4"},"pgSettings")," function"),(0,r.kt)("p",null,"Using the ",(0,r.kt)("inlineCode",{parentName:"p"},"pgSettings")," functionality mentioned above you can extend the data\nmade available through ",(0,r.kt)("inlineCode",{parentName:"p"},"current_setting(...)")," within PostgreSQL. Instead of\npassing an object you can pass an (optionally asynchronous) function which will\nbe executed for each request, and the results merged in with the other settings\nPostGraphile automatically adds to the request."),(0,r.kt)("p",null,"For example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"export postgraphile(process.env.DATABASE_URL, schemaName, {\n  pgSettings: async req => ({\n    'user.id': `${req.session.passport.user}`,\n    'http.headers.x-something': `${req.headers['x-something']}`,\n    'http.method': `${req.method}`,\n    'http.url': `${req.url}`,\n    //...\n  }),\n})\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"create function get_x_something() returns text as $$\n  select current_setting('http.headers.x-something', true)::text;\n$$ language sql stable;\n")),(0,r.kt)("p",null,"Everything returned by ",(0,r.kt)("inlineCode",{parentName:"p"},"pgSettings")," is applied to the current session with\n",(0,r.kt)("inlineCode",{parentName:"p"},"set_config($key, $value, true)"),"; note that ",(0,r.kt)("inlineCode",{parentName:"p"},"set_config")," only supports string\nvalues so it is best to only feed ",(0,r.kt)("inlineCode",{parentName:"p"},"pgSettings")," string values (we'll convert\nother values using the ",(0,r.kt)("inlineCode",{parentName:"p"},"String")," constructor function, which may not have the\neffect you intend."),(0,r.kt)("p",null,"You can use ",(0,r.kt)("inlineCode",{parentName:"p"},"pgSettings")," to define variables that your Postgres\nfunctions/policies depend on, or to tweak internal Postgres settings. When\nadding variables for your own usage, the keys ",(0,r.kt)("strong",{parentName:"p"},"must")," contain either one or two\nperiod (",(0,r.kt)("inlineCode",{parentName:"p"},"."),") characters, and the prefix (the bit before the first period) must\nnot be used by any Postgres extension. Variables without periods will be\ninterpreted as internal Postgres settings, such as ",(0,r.kt)("inlineCode",{parentName:"p"},"role"),", and will be applied\nby Postgres. All settings are automatically reset when the transaction\ncompletes. Here's an example of switching the user into the Postgres 'visitor'\nrole, and applying the application setting ",(0,r.kt)("inlineCode",{parentName:"p"},"jwt.claims.user_id"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"export postgraphile(process.env.DATABASE_URL, schemaName, {\n  pgSettings: async req => ({\n    'role': 'visitor',\n    'jwt.claims.user_id': `${req.user.id}`,\n    //...\n  }),\n})\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE FUNCTION get_current_user() RETURNS TEXT AS $$\n  SELECT current_user;\n$$ LANGUAGE SQL STABLE;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"{\n  getCurrentUser # returns visitor\n}\n")),(0,r.kt)("h3",{id:"making-http-data-available-to-resolvers"},"Making HTTP data available to resolvers"),(0,r.kt)("h4",{id:"additionalgraphqlcontextfromrequest-function"},(0,r.kt)("inlineCode",{parentName:"h4"},"additionalGraphQLContextFromRequest")," function"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"additionalGraphQLContextFromRequest")," is an optionally asynchronous function\npassed the ",(0,r.kt)("inlineCode",{parentName:"p"},"req")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"res")," request and response objects from your HTTP library.\nThe result returned from the function is merged into the GraphQL ",(0,r.kt)("inlineCode",{parentName:"p"},"context"),"\nobject which is passed as the third argument to every GraphQL resolver."),(0,r.kt)("p",null,"If you're using Koa then you can get back to the Koa context using\n",(0,r.kt)("inlineCode",{parentName:"p"},"const ctx = req._koaCtx"),"."),(0,r.kt)("p",null,"Be careful to not clash with internal context keys such as ",(0,r.kt)("inlineCode",{parentName:"p"},"pgClient")," and\n",(0,r.kt)("inlineCode",{parentName:"p"},"jwtClaims"),". For the absolute best future compatibility, we recommend that you\nprefix your context keys with your initials or similar."),(0,r.kt)("p",null,"Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const postgraphileOptions = {\n  // ... other options here ...\n\n  async additionalGraphQLContextFromRequest(req, res) {\n    // You can perform asynchronous actions here if you need to; for example\n    // looking up the current user in the database.\n\n    // Return here things that your resolvers need\n    return {\n      // Return the current user from Passport.js or similar\n      user: req.user,\n\n      // Add a helper to get a header\n      getHeader(name) {\n        return req.get(name);\n      },\n\n      // Give access to the database-owner PostgreSQL pool, for example to\n      // perform privileged actions\n      rootPgPool,\n    };\n  },\n};\n")),(0,r.kt)("p",null,"It's ",(0,r.kt)("em",{parentName:"p"},"not")," a good idea to return direct access to the ",(0,r.kt)("inlineCode",{parentName:"p"},"req")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"res")," objects\nfrom ",(0,r.kt)("inlineCode",{parentName:"p"},"additionalGraphQLContextFromRequest(req, res)")," as it binds the context too\ntightly to the request lifecycle, and that's not compatible with local usage of\nthe schema, or with usage over other transports such as websockets for realtime.\nInstead, add helpers to get/set the data you need."),(0,r.kt)("h3",{id:"mounting-postgraphile-middleware-under-a-subpath"},"Mounting PostGraphile middleware under a subpath"),(0,r.kt)("p",null,"This isn't officially supported; however it should work in most cases. If you're\nmounting under a subpath in express then ",(0,r.kt)("inlineCode",{parentName:"p"},'app.use("/path/to", postgraphile())'),"\nshould work automatically without requiring any options. If you're using an\nexternal proxy then you must supply the base URL so that PostGraphile knows\nwhere to tell the browser the assets are located. This is all so that\nPostGraphile can reference different parts of itself correctly, such as the\nlocation for the watch stream to put in the header, or the GraphQL endpoint for\nGraphiQL to connect to."),(0,r.kt)("p",null,"A really complex use case of this would be this example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'// Assuming you combine both Express subpath AND an external\n// proxy which mounts your express app at `/myproxypath`, you\n// should provide options like this:\napp.use(\n  "/path/to",\n  postgraphile(db, schemas, {\n    externalUrlBase: "/myproxypath/path/to",\n    graphqlRoute: "/graphql",\n    graphiql: true,\n    graphiqlRoute: "/graphiql",\n  }),\n);\n// Then you can load GraphiQL at `/myproxypath/path/to/graphiql`\n// and it will know to connect to GraphQL at\n// `/myproxypath/path/to/graphql`\n')),(0,r.kt)("h3",{id:"composing-postgraphile-middleware-with-other-middleware"},"Composing PostGraphile middleware with other middleware"),(0,r.kt)("p",null,"Some use cases might require to mount other middleware before PostGraphile, for\ninstance if requests to the GraphQL endpoint should be subject to an additional\nauthorization / authentication mechanism."),(0,r.kt)("p",null,"With express, such a composition can be done like the following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'// Example middleware, does nothing\nfunction authMiddleware(req, res, next) {\n  //...\n  next();\n}\n// Mount middleware on the GraphQL endpoint\napp.use("/graphql", authMiddleware);\n// Mount PostGraphile after this middleware\napp.use(postgraphile(connectionString, schema, options));\n')),(0,r.kt)("p",null,"This example uses Express, but a similar approach is possible with other Node.js\nwebservers."),(0,r.kt)("h3",{id:"handleerrors"},"handleErrors"),(0,r.kt)("p",null,"Optionally you may specify a ",(0,r.kt)("inlineCode",{parentName:"p"},"handleErrors")," function as part of the PostGraphile\noptions. This function will be passed the list of errors that occurred during\nthe GraphQL operation (if any occurred) and must return this same list, or a\nlist that will be used to replace the errors."),(0,r.kt)("p",null,"In ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/graphql/graphql-js"},"GraphQL.js"),", all errors are wrapped\nin\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/graphql/graphql-js/blob/6bb002d74d32067540c0dc8401c977520fa1ed20/src/error/GraphQLError.js"},"a ",(0,r.kt)("inlineCode",{parentName:"a"},"GraphQLError")," object"),".\nYou can get to the original error that was thrown from a resolver via the\n",(0,r.kt)("inlineCode",{parentName:"p"},"originalError")," property on the GraphQLError, however some errors might be\nGraphQL query validation or other error types that don't have an\n",(0,r.kt)("inlineCode",{parentName:"p"},"originalError"),". Further some errors might be provided by PostGraphile itself\nrather than GraphQL, so might not be GraphQLError objects."),(0,r.kt)("p",null,"The original error could be thrown from any number of places (especially if\nyou're using plugins) but if it is thrown from PostgreSQL, then it might be a\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/brianc/node-postgres/blob/95b5daadaade40ea343c0d3ad09ab230fa2ade4c/packages/pg-protocol/src/messages.ts#L97-L117"},"pg DatabaseError error"),"."),(0,r.kt)("p",null,"Errors are detailed in\n",(0,r.kt)("a",{parentName:"p",href:"https://spec.graphql.org/June2018/#sec-Errors"},"the GraphQL Spec"),", so be sure\nthat the errors you return from ",(0,r.kt)("inlineCode",{parentName:"p"},"handleErrors")," conform to these rules."),(0,r.kt)("p",null,"You can find\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/graphile/starter/blob/d90cdc7560b01a2bc2847a72307383a36786a780/%40app/server/src/utils/handleErrors.ts"},"an example of ",(0,r.kt)("inlineCode",{parentName:"a"},"handleErrors")," in Graphile Starter"),"."))}c.isMDXComponent=!0},74224:(e,t,n)=>{n.d(t,{Z:()=>a});const a={contents:"contents_OrL_",content:"content_ilvp",row:"row_ARn8",header:"header_zTVt",footnote:"footnote_D0nB",footnoteText:"footnoteText_OEd0",note:"note_qBn0",small:"small_Gqq2",tagline:"tagline_Ld2x",tooltipped:"tooltipped_t_JO",tooltiptext:"tooltiptext_u7mD",proTag:"proTag_vRmB",sponTag:"sponTag_Nh0y",firstLetter:"firstLetter_NMLh"}}}]);