"use strict";(self.webpackChunk_localrepo_postgraphile_website=self.webpackChunk_localrepo_postgraphile_website||[]).push([[7848],{30876:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>d});var a=n(2784);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),m=p(n),h=o,d=m["".concat(l,".").concat(h)]||m[h]||c[h]||r;return n?a.createElement(d,s(s({ref:t},u),{},{components:n})):a.createElement(d,s({ref:t},u))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,s=new Array(r);s[0]=h;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[m]="string"==typeof e?e:o,s[1]=i;for(var p=2;p<r;p++)s[p]=n[p];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},73400:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>c,frontMatter:()=>r,metadata:()=>i,toc:()=>p});var a=n(7896),o=(n(2784),n(30876));const r={layout:"page",path:"/postgraphile/postgresql-schema-design/",title:"PostgreSQL schema design"},s=void 0,i={unversionedId:"postgresql-schema-design",id:"postgresql-schema-design",title:"PostgreSQL schema design",description:"The Postgres database is rich with features well beyond that of any other",source:"@site/postgraphile/postgresql-schema-design.md",sourceDirName:".",slug:"/postgresql-schema-design",permalink:"/postgraphile/next/postgresql-schema-design",draft:!1,editUrl:"https://github.com/graphile/crystal/tree/main/postgraphile/website/postgraphile/postgresql-schema-design.md",tags:[],version:"current",frontMatter:{layout:"page",path:"/postgraphile/postgresql-schema-design/",title:"PostgreSQL schema design"},sidebar:"docs",previous:{title:"Server plugins",permalink:"/postgraphile/next/plugins"},next:{title:"Evaluating",permalink:"/postgraphile/next/evaluating"}},l={},p=[{value:"Table of Contents",id:"table-of-contents",level:3},{value:"The Basics",id:"the-basics",level:3},{value:"Setting Up Your Schemas",id:"setting-up-your-schemas",level:4},{value:"The Person Table",id:"the-person-table",level:4},{value:"Table Documentation",id:"table-documentation",level:4},{value:"The Post Table",id:"the-post-table",level:4},{value:"Database Functions",id:"database-functions",level:3},{value:"Set Returning Functions",id:"set-returning-functions",level:4},{value:"Triggers",id:"triggers",level:4},{value:"Authentication and Authorization",id:"authentication-and-authorization",level:3},{value:"Storing Emails and Passwords",id:"storing-emails-and-passwords",level:4},{value:"Registering Users",id:"registering-users",level:4},{value:"Postgres Roles",id:"postgres-roles",level:4},{value:"JSON Web Tokens",id:"json-web-tokens",level:4},{value:"Logging In",id:"logging-in",level:4},{value:"Using the Authorized User",id:"using-the-authorized-user",level:4},{value:"Grants",id:"grants",level:4},{value:"Row Level Security",id:"row-level-security",level:4},{value:"Conclusion",id:"conclusion",level:3}],u={toc:p},m="wrapper";function c(e){let{components:t,...n}=e;return(0,o.kt)(m,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"The Postgres database is rich with features well beyond that of any other\ndatabase. However, most developers do not know the extent to which they can\nleverage the features in Postgres to completely express their application\nbusiness logic in the database."),(0,o.kt)("p",null,"Often developers may find themselves re-implementing authentication and\nauthorization in their apps, when Postgres comes with application level security\nfeatures out of the box. Or perhaps developers may rewrite basic insert\nfunctions with some extra app logic where that too may be handled in the\ndatabase."),(0,o.kt)("p",null,"This reimplementation of features that come with Postgres is not just an\ninefficient way to spend developer resources, but may also result in an\ninterface that is slower than if the logic was implemented in Postgres itself.\nPostGraphile aims to make developers more efficient and their APIs faster by\npackaging the repeatable work in one open source project that encourages\ncommunity contributions."),(0,o.kt)("p",null,"In this tutorial we will walk through the Postgres schema design for a forum\napplication with users who can login and write forum posts. While we will\ndiscuss how you can use the schema we create with PostGraphile, this article\nshould be useful for anyone designing a Postgres schema."),(0,o.kt)("p",null,"If you haven't installed PostGraphile already, you can follow our\n",(0,o.kt)("a",{parentName:"p",href:"./quick-start-guide/"},"Quick Start Guide")," to get PostGraphile up and running."),(0,o.kt)("h3",{id:"table-of-contents"},"Table of Contents"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#the-basics"},"The Basics"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#setting-up-your-schemas"},"Setting Up Your Schemas")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#the-person-table"},"The Person Table")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#table-documentation"},"Table Documentation")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#the-post-table"},"The Post Table")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#database-functions"},"Database Functions"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#set-returning-functions"},"Set Returning Functions")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#triggers"},"Triggers")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#authentication-and-authorization"},"Authentication and Authorization"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#storing-emails-and-passwords"},"Storing Emails and Passwords")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#registering-users"},"Registering Users")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#postgres-roles"},"Postgres Roles")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#json-web-tokens"},"JSON Web Tokens")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#logging-in"},"Logging In")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#using-the-authorized-user"},"Using the Authorized User")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#grants"},"Grants")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#row-level-security"},"Row Level Security")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#conclusion"},"Conclusion"))),(0,o.kt)("h3",{id:"the-basics"},"The Basics"),(0,o.kt)("h4",{id:"setting-up-your-schemas"},"Setting Up Your Schemas"),(0,o.kt)("p",null,"All of our database objects will go into one or two custom Postgres schemas. A\nschema is essentially a namespace, it allows you to create tables with the same\nname like ",(0,o.kt)("inlineCode",{parentName:"p"},"a.person")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"b.person"),"."),(0,o.kt)("p",null,"You can name your schema anything, we recommend naming your schema after your\napp. This way if you are working on multiple apps in the same database (this\nmight only realistically happen in development), you can easily query the\ndatabases of the different apps. We are going to create two schemas:\n",(0,o.kt)("inlineCode",{parentName:"p"},"forum_example"),", and ",(0,o.kt)("inlineCode",{parentName:"p"},"forum_example_private"),". To create these schemas we use the\n",(0,o.kt)("a",{parentName:"p",href:"https://www.postgresql.org/docs/current/static/sql-createschema.html"},(0,o.kt)("inlineCode",{parentName:"a"},"CREATE SCHEMA")),"\ncommand."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"create schema forum_example;\ncreate schema forum_example_private;\n")),(0,o.kt)("p",null,"You could create more or less schemas, it is all up to you and how you want to\nstructure your database. We decided to create two schemas. One of which,\n",(0,o.kt)("inlineCode",{parentName:"p"},"forum_example"),", is meant to hold data users can see, whereas\n",(0,o.kt)("inlineCode",{parentName:"p"},"forum_example_private")," will never be directly accessible to users."),(0,o.kt)("p",null,"Theoretically we want a user to be able to log in directly to our Postgres\ndatabase, and only be able to create, read, update, and delete data for their\nuser all within SQL. This is a mindshift from how we traditionally use a SQL\ndatabase. Normally, we assume whoever is querying the database has full\nvisibility into the system as the only one with database access is our\napplication. In this tutorial, we want to restrict access at the database level.\nDon\u2019t worry though! Postgres is very secure about this, users will have no more\npermissions than that which you explicitly grant."),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("strong",{parentName:"p"},"Note:")," When starting PostGraphile, you will want to use the name of the\nschema you created with the ",(0,o.kt)("inlineCode",{parentName:"p"},"--schema")," option, like so:\n",(0,o.kt)("inlineCode",{parentName:"p"},"postgraphile --schema forum_example"),". Also, don\u2019t forget to add the ",(0,o.kt)("inlineCode",{parentName:"p"},"--watch"),"\nflag, with watch mode enabled PostGraphile will update your API as we add\ntables and types throughout this tutorial.")),(0,o.kt)("h4",{id:"the-person-table"},"The Person Table"),(0,o.kt)("p",null,"Now we are going to create the tables in our database which will correspond to\nour users. We will do this by running the Postgres\n",(0,o.kt)("a",{parentName:"p",href:"https://www.postgresql.org/docs/current/static/sql-createtable.html"},(0,o.kt)("inlineCode",{parentName:"a"},"CREATE TABLE")),"\ncommand. Here is the definition for our person table:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"create table forum_example.person (\n  id               serial primary key,\n  first_name       text not null check (char_length(first_name) < 80),\n  last_name        text check (char_length(last_name) < 80),\n  about            text,\n  created_at       timestamp default now()\n);\n")),(0,o.kt)("p",null,"Now we have created a table with ",(0,o.kt)("inlineCode",{parentName:"p"},"id"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"first_name"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"last_name"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"about"),", and\n",(0,o.kt)("inlineCode",{parentName:"p"},"created_at")," columns (we will add an ",(0,o.kt)("inlineCode",{parentName:"p"},"updated_at")," column later). Let\u2019s break\ndown exactly what each line in this command does, we will only do this once. If\nyou already understand, you can skip ahead."),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("inlineCode",{parentName:"li"},"create table forum_example.person"),": This tells Postgres that we are\ncreating a table in the ",(0,o.kt)("inlineCode",{parentName:"li"},"forum_example")," schema named ",(0,o.kt)("inlineCode",{parentName:"li"},"person"),". This table\nwill represent all of our forum\u2019s users."),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("inlineCode",{parentName:"li"},"id serial primary key"),": This line establishes an auto-incrementing id field\nwhich is always guaranteed to be unique. The first person we create will\nhave an id of 1, the second user will have an id of 2, and so on. The\n",(0,o.kt)("inlineCode",{parentName:"li"},"primary key")," bit is also very important. PostGraphile will use the\n",(0,o.kt)("inlineCode",{parentName:"li"},"primary key")," of a table in many places to uniquely identify an object,\nincluding the globally unique id field."),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("inlineCode",{parentName:"li"},"first_name text not null check (char_length(first_name) < 80)"),": We want all\nof our users to enter their first name and last name separately, so this\ncolumn definition will create a column named ",(0,o.kt)("inlineCode",{parentName:"li"},"first_name"),", of type ",(0,o.kt)("inlineCode",{parentName:"li"},"text"),",\nthat is required (",(0,o.kt)("inlineCode",{parentName:"li"},"not null"),"), and that must be less than 80 characters long\n(",(0,o.kt)("inlineCode",{parentName:"li"},"check (char_length(first_name) < 80)"),").\n",(0,o.kt)("a",{parentName:"li",href:"https://www.postgresql.org/docs/current/static/ddl-constraints.html"},"Check constraints"),"\nare a very powerful feature in Postgres for data validation."),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("inlineCode",{parentName:"li"},"last_name text check (char_length(last_name) < 80)"),": This is very similar\nto our column definition for ",(0,o.kt)("inlineCode",{parentName:"li"},"first_name"),", except it is missing ",(0,o.kt)("inlineCode",{parentName:"li"},"not null"),".\nThis means that unlike the ",(0,o.kt)("inlineCode",{parentName:"li"},"first_name")," column, ",(0,o.kt)("inlineCode",{parentName:"li"},"last_name")," is not required."),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("inlineCode",{parentName:"li"},"about text"),": We want users to be able to express themselves! So they get to\nwrite a mini forum post which will go on their profile page."),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("inlineCode",{parentName:"li"},"created_at timestamp default now()"),": This final column definition will\nprovide us with some extra meta-information about their user. If not\nspecified explicitly, the ",(0,o.kt)("inlineCode",{parentName:"li"},"created_at")," timestamp will default to the time\nthe row was inserted.")),(0,o.kt)("p",null,"And that\u2019s our person table! Pretty simple, right?"),(0,o.kt)("p",null,"The syntax and features of the Postgres\n",(0,o.kt)("a",{parentName:"p",href:"https://www.postgresql.org/docs/current/static/sql-createtable.html"},(0,o.kt)("inlineCode",{parentName:"a"},"CREATE TABLE")),"\ncommand are fairly easy to learn and understand. Creating tables is the easiest,\nbut also the most fundamental part of your schema design."),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("strong",{parentName:"p"},"Note:")," We prefer singular identifers like ",(0,o.kt)("inlineCode",{parentName:"p"},"forum_example.person")," over\n",(0,o.kt)("inlineCode",{parentName:"p"},"forum_example.people")," because when you create a table, it is like you are\ncreating a class in an object-oriented language. Classes have singular names\nlike \u201cPerson\u201d while collections will often have plural names like \u201cPeople.\u201d\nTable as a class is a better analogy than table as a collection because\nPostgres itself will internally call tables \u201cclasses.\u201d")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("strong",{parentName:"p"},"Note:")," In case you don\u2019t like serial id of our table above, an alternative\nto the ",(0,o.kt)("inlineCode",{parentName:"p"},"serial")," primary key is UUIDs. To use UUIDs you would just need to add\nthe popular UUID extension, ",(0,o.kt)("inlineCode",{parentName:"p"},"uuid-ossp"),", in your database setup, and specify a\ndefault in your table creation. Like so:"),(0,o.kt)("pre",{parentName:"blockquote"},(0,o.kt)("code",{parentName:"pre",className:"language-sql"},'create extension if not exists "uuid-ossp";\n\ncreate table forum_example.person (\n  id uuid primary key default uuid_generate_v1mc(),\n  ...\n);\n')),(0,o.kt)("p",{parentName:"blockquote"},"Alternatively you could use fully random UUIDs:"),(0,o.kt)("pre",{parentName:"blockquote"},(0,o.kt)("code",{parentName:"pre",className:"language-sql"},'create extension if not exists "pgcrypto";\n\ncreate table forum_example.person (\n  id uuid primary key default gen_random_uuid(),\n  ...\n);\n')),(0,o.kt)("p",{parentName:"blockquote"},"There are pros and cons to both approaches, choose what works best for your\napplication!")),(0,o.kt)("h4",{id:"table-documentation"},"Table Documentation"),(0,o.kt)("p",null,"Now that we have created our table, we want to document it within the Postgres\ndatabase. By adding comments to our table and its columns using the Postgres\n",(0,o.kt)("a",{parentName:"p",href:"https://www.postgresql.org/docs/current/static/sql-comment.html"},(0,o.kt)("inlineCode",{parentName:"a"},"COMMENT")),"\ncommand, we will allow tools like PostGraphile to display rich domain specific\ndocumentation."),(0,o.kt)("p",null,"To add comments, just see the SQL below:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"comment on table forum_example.person is 'A user of the forum.';\ncomment on column forum_example.person.id is 'The primary unique identifier for the person.';\ncomment on column forum_example.person.first_name is 'The person\u2019s first name.';\ncomment on column forum_example.person.last_name is 'The person\u2019s last name.';\ncomment on column forum_example.person.about is 'A short description about the user, written by the user.';\ncomment on column forum_example.person.created_at is 'The time this person was created.';\n")),(0,o.kt)("p",null,"Incredibly simple, yet also incredibly powerful."),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("strong",{parentName:"p"},"Note:")," Feel free to write your comments in Markdown! Most tools, including\nGraphiQL which PostGraphile uses, will render your comments with the\nappropriate styles.")),(0,o.kt)("p",null,"With this we have completed our person table, now let\u2019s create a table for our\nforum posts."),(0,o.kt)("h4",{id:"the-post-table"},"The Post Table"),(0,o.kt)("p",null,"The users of our forum will want to be able to create posts. That\u2019s the entire\nreason we have a forum after all. To create the post table we go through a very\nsimilar process as creating our ",(0,o.kt)("inlineCode",{parentName:"p"},"forum_example.person")," table, but first we want\nto create a type we will use in one of the columns. See the SQL below:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"create type forum_example.post_topic as enum (\n  'discussion',\n  'inspiration',\n  'help',\n  'showcase'\n);\n")),(0,o.kt)("p",null,"The Postgres\n",(0,o.kt)("a",{parentName:"p",href:"https://www.postgresql.org/docs/current/static/sql-createtype.html"},(0,o.kt)("inlineCode",{parentName:"a"},"CREATE TYPE")),"\ncommand will let you create a custom type in your database which will allow you\nto do some really cool things. You can create a\n",(0,o.kt)("a",{parentName:"p",href:"https://www.postgresql.org/docs/current/static/rowtypes.html"},"composite type"),"\nwhich is basically a typed object in GraphQL terms, you can create a\n",(0,o.kt)("a",{parentName:"p",href:"https://www.postgresql.org/docs/current/static/rangetypes.html"},"range type"),"\nwhich represents exactly what you might think, or you can create an\n",(0,o.kt)("a",{parentName:"p",href:"https://www.postgresql.org/docs/current/static/datatype-enum.html"},"enum type"),"\nwhich is what we did here."),(0,o.kt)("p",null,"Enum types are a static set of values, you ",(0,o.kt)("em",{parentName:"p"},"must")," use one of the string values\nthat make up the enum in any column of the enum\u2019s type. Having this type is\nuseful for us, because we want our forum posts to have one, or none, topics so\nuser\u2019s may easily see what a post is about."),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("strong",{parentName:"p"},"Note:")," PostGraphile implements custom handling for user-defined types. An\nenum type like that defined above will be turned into a GraphQL enum that\nlooks like:"),(0,o.kt)("pre",{parentName:"blockquote"},(0,o.kt)("code",{parentName:"pre",className:"language-graphql"},"enum PostTopic {\n  DISCUSSION\n  INSPIRATION\n  HELP\n  SHOWCASE\n}\n")),(0,o.kt)("p",{parentName:"blockquote"},"You can also create custom composite types which will turn into GraphQL object\ntypes with PostGraphile."),(0,o.kt)("pre",{parentName:"blockquote"},(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"create type my_schema.my_type as (\n  foo integer,\n  bar integer\n);\n")),(0,o.kt)("p",{parentName:"blockquote"},"Would become the following GraphQL type:"),(0,o.kt)("pre",{parentName:"blockquote"},(0,o.kt)("code",{parentName:"pre",className:"language-graphql"},"type MyType {\n  foo: Int\n  bar: Int\n}\n"))),(0,o.kt)("p",null,"Now it is time to actually create our post table:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"create table forum_example.post (\n  id               serial primary key,\n  author_id        integer not null references forum_example.person(id),\n  headline         text not null check (char_length(headline) < 280),\n  body             text,\n  topic            forum_example.post_topic,\n  created_at       timestamp default now()\n);\n\ncomment on table forum_example.post is 'A forum post written by a user.';\ncomment on column forum_example.post.id is 'The primary key for the post.';\ncomment on column forum_example.post.headline is 'The title written by the user.';\ncomment on column forum_example.post.author_id is 'The id of the author user.';\ncomment on column forum_example.post.topic is 'The topic this has been posted in.';\ncomment on column forum_example.post.body is 'The main body text of our post.';\ncomment on column forum_example.post.created_at is 'The time this post was created.';\n")),(0,o.kt)("p",null,"Pretty basic. Our ",(0,o.kt)("inlineCode",{parentName:"p"},"headline")," is twice as long as a tweet, and to use our\n",(0,o.kt)("inlineCode",{parentName:"p"},"forum_example.post_topic")," type we wrote it as the column type just as we may\nwrite ",(0,o.kt)("inlineCode",{parentName:"p"},"integer")," as the column type. We also made sure to include comments."),(0,o.kt)("p",null,"Now that we have gone over the basics, let\u2019s explore Postgres functions and see\nhow we can use them to extend the functionality of our database."),(0,o.kt)("h3",{id:"database-functions"},"Database Functions"),(0,o.kt)("p",null,"The Postgres\n",(0,o.kt)("a",{parentName:"p",href:"https://www.postgresql.org/docs/current/static/sql-createfunction.html"},(0,o.kt)("inlineCode",{parentName:"a"},"CREATE FUNCTION")),"\ncommand is truly amazing. It allows us to write functions for our database in\nSQL, and other languages including JavaScript and Ruby!"),(0,o.kt)("p",null,"The following is a basic Postgres function:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"create function add(a int, b int) returns int as $$\n select a + b\n$$ language sql stable;\n")),(0,o.kt)("p",null,"Note the form. The double dollar signs (",(0,o.kt)("inlineCode",{parentName:"p"},"$$"),") open and close the function, and\nat the very end we have ",(0,o.kt)("inlineCode",{parentName:"p"},"language sql stable"),". ",(0,o.kt)("inlineCode",{parentName:"p"},"language sql")," means that the\nfunction is written in SQL, pretty obvious. If you wrote your function in Ruby\nit may be ",(0,o.kt)("inlineCode",{parentName:"p"},"language plruby"),". The next word, ",(0,o.kt)("inlineCode",{parentName:"p"},"stable"),", means that this function\n",(0,o.kt)("em",{parentName:"p"},"does not")," mutate the database. By default Postgres assumes all functions will\nmutate the database, you must mark your function with ",(0,o.kt)("inlineCode",{parentName:"p"},"stable")," for Postgres, and\nPostGraphile, to know your function is a query and not a mutation."),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("strong",{parentName:"p"},"Note:")," If you are interested in running JavaScript or Ruby in Postgres,\ncheck out ",(0,o.kt)("a",{parentName:"p",href:"https://blog.heroku.com/javascript_in_your_postgres"},"PL/V8")," and\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/knu/postgresql-plruby"},"PL/ruby")," respectively. It is\nrecommended that you use SQL and PL/pgSQL (which comes native with Postgres)\nwhenever you can (even if they are a pain). There is plenty of documentation\nand StackOverflow answers on both SQL and PL/pgSQL. However, there are\nalternatives if you so choose.")),(0,o.kt)("p",null,"That function above isn\u2019t so useful for us in our schema, so let\u2019s write some\nfunctions which will be useful. We will define three."),(0,o.kt)("p",null,"First, a function which will concatenate the users first and last name to return\ntheir full name:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"create function forum_example.person_full_name(person forum_example.person) returns text as $$\n  select person.first_name || ' ' || person.last_name\n$$ language sql stable;\n\ncomment on function forum_example.person_full_name(forum_example.person) is 'A person\u2019s full name which is a concatenation of their first and last name.';\n")),(0,o.kt)("p",null,"Second, a function which will get a summary of a forum post:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"create function forum_example.post_summary(\n  post forum_example.post,\n  length int default 50,\n  omission text default '\u2026'\n) returns text as $$\n  select case\n    when post.body is null then null\n    else substr(post.body, 0, length) || omission\n  end\n$$ language sql stable;\n\ncomment on function forum_example.post_summary(forum_example.post, int, text) is 'A truncated version of the body for summaries.';\n")),(0,o.kt)("p",null,"Third, a function that will get a person\u2019s most recent forum post."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"create function forum_example.person_latest_post(person forum_example.person) returns forum_example.post as $$\n  select post.*\n  from forum_example.post as post\n  where post.author_id = person.id\n  order by created_at desc\n  limit 1\n$$ language sql stable;\n\ncomment on function forum_example.person_latest_post(forum_example.person) is 'Get\u2019s the latest post written by the person.';\n")),(0,o.kt)("p",null,"Don\u2019t get too stuck on the function implementations. It is fairly easy to\ndiscover how to express what you want in SQL through a quick search of the\nPostgres documentation (which is excellent!). These functions are here to give\nyou some examples of what functions in Postgres look like. Also note how we\nadded comments to our functions with the\n",(0,o.kt)("a",{parentName:"p",href:"https://www.postgresql.org/docs/current/static/sql-comment.html"},(0,o.kt)("inlineCode",{parentName:"a"},"COMMENT")),"\ncommand, just like we add comments to our tables."),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("strong",{parentName:"p"},"Note:")," Any function which meets the following conditions will be treated as\na computed field by PostGraphile:"),(0,o.kt)("ol",{parentName:"blockquote"},(0,o.kt)("li",{parentName:"ol"},"The function has a table row as the first argument."),(0,o.kt)("li",{parentName:"ol"},"The function is in the same schema as the table of the first argument."),(0,o.kt)("li",{parentName:"ol"},"The function\u2019s name is prefixed by the table\u2019s name."),(0,o.kt)("li",{parentName:"ol"},"The function is marked as ",(0,o.kt)("inlineCode",{parentName:"li"},"stable")," or ",(0,o.kt)("inlineCode",{parentName:"li"},"immutable")," which makes it a query\nand not a mutation.")),(0,o.kt)("p",{parentName:"blockquote"},"All three of the above functions meet these conditions and as such will be\ncomputed fields. In GraphQL this ends up looking like:"),(0,o.kt)("pre",{parentName:"blockquote"},(0,o.kt)("code",{parentName:"pre",className:"language-graphql"},"type Person {\n  id: Int!\n  firstName: String!\n  lastName: String\n  ...\n  fullName: String\n  latestPost: Post\n}\n"))),(0,o.kt)("h4",{id:"set-returning-functions"},"Set Returning Functions"),(0,o.kt)("p",null,"Sometimes it is useful to not just return single values from your function, but\nperhaps entire tables. What returning a table from a function could mean is you\ncould define a custom ordering, hide rows that were archived, or return a user\u2019s\nactivity feed perhaps. In our case, this Postgres feature makes it easy for us\nto implement search:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"create function forum_example.search_posts(search text) returns setof forum_example.post as $$\n  select post.*\n  from forum_example.post as post\n  where position(search in post.headline) > 0 or position(search in post.body) > 0\n$$ language sql stable;\n\ncomment on function forum_example.search_posts(text) is 'Returns posts containing a given search term.';\n")),(0,o.kt)("p",null,"The difference with this function and the ones before is the return signature\nreads ",(0,o.kt)("inlineCode",{parentName:"p"},"returns setof forum_example.post"),". This function will therefore return\nall of the posts that match our search condition and not just one."),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("strong",{parentName:"p"},"Note:")," PostGraphile will treat set returning functions as connections. This\nis what makes them so powerful for PostGraphile users. The function above\nwould be queryable like so:"),(0,o.kt)("pre",{parentName:"blockquote"},(0,o.kt)("code",{parentName:"pre",className:"language-graphql"},'{\n  searchPosts(search: "Hello, world!", first: 5) {\n    edges {\n      cursor\n      node {\n        headline\n        body\n      }\n    }\n  }\n}\n'))),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("strong",{parentName:"p"},"Note:")," Postgres has awesome text searching capabilities - if you want high\nquality full text searching you don\u2019t need to look outside Postgres. Instead\nlook into the Postgres\n",(0,o.kt)("a",{parentName:"p",href:"https://www.postgresql.org/docs/current/static/textsearch.html"},"Full Text Search"),"\nfunctionality. It is a great feature, but a bit much for our simple example,\nso we just used a simple string position function instead.")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("strong",{parentName:"p"},"Note:")," Returning an array (",(0,o.kt)("inlineCode",{parentName:"p"},"returns post[]"),"), and returning a set\n(",(0,o.kt)("inlineCode",{parentName:"p"},"returns setof post"),") are two very different things. When you return an\narray, every single value in the array will always be returned. However, when\nyou return a set it is like returning a table. Users can paginate through a\nset using ",(0,o.kt)("inlineCode",{parentName:"p"},"limit")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"offset"),", but not an array.")),(0,o.kt)("h4",{id:"triggers"},"Triggers"),(0,o.kt)("p",null,"You can also use Postgres functions to define triggers. Triggers in Postgres\nallow you to hook into events that are happening on your tables such as inserts,\nupdates, or deletes. You define your triggers with the\n",(0,o.kt)("a",{parentName:"p",href:"https://www.postgresql.org/docs/current/static/sql-createtrigger.html"},(0,o.kt)("inlineCode",{parentName:"a"},"CREATE TRIGGER")),"\ncommand, and all trigger functions must return the special type ",(0,o.kt)("inlineCode",{parentName:"p"},"trigger"),"."),(0,o.kt)("p",null,"To demonstrate how triggers work, we will define a trigger that sets an\n",(0,o.kt)("inlineCode",{parentName:"p"},"updated_at")," column on our ",(0,o.kt)("inlineCode",{parentName:"p"},"forum_example.person")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"forum_example.post"),"\ntables whenever a row is updated. Before we can write the trigger, we need to\nmake sure ",(0,o.kt)("inlineCode",{parentName:"p"},"forum_example.person")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"forum_example.post")," have an ",(0,o.kt)("inlineCode",{parentName:"p"},"updated_at"),"\ncolumn! To do this we will use the\n",(0,o.kt)("a",{parentName:"p",href:"https://www.postgresql.org/docs/current/static/sql-altertable.html"},(0,o.kt)("inlineCode",{parentName:"a"},"ALTER TABLE")),"\ncommand."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"alter table forum_example.person add column updated_at timestamp default now();\nalter table forum_example.post add column updated_at timestamp default now();\n")),(0,o.kt)("p",null,"Our ",(0,o.kt)("inlineCode",{parentName:"p"},"updated_at")," column has now been added to our tables and looks exactly like\nour ",(0,o.kt)("inlineCode",{parentName:"p"},"created_at")," column. It\u2019s a timestamp which defaults to the time the row was\ncreated. Next, let us define our triggers:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"create function forum_example_private.set_updated_at() returns trigger as $$\nbegin\n  new.updated_at := current_timestamp;\n  return new;\nend;\n$$ language plpgsql;\n\ncreate trigger person_updated_at before update\n  on forum_example.person\n  for each row\n  execute procedure forum_example_private.set_updated_at();\n\ncreate trigger post_updated_at before update\n  on forum_example.post\n  for each row\n  execute procedure forum_example_private.set_updated_at();\n")),(0,o.kt)("p",null,"To define our trigger we ran three commands. First we created a function named\n",(0,o.kt)("inlineCode",{parentName:"p"},"set_updated_at")," in our ",(0,o.kt)("inlineCode",{parentName:"p"},"forum_example_private")," schema because we want no one to\ndirectly call this function as it is simply a utility.\n",(0,o.kt)("inlineCode",{parentName:"p"},"forum_example_private.set_updated_at")," also returns a ",(0,o.kt)("inlineCode",{parentName:"p"},"trigger")," and is\nimplemented in\n",(0,o.kt)("a",{parentName:"p",href:"https://www.postgresql.org/docs/current/static/plpgsql.html"},"PL/pgSQL"),"."),(0,o.kt)("p",null,"After we define our ",(0,o.kt)("inlineCode",{parentName:"p"},"forum_example_private.set_updated_at")," function, we can use\nit in the triggers we create with the\n",(0,o.kt)("a",{parentName:"p",href:"https://www.postgresql.org/docs/current/static/sql-createtrigger.html"},(0,o.kt)("inlineCode",{parentName:"a"},"CREATE TRIGGER")),"\ncommand. The triggers will run before a row is updated by the\n",(0,o.kt)("a",{parentName:"p",href:"https://www.postgresql.org/docs/current/static/sql-update.html"},(0,o.kt)("inlineCode",{parentName:"a"},"UPDATE")),"\ncommand and will execute the function on every row being updated."),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("strong",{parentName:"p"},"Note:")," If you find yourself wanting to do CPU intensive work in triggers,\ninstead consider using Postgres\u2019 pub/sub functionality\n(",(0,o.kt)("a",{parentName:"p",href:"https://www.postgresql.org/docs/current/static/sql-listen.html"},(0,o.kt)("inlineCode",{parentName:"a"},"LISTEN"))," /\n",(0,o.kt)("a",{parentName:"p",href:"https://www.postgresql.org/docs/current/static/sql-notify.html"},(0,o.kt)("inlineCode",{parentName:"a"},"NOTIFY")),') to\nsend the work to a "worker service" to be executed asynchronously.\n',(0,o.kt)("a",{parentName:"p",href:"https://github.com/graphile/worker"},"Graphile Worker"),' uses this pattern in a\nfail-safe way; allowing you to run jobs "in the background" so that your HTTP\nresponse/application code is not held up. We recommend using Graphile Worker\nwith any Node.js based PostgreSQL database that needs to queue actions such as\nsending emails, push notifications, generating PDF reports and other such\nasynchronous tasks.')),(0,o.kt)("hr",null),(0,o.kt)("p",null,"That\u2019s about it as far as Postgres functions go! They are a fun, interesting,\nand useful topic to understand when it comes to good Postgres schema design.\nAlways remember, the Postgres documentation is your best friend as you try to\nwrite your own functions. Some important documentation articles we mentioned for\nyour reference are as follows:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://www.postgresql.org/docs/current/static/sql-createfunction.html"},(0,o.kt)("inlineCode",{parentName:"a"},"CREATE FUNCTION"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://www.postgresql.org/docs/current/static/sql-createtrigger.html"},(0,o.kt)("inlineCode",{parentName:"a"},"CREATE TRIGGER"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://www.postgresql.org/docs/current/static/plpgsql.html"},(0,o.kt)("inlineCode",{parentName:"a"},"PL/pgSQL")))),(0,o.kt)("p",null,"Next up, we are going to learn about auth in Postgres and PostGraphile!"),(0,o.kt)("h3",{id:"authentication-and-authorization"},"Authentication and Authorization"),(0,o.kt)("p",null,"Authentication and authorization is incredibly important whenever you build an\napplication. You want your users to be able to login and out of your service,\nand only edit the content your platform has given them permission to edit.\nPostgres already has great support for authentication and authorization using a\nsecure role based system, so PostGraphile just bridges the gap between the\nPostgres role mechanisms and HTTP based authorization."),(0,o.kt)("p",null,"However, before we can dive into implementing authentication, we are missing\nsome pretty important data in our schema. How are users supposed to even login?\nNot by guessing their first and last name one would hope, so we will define\nanother table which will store user emails and passwords."),(0,o.kt)("h4",{id:"storing-emails-and-passwords"},"Storing Emails and Passwords"),(0,o.kt)("p",null,"To store user emails and passwords we will create another table in the\n",(0,o.kt)("inlineCode",{parentName:"p"},"forum_example_private")," schema."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"create table forum_example_private.person_account (\n  person_id        integer primary key references forum_example.person(id) on delete cascade,\n  email            text not null unique check (email ~* '^.+@.+\\..+$'),\n  password_hash    text not null\n);\n\ncomment on table forum_example_private.person_account is 'Private information about a person\u2019s account.';\ncomment on column forum_example_private.person_account.person_id is 'The id of the person associated with this account.';\ncomment on column forum_example_private.person_account.email is 'The email address of the person.';\ncomment on column forum_example_private.person_account.password_hash is 'An opaque hash of the person\u2019s password.';\n")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("strong",{parentName:"p"},"Warning:")," Never store passwords in plaintext! The ",(0,o.kt)("inlineCode",{parentName:"p"},"password_hash")," column\nwill contain the user\u2019s password ",(0,o.kt)("em",{parentName:"p"},"after")," it has gone through a secure hashing\nalgorithm like ",(0,o.kt)("a",{parentName:"p",href:"https://codahale.com/how-to-safely-store-a-password/"},"Bcrypt"),".\nLater in this tutorial we will show you how to securely hash a password in\nPostgres.")),(0,o.kt)("p",null,"Why would we choose to create a new table in the ",(0,o.kt)("inlineCode",{parentName:"p"},"forum_example_private")," schema\ninstead of just adding columns to ",(0,o.kt)("inlineCode",{parentName:"p"},"forum_example.person"),"? There are a couple of\nanswers to this question. The first and most fundamental is separation of\nconcerns. By moving ",(0,o.kt)("inlineCode",{parentName:"p"},"email")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"password_hash")," to a second table we make it\nmuch harder to accidently select those values when reading\n",(0,o.kt)("inlineCode",{parentName:"p"},"forum_example.person"),". Also, users will not have the permission to directly\nquery data from ",(0,o.kt)("inlineCode",{parentName:"p"},"forum_example_private")," (as we will see) making this approach\nmore secure. This approach is also good for PostGraphile as the\n",(0,o.kt)("inlineCode",{parentName:"p"},"forum_example_private")," schema is never exposed in PostGraphile, so you will\nnever accidently expose password hashes in GraphQL."),(0,o.kt)("p",null,"Besides those arguments, moving the person\u2019s account to a separate table is also\ngood database design in general. Say you have multiple types of users. Perhaps\nnormal person users, and then \u2019brand\u2018 or \u2018organization\u2019 users. This pattern\ncould easily allow you to go in that direction."),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("strong",{parentName:"p"},"Note:")," The ",(0,o.kt)("inlineCode",{parentName:"p"},"forum_example_private.person_account")," shares its primary key\nwith ",(0,o.kt)("inlineCode",{parentName:"p"},"forum_example.person"),". This way there can only be one\n",(0,o.kt)("inlineCode",{parentName:"p"},"forum_example_private.person_account")," for every ",(0,o.kt)("inlineCode",{parentName:"p"},"forum_example.person"),", a\none-to-one relationship.")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("strong",{parentName:"p"},"Note:")," For an example of a much richer user profile/account/login schema,\nuse\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/membership/membership.db/tree/master/postgres"},"Membership.db"),"\nas a reference.")),(0,o.kt)("h4",{id:"registering-users"},"Registering Users"),(0,o.kt)("p",null,"Before a user can log in, they need to have an account in our database. To\nregister a user we are going to implement a Postgres function in PL/pgSQL which\nwill create two rows. The first row will be the user\u2019s profile inserted into\n",(0,o.kt)("inlineCode",{parentName:"p"},"forum_example.person"),", and the second will be an account inserted into\n",(0,o.kt)("inlineCode",{parentName:"p"},"forum_example_private.person_account"),"."),(0,o.kt)("p",null,"Before we define the function, we know that we will want to hash the passwords\ncoming into the function before inserting them into\n",(0,o.kt)("inlineCode",{parentName:"p"},"forum_example_private.person_account"),". To hash passwords we will need the\nPostgres\n",(0,o.kt)("a",{parentName:"p",href:"https://www.postgresql.org/docs/current/static/pgcrypto.html"},(0,o.kt)("inlineCode",{parentName:"a"},"pgcrypto")),"\nextension. To add the extension, just do the following:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql"},'create extension if not exists "pgcrypto";\n')),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"pgcrypto")," extension should come with your Postgres distribution and gives\nus access to hashing functions like ",(0,o.kt)("inlineCode",{parentName:"p"},"crypt")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"gen_salt")," which were\nspecifically designed for hashing passwords."),(0,o.kt)("p",null,"Now that we have added ",(0,o.kt)("inlineCode",{parentName:"p"},"pgcrypto")," to our database, let us define our function:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"create function forum_example.register_person(\n  first_name text,\n  last_name text,\n  email text,\n  password text\n) returns forum_example.person as $$\ndeclare\n  person forum_example.person;\nbegin\n  insert into forum_example.person (first_name, last_name) values\n    (first_name, last_name)\n    returning * into person;\n\n  insert into forum_example_private.person_account (person_id, email, password_hash) values\n    (person.id, email, crypt(password, gen_salt('bf')));\n\n  return person;\nend;\n$$ language plpgsql strict security definer;\n\ncomment on function forum_example.register_person(text, text, text, text) is 'Registers a single user and creates an account in our forum.';\n")),(0,o.kt)("p",null,"If you do not understand what is going on here, do not worry, writing PL/pgSQL\nrequires some trial and error along with some StackOverflow searching. What\u2019s\nnew here compared to our other functions is that we have a new block, ",(0,o.kt)("inlineCode",{parentName:"p"},"declare"),",\nabove our function implementation which starts with ",(0,o.kt)("inlineCode",{parentName:"p"},"begin"),". In that block we\ndeclare our intention to use a variable called ",(0,o.kt)("inlineCode",{parentName:"p"},"person")," of type\n",(0,o.kt)("inlineCode",{parentName:"p"},"forum_example.person"),". Then, in our first insert statement, the row we insert\nwill be saved into that ",(0,o.kt)("inlineCode",{parentName:"p"},"person")," variable."),(0,o.kt)("p",null,"After we insert a profile into ",(0,o.kt)("inlineCode",{parentName:"p"},"forum_example.person"),", we use the ",(0,o.kt)("inlineCode",{parentName:"p"},"pgcrypto"),"\nextension in the expression ",(0,o.kt)("inlineCode",{parentName:"p"},"crypt(password, gen_salt('bf'))")," to hash the user\u2019s\npassword before inserting into ",(0,o.kt)("inlineCode",{parentName:"p"},"forum_example_private.person_account"),". This way\nwe aren\u2019t storing the password in plaintext. Read the documentation for\n",(0,o.kt)("inlineCode",{parentName:"p"},"pgcrypto")," on\n",(0,o.kt)("a",{parentName:"p",href:"https://www.postgresql.org/docs/current/static/pgcrypto.html#AEN178870"},"Password Hashing Functions"),"\nto learn more about these functions and their characteristics."),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("strong",{parentName:"p"},"Warning:")," Be very careful with logging, while we encrypt our passwords here\nit may be possible that in a query or server log the password will be recorded\nin plain text! Be careful to configure your Postgres logs so this isn\u2019t the\ncase. PostGraphile will never log the value of any variables the client gives\nit. Being careful with your logs and passwords is true in any system, but\nespecially this one."),(0,o.kt)("p",{parentName:"blockquote"},"For an overview of passwords in Postgres past the ",(0,o.kt)("inlineCode",{parentName:"p"},"pgcrypto")," documentation,\nsee the answer to the StackOverflow question\n\u201c",(0,o.kt)("a",{parentName:"p",href:"http://stackoverflow.com/a/18687445/1568890"},"How can I hash passwords in Postgres?"),"\u201d")),(0,o.kt)("p",null,"At the end of the implementation you will see\n",(0,o.kt)("inlineCode",{parentName:"p"},"language plpgsql strict security definer"),". ",(0,o.kt)("inlineCode",{parentName:"p"},"language plpgsql")," we already\nunderstand, but the other words are new. The word ",(0,o.kt)("inlineCode",{parentName:"p"},"strict")," means that if the\nfunction gets null input, then the output will be automatically null as well and\nPostgres won\u2019t call the function. That is ",(0,o.kt)("inlineCode",{parentName:"p"},"password")," cannot be null or\n",(0,o.kt)("inlineCode",{parentName:"p"},"first_name")," cannot be null otherwise the result will also be null and nothing\nwill be executed. The words ",(0,o.kt)("inlineCode",{parentName:"p"},"security definer")," mean that this function is\nexecuted with the privileges of the Postgres user who created it. Remember how\nwe said users would never be able to insert into\n",(0,o.kt)("inlineCode",{parentName:"p"},"forum_example_private.person_account"),"? Well this function can insert into\n",(0,o.kt)("inlineCode",{parentName:"p"},"forum_example_private.person_account")," because it uses the privileges of the\ndefiner."),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("strong",{parentName:"p"},"Warning:")," Make sure that when you create a function with ",(0,o.kt)("inlineCode",{parentName:"p"},"security definer"),"\nthere are no \u2018holes\u2019 a user could use to see or mutate more data than they are\nnot allowed to. Since the above is a simple function, we are fine. If you\ndon\u2019t need ",(0,o.kt)("inlineCode",{parentName:"p"},"security definer"),", try not to use it.")),(0,o.kt)("p",null,"This function will create a user and their account, but how will we log the user\nin? Before we define a function which allows users to login, sign-in,\nauthenticate, whatever you want to call it let us go over how auth works at a\nhigh level in PostGraphile. While this article is trying to be somewhat\nPostGraphile agnostic, the next two sections will be specific to PostGraphile,\nbut useful to anyone wanting to learn just a little bit more about Postgres and\nJSON Web Tokens (JWTs)."),(0,o.kt)("h4",{id:"postgres-roles"},"Postgres Roles"),(0,o.kt)("p",null,"When a user logs in, we want them to make their queries using a specific\nPostGraphile role. Using that role we can define rules that restrict what data\nthe user may access. So what roles do we need to define for our forum example?\nRemember when we were connecting to Postgres and we used a URL like\n",(0,o.kt)("inlineCode",{parentName:"p"},"postgres:///mydb"),"? Well, when you use a connection string like that, you are\nlogging into Postgres using your computer account\u2019s username and no password.\nSay your computer account username is ",(0,o.kt)("inlineCode",{parentName:"p"},"buddy"),", then connecting with the URL\n",(0,o.kt)("inlineCode",{parentName:"p"},"postgres:///mydb"),", would be the same as connecting with the URL\n",(0,o.kt)("inlineCode",{parentName:"p"},"postgres://buddy@localhost/mydb")," or even specifying the port explicitly:\n",(0,o.kt)("inlineCode",{parentName:"p"},"postgres://buddy@localhost:5432/mydb"),". If you wanted to connect to your\nPostgres database with a password it would look like\n",(0,o.kt)("inlineCode",{parentName:"p"},"postgres://buddy:password@localhost/mydb"),". When you run Postgres locally, this\naccount will probably be the superuser. So when you run\n",(0,o.kt)("inlineCode",{parentName:"p"},"postgraphile -c postgres:///mydb"),", you are running PostGraphile with superuser\nprivileges. To change that let\u2019s create a role that PostGraphile can use to\nconnect to our database:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"create role forum_example_postgraphile login password 'xyz';\n")),(0,o.kt)("p",null,"We create this ",(0,o.kt)("inlineCode",{parentName:"p"},"forum_example_postgraphile")," role with the\n",(0,o.kt)("a",{parentName:"p",href:"https://www.postgresql.org/docs/current/static/sql-createrole.html"},(0,o.kt)("inlineCode",{parentName:"a"},"CREATE ROLE")),"\ncommand. We want to make sure our PostGraphile role can login so we specify that\nwith the ",(0,o.kt)("inlineCode",{parentName:"p"},"login")," option and we give the user a password of \u2018xyz\u2019 with the\n",(0,o.kt)("inlineCode",{parentName:"p"},"password")," option. Now we will start PostGraphile as such:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"postgraphile -c postgres://forum_example_postgraphile:xyz@localhost/mydb\n")),(0,o.kt)("p",null,"When a user who does not have a JWT token makes a request to Postgres, we do not\nwant that user to have the privileges we will give to the\n",(0,o.kt)("inlineCode",{parentName:"p"},"forum_example_postgraphile")," role, so instead we will create another role."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"create role forum_example_anonymous;\ngrant forum_example_anonymous to forum_example_postgraphile;\n")),(0,o.kt)("p",null,"Here we use\n",(0,o.kt)("a",{parentName:"p",href:"https://www.postgresql.org/docs/current/static/sql-createrole.html"},(0,o.kt)("inlineCode",{parentName:"a"},"CREATE ROLE")),"\nagain. This role cannot login so it does not have the ",(0,o.kt)("inlineCode",{parentName:"p"},"login")," option, or a\npassword. We also use the\n",(0,o.kt)("a",{parentName:"p",href:"https://www.postgresql.org/docs/current/static/sql-grant.html"},(0,o.kt)("inlineCode",{parentName:"a"},"GRANT"))," command\nto grant access to the ",(0,o.kt)("inlineCode",{parentName:"p"},"forum_example_anonymous")," role to the\n",(0,o.kt)("inlineCode",{parentName:"p"},"forum_example_postgraphile")," role. Now, the ",(0,o.kt)("inlineCode",{parentName:"p"},"forum_example_postgraphile")," role\ncan control and become the ",(0,o.kt)("inlineCode",{parentName:"p"},"forum_example_anonymous")," role. If we did not use\nthat grant, we could not change into the ",(0,o.kt)("inlineCode",{parentName:"p"},"forum_example_anonymous")," role in\nPostGraphile."),(0,o.kt)("p",null,"To use this role, we could put the following into our config file:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="graphile.config.mjs"',title:'"graphile.config.mjs"'},'import { PostGraphileAmberPreset } from "postgraphile/presets/amber";\n\nexport default {\n  extends: [PostGraphileAmberPreset],\n  grafast: {\n    context(requestContext, args) {\n      return {\n        // highlight-start\n        pgSettings: {\n          role: "forum_example_anonymous",\n        },\n        // highlight-end\n      };\n    },\n  },\n};\n')),(0,o.kt)("p",null,"We can still start our server as before:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"postgraphile \\\n  --connection postgres://forum_example_postgraphile:xyz@localhost/mydb\n")),(0,o.kt)("p",null,"There is one more role we want to create. When a user logs in we don\u2019t want them\nto use the ",(0,o.kt)("inlineCode",{parentName:"p"},"forum_example_postgraphile")," role, or the basic\n",(0,o.kt)("inlineCode",{parentName:"p"},"forum_example_anonymous")," role. So instead we will create a role that all of our\nlogged in users will authorize with. We will call it ",(0,o.kt)("inlineCode",{parentName:"p"},"forum_example_person")," and\nsimilarly grant it to the ",(0,o.kt)("inlineCode",{parentName:"p"},"forum_example_postgraphile")," role."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"create role forum_example_person;\ngrant forum_example_person to forum_example_postgraphile;\n")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("strong",{parentName:"p"},"Warning:")," The ",(0,o.kt)("inlineCode",{parentName:"p"},"forum_example_postgraphile")," role will have all of the\npermissions of the roles granted to it. So it can do everything\n",(0,o.kt)("inlineCode",{parentName:"p"},"forum_example_anonymous")," can do and everything ",(0,o.kt)("inlineCode",{parentName:"p"},"forum_example_person")," can do.\nThis is why having a default role is important. We would not want an anonymous\nuser to have admin access level because we have granted an admin role to\n",(0,o.kt)("inlineCode",{parentName:"p"},"forum_example_postgraphile"),".")),(0,o.kt)("p",null,"Ok, so now we have three roles. ",(0,o.kt)("inlineCode",{parentName:"p"},"forum_example_postgraphile"),",\n",(0,o.kt)("inlineCode",{parentName:"p"},"forum_example_anonymous"),", and ",(0,o.kt)("inlineCode",{parentName:"p"},"forum_example_person"),". We know how\n",(0,o.kt)("inlineCode",{parentName:"p"},"forum_example_postgraphile")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"forum_example_anonymous")," get used, but how do\nwe know when a user is logged in and should be using ",(0,o.kt)("inlineCode",{parentName:"p"},"forum_example_person"),"? The\nanswer is JSON Web Tokens."),(0,o.kt)("h4",{id:"json-web-tokens"},"JSON Web Tokens"),(0,o.kt)("p",null,"PostGraphile uses ",(0,o.kt)("a",{parentName:"p",href:"https://jwt.io/"},"JSON Web Tokens (JWTs)")," for authorization. A\nJWT is just a JSON object that has been hashed and cryptographically signed to\nconfirm the identity of its contents. So an object like:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "a": 1,\n  "b": 2,\n  "c": 3\n}\n')),(0,o.kt)("p",null,"Would turn into a token that looks like:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhIjoxLCJiIjoyLCJjIjozfQ.hxhGCCCmGV9nT1slief1WgEsOsfdnlVizNrODxfh1M8\n")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("strong",{parentName:"p"},"Warning:")," The information in a JWT can be read by anyone, so do not put\nprivate information in a JWT. What makes JWTs secure is that unless they were\nsigned by our secret, we can not accept the information inside the JWT as\ntruth.")),(0,o.kt)("p",null,"This allows PostGraphile to securely make claims about who a user is. Attackers\nwould not be able to fake a claim unless they had access to the private \u2018secret\u2019\nyou define via ",(0,o.kt)("inlineCode",{parentName:"p"},"preset.schema.pgJwtSecret")," in your configuration."),(0,o.kt)("p",null,"When PostGraphile gets a JWT from an HTTP request\u2019s ",(0,o.kt)("inlineCode",{parentName:"p"},"Authorization")," header, like\nso:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhIjoxLCJiIjoyLCJjIjozfQ.hxhGCCCmGV9nT1slief1WgEsOsfdnlVizNrODxfh1M8\n")),(0,o.kt)("p",null,"It will verify the token using the secret, and then will serialize the claims in\nthat token to the database. So for our token above PostGraphile would\neffectively run:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"set local jwt.claims.a to 1;\nset local jwt.claims.b to 2;\nset local jwt.claims.c to 3;\n")),(0,o.kt)("p",null,"This way your JWT is accessible in your database rules. To get these values back\nout in SQL, just run the following function:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"select current_setting('jwt.claims.a', true);\n")),(0,o.kt)("p",null,"All of the \u2018claims\u2019 or properties on the JWT are serialized to the database in\nthis way, with one exception. If you have a ",(0,o.kt)("inlineCode",{parentName:"p"},"role")," property in your JWT,\nPostGraphile will also set the Postgres role of the local transaction. So say\nyou had a ",(0,o.kt)("inlineCode",{parentName:"p"},"role")," of ",(0,o.kt)("inlineCode",{parentName:"p"},"forum_example_person"),". PostGraphile would run:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"set local role to 'forum_example_person';\nset local jwt.claims.role to 'forum_example_person';\n")),(0,o.kt)("p",null,"Now, the user would have the permissions of the ",(0,o.kt)("inlineCode",{parentName:"p"},"forum_example_person")," role as\nthey execute their query."),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("strong",{parentName:"p"},"Warning:")," Unless explicitly set, JWTs never expire. Once they have been\nissued they may never be invalidated. This is both good and bad, good in that\nJWTs are fast in not requiring a database lookup. Bad in that if an attacker\ngets their hands on a JWT you can\u2019t stop them from using it until the token\nexpires. If you do not override ",(0,o.kt)("inlineCode",{parentName:"p"},"exp")," then ",(0,o.kt)("strong",{parentName:"p"},"PostGraphile's defaults set JWTs\nto expire after one day"),"."),(0,o.kt)("p",{parentName:"blockquote"},"A solution to this is to use very short expiration times on your tokens and/or\nto use refresh tokens. A refresh token you would use whenever your JWT expires\nto get a new JWT without prompting the user for their password again. Refresh\ntokens would be stored in the database so you could easily invalidate refresh\ntokens.")),(0,o.kt)("p",null,"We now know how PostGraphile uses JWTs to authorize the user, but how does\nPostGraphile create a JWT? Stay tuned."),(0,o.kt)("h4",{id:"logging-in"},"Logging In"),(0,o.kt)("p",null,"You can specify ",(0,o.kt)("inlineCode",{parentName:"p"},"preset.gather.pgJwtTypes")," in your configuration which is the\nnames (schema name and type name) of composite types in your database. When\nPostGraphile would expose these types, instead of doing so as an object it does\nso as a JWT scalar. So let\u2019s define the type we will use for our JWTs:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"create type forum_example.jwt_token as (\n  role text,\n  person_id integer,\n  exp bigint\n);\n")),(0,o.kt)("p",null,"That\u2019s it. We are using the\n",(0,o.kt)("a",{parentName:"p",href:"https://www.postgresql.org/docs/current/static/sql-createtype.html"},(0,o.kt)("inlineCode",{parentName:"a"},"CREATE TYPE")),"\ncommand again as we did before to create an enum type. This time we are creating\na composite type. The definition for a composite type looks very much like the\ndefinition of a table type, except a composite type cannot store rows. i.e. you\ncan\u2019t ",(0,o.kt)("inlineCode",{parentName:"p"},"INSERT"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"SELECT"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"UPDATE"),", or ",(0,o.kt)("inlineCode",{parentName:"p"},"DELETE")," from a composite type. While you\ncan\u2019t store rows in a composite type, PostGraphile can turn a composite type\ninto a JWT. Now that we\u2019ve defined this type we will want to specify it in our\npreset, along with enabling basic JWT functionality:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="graphile.config.mjs"',title:'"graphile.config.mjs"'},'import { PostGraphileAmberPreset } from "postgraphile/presets/amber";\n// highlight-next-line\nimport { PgLazyJWTPreset } from "postgraphile/presets/lazy-jwt";\n\nexport default {\n  extends: [\n    PostGraphileAmberPreset,\n    // highlight-next-line\n    PgLazyJWTPreset,\n  ],\n  gather: {\n    // highlight-next-line\n    pgJwtTypes: "forum_example.jwt_token",\n  },\n  schema: {\n    // highlight-next-line\n    pgJwtSecret: "keyboard_kitten", // REPLACE THIS!\n  },\n  grafast: {\n    context(requestContext, args) {\n      return {\n        pgSettings: {\n          role: "forum_example_anonymous",\n          // highlight-start\n          // JWT may override the role:\n          ...args.contextValue?.pgSettings,\n          // highlight-end\n        },\n      };\n    },\n  },\n};\n')),(0,o.kt)("p",null,"Next we need to create the function which will actually return the token:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"create function forum_example.authenticate(\n  email text,\n  password text\n) returns forum_example.jwt_token as $$\ndeclare\n  account forum_example_private.person_account;\nbegin\n  select a.* into account\n  from forum_example_private.person_account as a\n  where a.email = $1;\n\n  if account.password_hash = crypt(password, account.password_hash) then\n    return ('forum_example_person', account.person_id, extract(epoch from (now() + interval '2 days')))::forum_example.jwt_token;\n  else\n    return null;\n  end if;\nend;\n$$ language plpgsql strict security definer;\n\ncomment on function forum_example.authenticate(text, text) is 'Creates a JWT token that will securely identify a person and give them certain permissions. This token expires in 2 days.';\n")),(0,o.kt)("p",null,"This function will return null if the user failed to authenticate, and a JWT\ntoken if the user succeeds. Returning null could mean that the password was\nincorrect, a user with their email doesn\u2019t exist, or the client forgot to pass\n",(0,o.kt)("inlineCode",{parentName:"p"},"email")," and/or ",(0,o.kt)("inlineCode",{parentName:"p"},"password")," arguments. It is then up to the client to raise an\nerror when encountering ",(0,o.kt)("inlineCode",{parentName:"p"},"null"),". If a user with the provided email ",(0,o.kt)("em",{parentName:"p"},"does")," exist,\nand the provided password checks out with ",(0,o.kt)("inlineCode",{parentName:"p"},"password_hash")," in\n",(0,o.kt)("inlineCode",{parentName:"p"},"forum_example_private.person_account")," then we return an instance of\n",(0,o.kt)("inlineCode",{parentName:"p"},"forum_example.jwt_token")," which will then be converted into an actual JWT by\nPostGraphile."),(0,o.kt)("p",null,"There are two main parts to our function body. The first is:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-plpgsql"},"select a.* into account\nfrom forum_example_private.person_account as a\nwhere a.email = $1;\n")),(0,o.kt)("p",null,"This code will select a single account from\n",(0,o.kt)("inlineCode",{parentName:"p"},"forum_example_private.person_account")," using the provided email value. The ",(0,o.kt)("inlineCode",{parentName:"p"},"$1"),"\nhere is just another way to write the ",(0,o.kt)("inlineCode",{parentName:"p"},"email")," argument. If we had wrote\n",(0,o.kt)("inlineCode",{parentName:"p"},"email = email")," or even ",(0,o.kt)("inlineCode",{parentName:"p"},"a.email = email"),", Postgres would not have known which\nemail we were referring to, so instead we just used a substitute for the ",(0,o.kt)("inlineCode",{parentName:"p"},"email"),"\nargument which depends on its placement in the identifer ",(0,o.kt)("inlineCode",{parentName:"p"},"$1"),". If we\nsuccessfully find a person with that email, we store it in the ",(0,o.kt)("inlineCode",{parentName:"p"},"account"),"\nvariable. If we do not find anything, ",(0,o.kt)("inlineCode",{parentName:"p"},"account")," will be null. The second part of\nour function is:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-plpgsql"},"if account.password_hash = crypt(password, account.password_hash) then\n  return ('forum_example_person', account.person_id)::forum_example.jwt_token;\nelse\n  return null;\nend if;\n")),(0,o.kt)("p",null,"This is an if/else statement that checks to see if the plaintext ",(0,o.kt)("inlineCode",{parentName:"p"},"password"),"\nargument we were provided matches the password hash that was stored in our\n",(0,o.kt)("inlineCode",{parentName:"p"},"forum_example_private.person_account"),"\u2019s ",(0,o.kt)("inlineCode",{parentName:"p"},"password_hash")," table. If there is a\nmatch, then we return a JWT token. Otherwise we return null. The password match\ncheck is done in the code\n",(0,o.kt)("inlineCode",{parentName:"p"},"account.password_hash = crypt(password, account.password_hash)"),". To better\nunderstand how this works, read the documentation for ",(0,o.kt)("inlineCode",{parentName:"p"},"pgcrypto")," on\n",(0,o.kt)("a",{parentName:"p",href:"https://www.postgresql.org/docs/current/static/pgcrypto.html#AEN178870"},"password hashing functions"),"."),(0,o.kt)("p",null,"In order to construct a ",(0,o.kt)("inlineCode",{parentName:"p"},"forum_example.jwt_token")," we use the Postgres\n",(0,o.kt)("a",{parentName:"p",href:"https://www.postgresql.org/docs/11/rowtypes.html#id-1.5.7.24.6"},"composite value input"),"\nsyntax which looks like:\n",(0,o.kt)("inlineCode",{parentName:"p"},"('forum_example_person', account.person_id, extract(epoch from (now() + interval '2 days')))"),".\nThen we cast that composite value with ",(0,o.kt)("inlineCode",{parentName:"p"},"::forum_example.jwt_token"),". We use\nPostgres\n",(0,o.kt)("a",{parentName:"p",href:"https://www.postgresql.org/docs/current/functions-datetime.html"},"date/time functions"),"\nto generate a date that is two days from the current date, and then convert it\nto a POSIX timestamp. The order in which the values go is the order in which\nthey were originally defined. Since we defined ",(0,o.kt)("inlineCode",{parentName:"p"},"role"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"person_id")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"exp"),",\nthis JWT will have a ",(0,o.kt)("inlineCode",{parentName:"p"},"role")," of ",(0,o.kt)("inlineCode",{parentName:"p"},"forum_example_person"),", a ",(0,o.kt)("inlineCode",{parentName:"p"},"person_id")," of\n",(0,o.kt)("inlineCode",{parentName:"p"},"account.person_id"),", and an ",(0,o.kt)("inlineCode",{parentName:"p"},"exp")," that is two days from now."),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("strong",{parentName:"p"},"Warning:")," Be careful about logging around this function too.")),(0,o.kt)("p",null,"Now that we know how to get JWTs for our users, let\u2019s use the JWTs."),(0,o.kt)("h4",{id:"using-the-authorized-user"},"Using the Authorized User"),(0,o.kt)("p",null,"Before we define permissions for our user, let\u2019s utilize the fact that they are\nlogged in by defining a quick Postgres function."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"create function forum_example.current_person() returns forum_example.person as $$\n  select *\n  from forum_example.person\n  where id = nullif(current_setting('jwt.claims.person_id', true), '')::integer\n$$ language sql stable;\n\ncomment on function forum_example.current_person() is 'Gets the person who was identified by our JWT.';\n")),(0,o.kt)("p",null,"This is a simple function that we can use in PostGraphile or our database to get\nthe person who is currently executing the query \u2014 by means of the token in the\nrequest header. The one new concept here is\n",(0,o.kt)("inlineCode",{parentName:"p"},"nullif(current_setting('jwt.claims.person_id', true), '')::integer"),". As we\ndiscussed before, PostGraphile will serialize your JWT to the database in the\nform of transaction local settings. Using the ",(0,o.kt)("inlineCode",{parentName:"p"},"current_setting")," function is how\nwe access those settings. Also note that we cast the value to an integer with\n",(0,o.kt)("inlineCode",{parentName:"p"},"::integer"),". This is because the Postgres ",(0,o.kt)("inlineCode",{parentName:"p"},"current_setting")," function will always\nreturn a string, if you need another data type, you will likely need to cast to\nthat data type."),(0,o.kt)("p",null,"Now, let\u2019s use the JWT to define permissions."),(0,o.kt)("h4",{id:"grants"},"Grants"),(0,o.kt)("p",null,"The highest level of permission that can be given to roles using the Postgres\nare access privileges assigned using the\n",(0,o.kt)("a",{parentName:"p",href:"https://www.postgresql.org/docs/current/static/sql-grant.html"},(0,o.kt)("inlineCode",{parentName:"a"},"GRANT")),"\ncommand. The access privileges defined by ",(0,o.kt)("inlineCode",{parentName:"p"},"GRANT")," work on no smaller level than\nthe table level. As you can allow a role to select any value from a table, or\ndelete any value in a table. We will look at how to restrict access on a row\nlevel next."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"-- after schema creation and before function creation\nalter default privileges revoke execute on functions from public;\n\ngrant usage on schema forum_example to forum_example_anonymous, forum_example_person;\n\ngrant select on table forum_example.person to forum_example_anonymous, forum_example_person;\ngrant update, delete on table forum_example.person to forum_example_person;\n\ngrant select on table forum_example.post to forum_example_anonymous, forum_example_person;\ngrant insert, update, delete on table forum_example.post to forum_example_person;\ngrant usage on sequence forum_example.post_id_seq to forum_example_person;\n\ngrant execute on function forum_example.person_full_name(forum_example.person) to forum_example_anonymous, forum_example_person;\ngrant execute on function forum_example.post_summary(forum_example.post, integer, text) to forum_example_anonymous, forum_example_person;\ngrant execute on function forum_example.person_latest_post(forum_example.person) to forum_example_anonymous, forum_example_person;\ngrant execute on function forum_example.search_posts(text) to forum_example_anonymous, forum_example_person;\ngrant execute on function forum_example.authenticate(text, text) to forum_example_anonymous, forum_example_person;\ngrant execute on function forum_example.current_person() to forum_example_anonymous, forum_example_person;\n\ngrant execute on function forum_example.register_person(text, text, text, text) to forum_example_anonymous;\n")),(0,o.kt)("p",null,"See how we had to grant permissions on every single Postgres object we have\ndefined so far? Postgres permissions work as a whitelist and not a blacklist\n(except for functions), so therefore no one has more access than you explicitly\ngive them. Let\u2019s walk through the grants:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("inlineCode",{parentName:"li"},"alter default privileges ..."),": By default, functions can be executable by\npublic. Since we're applying our fine-grained control over function\npermissions here, we remove the default grant. Note that this line needs to\nbe placed before any function definition."),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("inlineCode",{parentName:"li"},"grant usage on schema forum_example to forum_example_anonymous, forum_example_person"),":\nWe say that anonymous users (",(0,o.kt)("inlineCode",{parentName:"li"},"forum_example_anonymous"),") and logged in users\n(",(0,o.kt)("inlineCode",{parentName:"li"},"forum_example_person"),") may use the objects in the ",(0,o.kt)("inlineCode",{parentName:"li"},"forum_example")," schema.\nThis does not mean that those roles can use anything they want in the\nschema, it just allows the roles to know the schema exists. Also note that\nwe did not grant usage for the ",(0,o.kt)("inlineCode",{parentName:"li"},"forum_example_private")," schema."),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("inlineCode",{parentName:"li"},"grant select on table forum_example.person to forum_example_anonymous, forum_example_person"),":\nWe give anonymous users and logged in users the ability to read all of the\nrows in the ",(0,o.kt)("inlineCode",{parentName:"li"},"forum_example.person")," table."),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("inlineCode",{parentName:"li"},"grant update, delete on table forum_example.person to forum_example_person"),":\nHere we give ",(0,o.kt)("em",{parentName:"li"},"only")," logged in users the ability to update and delete rows\nfrom the ",(0,o.kt)("inlineCode",{parentName:"li"},"forum_example.person")," table. This means that anonymous users can\nnever update or delete a person. However, it does mean that users can update\nand delete any rows in the table. We will fix this later."),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("inlineCode",{parentName:"li"},"grant select ...")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"grant insert, update, delete ..."),": We do the same\nthing with these two grants as we did with the grants above. The only\ndifference here is that we also give signed in users the ability to ",(0,o.kt)("inlineCode",{parentName:"li"},"insert"),"\ninto ",(0,o.kt)("inlineCode",{parentName:"li"},"forum_example.post"),". We do not allow anyone to insert directly into\n",(0,o.kt)("inlineCode",{parentName:"li"},"forum_example.person"),", instead users should use the\n",(0,o.kt)("inlineCode",{parentName:"li"},"forum_example.register_person")," function."),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("inlineCode",{parentName:"li"},"grant usage on sequence forum_example.post_id_seq to forum_example_person"),":\nWhen a user creates a new ",(0,o.kt)("inlineCode",{parentName:"li"},"forum_example.post")," they will also need to get\nthe next value in the ",(0,o.kt)("inlineCode",{parentName:"li"},"forum_example.post_id_seq")," because we use the\n",(0,o.kt)("inlineCode",{parentName:"li"},"serial")," data type for the ",(0,o.kt)("inlineCode",{parentName:"li"},"id")," column. A sequence also exists for our\nperson table (",(0,o.kt)("inlineCode",{parentName:"li"},"forum_example.person_id_seq"),"), but since we are only creating\npeople through ",(0,o.kt)("inlineCode",{parentName:"li"},"forum_example.register_person")," and that function specifies\n",(0,o.kt)("inlineCode",{parentName:"li"},"security definer"),", we don\u2019t need to grant access to the person id sequence."),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("inlineCode",{parentName:"li"},"grant execute ..."),": We have to give the anonymous user and logged in users\naccess to all of the Postgres functions we define. All of the functions are\nexecutable by both types of users, except ",(0,o.kt)("inlineCode",{parentName:"li"},"forum_example.register_person"),"\nwhich we only let anonymous users execute. There\u2019s no need for logged in\nusers to register a new user!")),(0,o.kt)("p",null,"This provides basic permissions for all of our Postgres objects, but as we\nmentioned before users can update and delete all and any persons or posts. For\nobvious reasons we don\u2019t want this, so let\u2019s define row level security next."),(0,o.kt)("h4",{id:"row-level-security"},"Row Level Security"),(0,o.kt)("p",null,"In Postgres 9.5 (released January 2016)\n",(0,o.kt)("a",{parentName:"p",href:"https://www.postgresql.org/docs/current/static/ddl-rowsecurity.html"},"Row Level Security (RLS)"),"\nwas introduced. RLS allows us to specify access to the data in our Postgres\ndatabases on a row level instead of a table level. In order to enable row level\nsecurity on our tables we first need to run the following:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"alter table forum_example.person enable row level security;\nalter table forum_example.post enable row level security;\n")),(0,o.kt)("p",null,"Before running these commands, the ",(0,o.kt)("inlineCode",{parentName:"p"},"forum_example_person")," and\n",(0,o.kt)("inlineCode",{parentName:"p"},"forum_example_anonymous")," roles could see every row in the table with a\n",(0,o.kt)("inlineCode",{parentName:"p"},"select * from forum_example.person")," query. After running these two commands\nthose same roles can\u2019t. By enabling row level security, our roles don\u2019t have any\naccess to read or write to a table that you don\u2019t explicitly give, so to\nre-enable access to all the rows we will define RLS policies with the\n",(0,o.kt)("a",{parentName:"p",href:"https://www.postgresql.org/docs/current/static/sql-createpolicy.html"},(0,o.kt)("inlineCode",{parentName:"a"},"CREATE POLICY")),"\ncommand."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"create policy select_person on forum_example.person for select\n  using (true);\n\ncreate policy select_post on forum_example.post for select\n  using (true);\n")),(0,o.kt)("p",null,"Now both anonymous users and logged in users can see all of our\n",(0,o.kt)("inlineCode",{parentName:"p"},"forum_example.person")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"forum_example.post")," rows again. We also want signed\nin users to be able to only update and delete their own row in\n",(0,o.kt)("inlineCode",{parentName:"p"},"forum_example.person"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"create policy update_person on forum_example.person for update to forum_example_person\n  using (id = nullif(current_setting('jwt.claims.person_id', true), '')::integer);\n\ncreate policy delete_person on forum_example.person for delete to forum_example_person\n  using (id = nullif(current_setting('jwt.claims.person_id', true), '')::integer);\n")),(0,o.kt)("p",null,"We use the current ",(0,o.kt)("inlineCode",{parentName:"p"},"person_id")," from our JWT and only allow updates and deletes\non rows with the same id. Also note how we added to ",(0,o.kt)("inlineCode",{parentName:"p"},"forum_example_person"),". This\nis because we only want these policies to apply for the ",(0,o.kt)("inlineCode",{parentName:"p"},"forum_example_person"),"\nrole."),(0,o.kt)("p",null,"That\u2019s all we need to define for our person table. Now let\u2019s define three\npolicies for our posts table. One for ",(0,o.kt)("inlineCode",{parentName:"p"},"INSERT"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"UPDATE"),", and ",(0,o.kt)("inlineCode",{parentName:"p"},"DELETE"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"create policy insert_post on forum_example.post for insert to forum_example_person\n  with check (author_id = nullif(current_setting('jwt.claims.person_id', true), '')::integer);\n\ncreate policy update_post on forum_example.post for update to forum_example_person\n  using (author_id = nullif(current_setting('jwt.claims.person_id', true), '')::integer);\n\ncreate policy delete_post on forum_example.post for delete to forum_example_person\n  using (author_id = nullif(current_setting('jwt.claims.person_id', true), '')::integer);\n")),(0,o.kt)("p",null,"These policies are very similar to the ones before, except that the\n",(0,o.kt)("inlineCode",{parentName:"p"},"insert_post")," policy uses ",(0,o.kt)("inlineCode",{parentName:"p"},"with check")," instead of ",(0,o.kt)("inlineCode",{parentName:"p"},"using")," like our other\npolicies. The difference between ",(0,o.kt)("inlineCode",{parentName:"p"},"with check")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"using")," is roughly that\n",(0,o.kt)("inlineCode",{parentName:"p"},"using")," is applied ",(0,o.kt)("em",{parentName:"p"},"before")," any operation occurs to the table\u2019s rows. So in the\ncase of updating a post, one could not update a row that does not have the\nappropriate ",(0,o.kt)("inlineCode",{parentName:"p"},"author_id")," in the first place. ",(0,o.kt)("inlineCode",{parentName:"p"},"with check")," is run ",(0,o.kt)("em",{parentName:"p"},"after")," an\noperation is applied. If the ",(0,o.kt)("inlineCode",{parentName:"p"},"with check")," fails the operation will be rejected.\nSo in the case of an insert, Postgres sets all of the columns as specified and\nthen compares against ",(0,o.kt)("inlineCode",{parentName:"p"},"with check")," on the new row. You must use ",(0,o.kt)("inlineCode",{parentName:"p"},"with check"),"\nwith ",(0,o.kt)("inlineCode",{parentName:"p"},"INSERT")," commands because there are no rows to compare against before\ninsertion, and you must use ",(0,o.kt)("inlineCode",{parentName:"p"},"using")," with ",(0,o.kt)("inlineCode",{parentName:"p"},"DELETE")," commands because a delete\nchanges no rows only removes current ones."),(0,o.kt)("p",null,"That\u2019s it! We have successfully created a Postgres schema embedded with our\nbusiness logic. When we use this schema with PostGraphile we will get a well\ndesigned GraphQL API that we can use in our frontend application."),(0,o.kt)("p",null,"The final configuration for our PostGraphile server would be as follows:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="graphile.config.mjs"',title:'"graphile.config.mjs"'},'import { PostGraphileAmberPreset } from "postgraphile/presets/amber";\nimport { PgLazyJWTPreset } from "postgraphile/presets/lazy-jwt";\n\nexport default {\n  extends: [PostGraphileAmberPreset, PgLazyJWTPreset],\n  gather: {\n    pgJwtTypes: "forum_example.jwt_token",\n  },\n  schema: {\n    pgJwtSecret: "keyboard_kitten", // REPLACE THIS!\n  },\n  grafast: {\n    context(requestContext, args) {\n      return {\n        pgSettings: {\n          role: "forum_example_anonymous",\n          // JWT may override the role:\n          ...args.contextValue?.pgSettings,\n        },\n      };\n    },\n  },\n};\n')),(0,o.kt)("p",null,"And you'd run PostGraphile as:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"postgraphile \\\n  --connection postgres://forum_example_postgraphile:xyz@localhost\n")),(0,o.kt)("hr",null),(0,o.kt)("h3",{id:"conclusion"},"Conclusion"),(0,o.kt)("p",null,"You should now be equipped with the knowledge to go out and design your own\nPostgres schema. If you have any questions, encounter a bug, or just want to say\nthank you, don\u2019t hesitate to\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/graphile/postgraphile/issues"},"open an issue"),", we\u2019d love to\nhear from you. The PostGraphile community wants to invest in making you a\nproductive developer so that you can invest back into PostGraphile."),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"This article was originally written by\n",(0,o.kt)("a",{parentName:"em",href:"https://twitter.com/calebmer"},"Caleb Meredith"),".")))}c.isMDXComponent=!0}}]);