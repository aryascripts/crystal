"use strict";(self.webpackChunk_localrepo_grafast_website=self.webpackChunk_localrepo_grafast_website||[]).push([[2666],{30876:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var a=n(2784);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},h="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),h=p(n),d=i,m=h["".concat(s,".").concat(d)]||h[d]||u[d]||r;return n?a.createElement(m,l(l({ref:t},c),{},{components:n})):a.createElement(m,l({ref:t},c))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,l=new Array(r);l[0]=d;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[h]="string"==typeof e?e:i,l[1]=o;for(var p=2;p<r;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},92559:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>r,metadata:()=>o,toc:()=>p});var a=n(7896),i=(n(2784),n(30876));const r={sidebar_position:9},l="Operation plan",o={unversionedId:"operation-plan",id:"operation-plan",title:"Operation plan",description:'If you\'re unfamiliar with GraphQL terminology such as "selection set", "field",',source:"@site/grafast/operation-plan.mdx",sourceDirName:".",slug:"/operation-plan",permalink:"/grafast/operation-plan",draft:!1,editUrl:"https://github.com/graphile/crystal/tree/main/grafast/website/grafast/operation-plan.mdx",tags:[],version:"current",sidebarPosition:9,frontMatter:{sidebar_position:9},sidebar:"tutorialSidebar",previous:{title:"Request overview",permalink:"/grafast/request-overview"},next:{title:"Access control",permalink:"/grafast/access-control"}},s={},p=[{value:"Execution plan",id:"execution-plan",level:2},{value:"Output plan",id:"output-plan",level:2},{value:"Constraints",id:"constraints",level:2},{value:"Lifecycle events",id:"lifecycle-events",level:2},{value:"Deduplicate",id:"deduplicate",level:3},{value:"Tree shake",id:"tree-shake",level:3},{value:"Optimize",id:"optimize",level:3},{value:"Finalize",id:"finalize",level:3},{value:"Output plan finalize",id:"output-plan-finalize",level:3}],c={toc:p},h="wrapper";function u(e){let{components:t,...n}=e;return(0,i.kt)(h,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"operation-plan"},"Operation plan"),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},'If you\'re unfamiliar with GraphQL terminology such as "selection set", "field",\n"type" and so on, please check out our\n',(0,i.kt)("a",{parentName:"p",href:"https://learn.graphile.org/docs/GraphQL_Operation_Cheatsheet.pdf"},"Operation Language"),"\nand\n",(0,i.kt)("a",{parentName:"p",href:"https://learn.graphile.org/docs/GraphQL_Schema_Language_Cheatsheet.pdf"},"Schema Language"),"\ncheatsheets.")),(0,i.kt)("p",null,"When ",(0,i.kt)("grafast",null)," sees an operation for the first time, it builds an ",(0,i.kt)("em",{parentName:"p"},"operation\nplan"),", which is the combination of an ",(0,i.kt)("a",{parentName:"p",href:"#execution-plan"},(0,i.kt)("strong",{parentName:"a"},"execution plan"))," and\nan ",(0,i.kt)("a",{parentName:"p",href:"#output-plan"},(0,i.kt)("strong",{parentName:"a"},"output plan")),". To do so, it walks the selection sets\ncalling the user-provided ",(0,i.kt)("inlineCode",{parentName:"p"},"plan")," method for each field to determine the ",(0,i.kt)("em",{parentName:"p"},"steps"),"\nthat need to be executed for that field. That series of steps, which we'll call\nthe ",(0,i.kt)("em",{parentName:"p"},"field plan"),", is then woven with all the other field plans in the\noperation, to form a directed acyclic graph we call the ",(0,i.kt)("em",{parentName:"p"},"execution plan"),".\nWhilst doing this, ",(0,i.kt)("grafast",null)," keeps track of which fields returned which\nsteps, and uses this information to form the ",(0,i.kt)("em",{parentName:"p"},"output plan"),". Finally the\n",(0,i.kt)("em",{parentName:"p"},"execution plan")," is optimized and finalized and the ",(0,i.kt)("em",{parentName:"p"},"output plan")," is finalized,\nthen they are ready for execution."),(0,i.kt)("p",null,"A simplified version of the process is this:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Start at the root selection set."),(0,i.kt)("li",{parentName:"ol"},"For each field in the current selection set:",(0,i.kt)("ol",{parentName:"li"},(0,i.kt)("li",{parentName:"ol"},"Call field ",(0,i.kt)("a",{parentName:"li",href:"./plan-resolvers"},"plan resolver")),(0,i.kt)("li",{parentName:"ol"},"Call any uncalled ",(0,i.kt)("a",{parentName:"li",href:"./plan-resolvers#applyplan-plan-resolvers"},"argument applyPlan resolvers")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Deduplicate")," new steps"),(0,i.kt)("li",{parentName:"ol"},"Repeat step 2 using the field's selection set (if any)"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Tree shake")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Optimise")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Tree shake")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Finalise"))),(0,i.kt)("h2",{id:"execution-plan"},"Execution plan"),(0,i.kt)("p",null,"The ",(0,i.kt)("em",{parentName:"p"},"execution plan")," is (generally",(0,i.kt)("sup",{parentName:"p",id:"fnref-1"},(0,i.kt)("a",{parentName:"sup",href:"#fn-1",className:"footnote-ref"},"1")),") asynchronous. It is responsible for\nfetching all the data required by the operation in as efficient a manner as\npossible, and can evolve quite significantly as a result of deduplication, tree\nshaking and optimization."),(0,i.kt)("h2",{id:"output-plan"},"Output plan"),(0,i.kt)("p",null,"The data fetched by the execution plan will not be in any particular format,\nand may have been significantly deduplicated and simplified as part of the\noperations. The ",(0,i.kt)("em",{parentName:"p"},"output plan")," is responsible for taking this bundle of data and\nformatting it back out as a valid GraphQL response, including serializing all\nthe leaves correctly and handling nulls and errors following the GraphQL\nspecification. The output plan always runs synchronously, though in streaming\nsituations such as GraphQL subscriptions or incremental delivery\n(",(0,i.kt)("inlineCode",{parentName:"p"},"@stream"),"/",(0,i.kt)("inlineCode",{parentName:"p"},"@defer"),") part of the output plan may be executed for each payload\nin the underlying stream."),(0,i.kt)("h2",{id:"constraints"},"Constraints"),(0,i.kt)("p",null,"Whilst ",(0,i.kt)("grafast",null)," is building the operation plan, it may also determined\nparticular constraints that govern whether the operation plan may be used for a\nfuture request or not. For example, if the request contains\n",(0,i.kt)("inlineCode",{parentName:"p"},"@skip(if: $variable)")," then a different operation plan would be needed depending\non whether ",(0,i.kt)("inlineCode",{parentName:"p"},"$variable")," was ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),'. Where possible, constraints are\nkept as narrow as possible - for example "variable\n$foo is a list" is preferred over "variable\n$foo is the list ',"[1,2,3]",'" - to\nmaximize reuse.'),(0,i.kt)("p",null,"When an operation is seen a future time, ",(0,i.kt)("grafast",null)," first looks for an existing\noperation plan whose constraints fit the request before falling back to creating\na new operation plan."),(0,i.kt)("h2",{id:"lifecycle-events"},"Lifecycle events"),(0,i.kt)("h3",{id:"deduplicate"},"Deduplicate"),(0,i.kt)("p",null,"Once a field is fully planned, ",(0,i.kt)("grafast",null)," will ",(0,i.kt)("em",{parentName:"p"},"deduplicate"),' the new steps it\nhas produced, attempting to replace them with existing "peer" steps that already\nexisted. These "peer" steps will have been constructed via the same step class,\nand will have the same dependencies. By deduplicating at this stage (before\nplanning the child selection set) we help to ensure that the schema remains in\nadherence to the GraphQL specification. Deduplication can reduce the number of\nsteps in the plan, leading to greater efficiency (and easier to understand\nplans).'),(0,i.kt)("h3",{id:"tree-shake"},"Tree shake"),(0,i.kt)("p",null,"Once every selection set has been fully visited and every field has been\nplanned, the execution plan is complete."),(0,i.kt)("p",null,"â€‹",(0,i.kt)("grafast",null),' then walks through the output plans, their required steps and those\nsteps dependencies (and their dependencies and so on), marking them as active.\nAny step that is not active is "unreachable" and thus is no longer needed,\ntherefore it can be be removed from the execution plan.'),(0,i.kt)("p",null,"Certain steps are immune to tree shaking (they're seen as always active), in\nparticular these include certain system steps, and any step that has side\neffects."),(0,i.kt)("h3",{id:"optimize"},"Optimize"),(0,i.kt)("p",null,"Once the execution plan is complete and the unnecessary steps have been tree\nshaken away, ",(0,i.kt)("grafast",null)," optimizes the plan by calling the ",(0,i.kt)("inlineCode",{parentName:"p"},"optimize")," lifecycle\nmethod on each step that supports it. This gives each step a chance to replace\nthemselves with more optimal forms by inspecting and interacting with their\nancestors."),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},'For example if a "first" step is to optimize itself, and its parent is a "list"\nstep, then it can simply replace itself with the first entry in the list of\nplans the "list" step contains. More advanced examples may include topics such\nas joining tables in a database, or adding selection sets to a remote GraphQL\noperation.')),(0,i.kt)("p",null,"The optimize method is called starting with the dependencies (leaves) and\nworking its way up the dependents (trunk) of the execution plan's directed\nacyclic graph. Since plans should only talk to their ancestors (and not their\ndescendents) during optimize, this ensures that their dependencies remain what\nthe class expects until after it is optimized."),(0,i.kt)("p",null,"Once optimization is complete, ",(0,i.kt)("grafast",null)," tree shakes again to remove any\nunnecessary steps from the execution plan."),(0,i.kt)("h3",{id:"finalize"},"Finalize"),(0,i.kt)("p",null,"â€‹",(0,i.kt)("grafast",null)," then finalizes the plan by calling the ",(0,i.kt)("inlineCode",{parentName:"p"},"finalize")," method on steps\nthat support it. This gives each step a chance to do work that need only be done\nonce, for example:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"a step that talks to a database might compile the SQL it needs and cache it\nfor later"),(0,i.kt)("li",{parentName:"ul"},"a step that performs templating may build an optimized template function"),(0,i.kt)("li",{parentName:"ul"},"etc")),(0,i.kt)("h3",{id:"output-plan-finalize"},"Output plan finalize"),(0,i.kt)("p",null,"Finally, the output plans are finalized, building optimized output functions and\nreferencing the latest optimized steps."),(0,i.kt)("div",{className:"footnotes"},(0,i.kt)("hr",{parentName:"div"}),(0,i.kt)("ol",{parentName:"div"},(0,i.kt)("li",{parentName:"ol",id:"fn-1"},"If the execution plan contains no asynchronous steps, then it can be\nexecuted synchronously. This is rare, though, as typically it will contain\nsteps that fetch data from remote data sources such as databases or web\nservices.",(0,i.kt)("a",{parentName:"li",href:"#fnref-1",className:"footnote-backref"},"â†©")))))}u.isMDXComponent=!0}}]);