"use strict";(self.webpackChunk_localrepo_postgraphile_website=self.webpackChunk_localrepo_postgraphile_website||[]).push([[1108],{30876:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var r=n(2784);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=r.createContext({}),s=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=s(n),m=i,f=u["".concat(p,".").concat(m)]||u[m]||d[m]||a;return n?r.createElement(f,o(o({ref:t},c),{},{components:n})):r.createElement(f,o({ref:t},c))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=m;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[u]="string"==typeof e?e:i,o[1]=l;for(var s=2;s<a;s++)o[s]=n[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},50861:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>l,toc:()=>s});var r=n(7896),i=(n(2784),n(30876));const a={layout:"page",path:"/postgraphile/inflection/",title:"Inflection"},o=void 0,l={unversionedId:"inflection",id:"version-4.x/inflection",title:"Inflection",description:'In PostGraphile, we have the concept of "inflection" which details how things in',source:"@site/versioned_docs/version-4.x/inflection.md",sourceDirName:".",slug:"/inflection",permalink:"/postgraphile/current/inflection",draft:!1,editUrl:"https://github.com/graphile/crystal/tree/main/postgraphile/website/versioned_docs/version-4.x/inflection.md",tags:[],version:"4.x",frontMatter:{layout:"page",path:"/postgraphile/inflection/",title:"Inflection"},sidebar:"docs",previous:{title:'Namespaces (PostgreSQL "schemas")',permalink:"/postgraphile/current/namespaces"},next:{title:"PostgreSQL Tables",permalink:"/postgraphile/current/tables"}},p={},s=[{value:"Overriding Naming - One-off",id:"overriding-naming---one-off",level:3},{value:"Overriding Inflection - General",id:"overriding-inflection---general",level:3},{value:"Advice",id:"advice",level:3}],c={toc:s},u="wrapper";function d(e){let{components:t,...n}=e;return(0,i.kt)(u,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,'In PostGraphile, we have the concept of "inflection" which details how things in\nPostgreSQL are named in the generated GraphQL schema.'),(0,i.kt)("p",null,"The default inflections in PostGraphile attempts to map things to natural names\nin GraphQL whilst attempting to avoid naming conflicts. For example:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Table names are singularised and changed to UpperCamelCase: ",(0,i.kt)("inlineCode",{parentName:"li"},"pending_users")," \u2192\n",(0,i.kt)("inlineCode",{parentName:"li"},"PendingUser")),(0,i.kt)("li",{parentName:"ul"},"Column names are changed to camelCase: ",(0,i.kt)("inlineCode",{parentName:"li"},"created_at")," \u2192 ",(0,i.kt)("inlineCode",{parentName:"li"},"createdAt")),(0,i.kt)("li",{parentName:"ul"},"Relations reference the target type and the referencing columns:\n",(0,i.kt)("inlineCode",{parentName:"li"},"postsByAuthorId"),' (see "advice" below about making this shorter!)')),(0,i.kt)("h3",{id:"overriding-naming---one-off"},"Overriding Naming - One-off"),(0,i.kt)("p",null,"If you want to rename just one field or type, your best bet is to use a\n",(0,i.kt)("a",{parentName:"p",href:"./smart-comments/"},"smart comment"),"; e.g. for a table you might do:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"COMMENT ON TABLE post IS E'@name message';\n")),(0,i.kt)("p",null,"NOTE: this still uses the inflectors, but it pretends that the tables name is\ndifferent, so the input to the inflectors differs."),(0,i.kt)("h3",{id:"overriding-inflection---general"},"Overriding Inflection - General"),(0,i.kt)("p",null,"It's possible to override individual inflectors with a plugin. Doing so is\ndocumented in the\n",(0,i.kt)("a",{parentName:"p",href:"./make-add-inflectors-plugin/"},(0,i.kt)("inlineCode",{parentName:"a"},"makeAddInflectorsPlugin")," article"),"."),(0,i.kt)("p",null,"An example plugin looks something like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:"{2-4}","{2-4}":!0},"module.exports = makeAddInflectorsPlugin(\n  {\n    patchType(typeName: string) {\n      return this.upperCamelCase(`${typeName}-change-set`);\n    },\n  },\n  true,\n);\n")),(0,i.kt)("p",null,"See there also for\n",(0,i.kt)("a",{parentName:"p",href:"./make-add-inflectors-plugin/#where-are-the-default-inflectors-defined"},"which inflectors to overwrite"),"."),(0,i.kt)("h3",{id:"advice"},"Advice"),(0,i.kt)("p",null,"The relation field names are quite explicit to avoid accidental conflicts, and\ncan make your schema quite verbose, e.g. ",(0,i.kt)("inlineCode",{parentName:"p"},"userByAuthorId"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"userByEditorId"),",\n",(0,i.kt)("inlineCode",{parentName:"p"},"userByPublisherId"),", etc."),(0,i.kt)("p",null,"Some people like this verbosity, however if you prefer shorter names we\nencourage you use\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/graphile-contrib/pg-simplify-inflector"},"the ",(0,i.kt)("inlineCode",{parentName:"a"},"@graphile-contrib/pg-simplify-inflector")," plugin"),".\nThis would automatically change those fields to be named ",(0,i.kt)("inlineCode",{parentName:"p"},"author"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"editor")," and\n",(0,i.kt)("inlineCode",{parentName:"p"},"publisher")," respectively."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"postgraphile --append-plugins @graphile-contrib/pg-simplify-inflector\n")),(0,i.kt)("p",null,"I, Benjie, prefer to use the pg-simplify-inflector in all my projects."))}d.isMDXComponent=!0}}]);