"use strict";(self.webpackChunk_localrepo_postgraphile_website=self.webpackChunk_localrepo_postgraphile_website||[]).push([[2774],{30876:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>g});var a=r(2784);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},i=Object.keys(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var o=a.createContext({}),c=function(e){var t=a.useContext(o),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},p=function(e){var t=c(e.components);return a.createElement(o.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,i=e.originalType,o=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(r),h=n,g=u["".concat(o,".").concat(h)]||u[h]||m[h]||i;return r?a.createElement(g,s(s({ref:t},p),{},{components:r})):a.createElement(g,s({ref:t},p))}));function g(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=r.length,s=new Array(i);s[0]=h;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l[u]="string"==typeof e?e:n,s[1]=l;for(var c=2;c<i;c++)s[c]=r[c];return a.createElement.apply(null,s)}return a.createElement.apply(null,r)}h.displayName="MDXCreateElement"},1703:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>o,contentTitle:()=>s,default:()=>m,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var a=r(7896),n=(r(2784),r(30876));const i={layout:"page",path:"/postgraphile/make-process-schema-plugin/",title:"makeProcessSchemaPlugin (graphile-utils)"},s=void 0,l={unversionedId:"make-process-schema-plugin",id:"version-4.x/make-process-schema-plugin",title:"makeProcessSchemaPlugin (graphile-utils)",description:"NOTE: this documentation applies to PostGraphile v4.1.0+",source:"@site/versioned_docs/version-4.x/make-process-schema-plugin.md",sourceDirName:".",slug:"/make-process-schema-plugin",permalink:"/postgraphile/current/make-process-schema-plugin",draft:!1,editUrl:"https://github.com/graphile/crystal/tree/main/postgraphile/website/versioned_docs/version-4.x/make-process-schema-plugin.md",tags:[],version:"4.x",frontMatter:{layout:"page",path:"/postgraphile/make-process-schema-plugin/",title:"makeProcessSchemaPlugin (graphile-utils)"},sidebar:"docs",previous:{title:"makeExtendSchemaPlugin (graphile-utils)",permalink:"/postgraphile/current/make-extend-schema-plugin"},next:{title:"makeWrapResolversPlugin (graphile-utils)",permalink:"/postgraphile/current/make-wrap-resolvers-plugin"}},o={},c=[{value:"Example",id:"example",level:3}],p={toc:c},u="wrapper";function m(e){let{components:t,...r}=e;return(0,n.kt)(u,(0,a.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"NOTE: this documentation applies to PostGraphile v4.1.0+")),(0,n.kt)("p",null,"This plugin enables a way of processing the schema after it's built."),(0,n.kt)("p",null,"Use cases include:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Printing the schema SDL to a file"),(0,n.kt)("li",{parentName:"ul"},"Uploading the schema SDL to a network service"),(0,n.kt)("li",{parentName:"ul"},"Checking the schema against your persisted queries"),(0,n.kt)("li",{parentName:"ul"},"Validating the schema against your custom logic"),(0,n.kt)("li",{parentName:"ul"},"Replacing the schema with a mocked version or a derivative version (e.g.\nstitching it with another schema)"),(0,n.kt)("li",{parentName:"ul"},"Integrating with third-party libraries")),(0,n.kt)("p",null,"The plugin accepts one argument: a schema processing function which will be\ncalled with the generated schema and must either return the same schema (e.g. if\nyou're doing a read-only operation, or mutating the schema directly) or return\nan alternative schema (e.g. a derivative)."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"PLEASE NOTE"),": some third party tooling mutates the existing GraphQL schema\nwhich is likely to cause issues. Please use only tools that treat GraphQL\nschemas as immutable; if you cannot then try building a sacrificial schema that\ndelegates to the PostGraphile schema but can be mutated."),(0,n.kt)("h3",{id:"example"},"Example"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-js"},'const { makeProcessSchemaPlugin } = require("graphile-utils");\n\nmodule.exports = makeProcessSchemaPlugin((schema) => {\n  return addThirdPartyEnhancementsToSchema(schema);\n});\n')),(0,n.kt)("p",null,"You can also use ",(0,n.kt)("inlineCode",{parentName:"p"},"makeProcessSchemaPlugin")," to replace the current schema with a\nstitched schema and run it from within the PostGraphile server:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-js"},'const { makeProcessSchemaPlugin } = require("graphile-utils");\n\nmodule.exports = makeProcessSchemaPlugin((schema) => {\n  return stitchOtherSchemasInto(schema);\n});\n')))}m.isMDXComponent=!0}}]);