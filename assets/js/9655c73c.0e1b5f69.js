"use strict";(self.webpackChunk_localrepo_postgraphile_website=self.webpackChunk_localrepo_postgraphile_website||[]).push([[1947],{30876:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>d});var a=n(2784);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},h="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),h=p(n),c=o,d=h["".concat(s,".").concat(c)]||h[c]||m[c]||r;return n?a.createElement(d,i(i({ref:t},u),{},{components:n})):a.createElement(d,i({ref:t},u))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=c;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[h]="string"==typeof e?e:o,i[1]=l;for(var p=2;p<r;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},67507:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>r,metadata:()=>l,toc:()=>p});var a=n(7896),o=(n(2784),n(30876));const r={layout:"page",path:"/postgraphile/v4-new-features/",title:"v4 Feature Guide"},i=void 0,l={unversionedId:"v4-new-features",id:"version-4.x/v4-new-features",title:"v4 Feature Guide",description:"Though the entry point to v4 is almost identical to v3 (with a few additional",source:"@site/versioned_docs/version-4.x/v4-new-features.md",sourceDirName:".",slug:"/v4-new-features",permalink:"/postgraphile/current/v4-new-features",draft:!1,editUrl:"https://github.com/graphile/crystal/tree/main/postgraphile/website/versioned_docs/version-4.x/v4-new-features.md",tags:[],version:"4.x",frontMatter:{layout:"page",path:"/postgraphile/v4-new-features/",title:"v4 Feature Guide"},sidebar:"docs",previous:{title:"Migrating from the Supporter Plugin to @graphile/pg-pubsub",permalink:"/postgraphile/current/pg-pubsub-migration"},next:{title:"Migrating from PostGraphQL v3",permalink:"/postgraphile/current/v3-migration"}},s={},p=[{value:"Performance: goodbye N+1 queries!",id:"performance-goodbye-n1-queries",level:3},{value:"Plugins plugins plugins",id:"plugins-plugins-plugins",level:3},{value:"Tidier schema",id:"tidier-schema",level:3},{value:"Omitting things",id:"omitting-things",level:3},{value:"Deprecating tables/columns/functions",id:"deprecating-tablescolumnsfunctions",level:3},{value:"Naming things",id:"naming-things",level:3},{value:"One-to-one relationships",id:"one-to-one-relationships",level:3},{value:"Simple collections",id:"simple-collections",level:3},{value:"GraphQL query batching",id:"graphql-query-batching",level:3},{value:"Order! Order!",id:"order-order",level:3},{value:"Cache invalidation (Serverless)",id:"cache-invalidation-serverless",level:3},{value:"Better support, better errors",id:"better-support-better-errors",level:3},{value:"Column-level SELECT grants may now work",id:"column-level-select-grants-may-now-work",level:3},{value:"pg@7.x and duck-typed pg",id:"pg7x-and-duck-typed-pg",level:3},{value:"Lots of hidden features",id:"lots-of-hidden-features",level:3}],u={toc:p},h="wrapper";function m(e){let{components:t,...n}=e;return(0,o.kt)(h,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Though the entry point to v4 is almost identical to v3 (with a few additional\noptions!), the guts of PostGraphile have been re-written from the ground up -\nabout 80% of the codebase has been replaced with the new Graphile Engine system\nwhich is plugin-based."),(0,o.kt)("p",null,"Despite this huge change, v4 is still broadly compatible with v3; you can read\nmore about migrating from v3 to v4 in our ",(0,o.kt)("a",{parentName:"p",href:"./v3-migration/"},"migration guide"),"."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Headlines"),":"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"\ud83d\ude80\ud83d\ude80\ud83d\ude80 Massively improved base performance: up to 55x faster, 90% reduced RAM,\n1/20th latency"),(0,o.kt)("li",{parentName:"ul"},"Cluster mode (",(0,o.kt)("inlineCode",{parentName:"li"},"--cluster-workers 4"),") for even greater performance still (uses\nmore cores, RAM)"),(0,o.kt)("li",{parentName:"ul"},"Plugin system - no need to maintain a fork; mix and match additional\nfunctionality"),(0,o.kt)("li",{parentName:"ul"},"Tidier schema:",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"PostgreSQL extension resources automatically omitted (disable with\n",(0,o.kt)("inlineCode",{parentName:"li"},"--include-extension-resources"),")"),(0,o.kt)("li",{parentName:"ul"},"with ",(0,o.kt)("inlineCode",{parentName:"li"},"--no-ignore-rbac"),", automatically omit tables and columns the user\naccount you connect to PostgreSQL with (from your connection string) doesn't\nhave permission to access."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"./smart-comments/"},"smart comments")," for omitting, renaming and deprecating\nthings easily"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"./inflection/"},"write your own naming functions")," if you don't like the built\nin ones!",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"userByAuthorId")," becomes just ",(0,o.kt)("inlineCode",{parentName:"li"},"author")," with the help of\n",(0,o.kt)("inlineCode",{parentName:"li"},"@graphile-contrib/pg-simplify-inflector")))))),(0,o.kt)("li",{parentName:"ul"},"One-to-one relationships detected correctly (connection interface still\npresent but deprecated)"),(0,o.kt)("li",{parentName:"ul"},"Simple collections: option to avoid ",(0,o.kt)("inlineCode",{parentName:"li"},"edges")," / ",(0,o.kt)("inlineCode",{parentName:"li"},"nodes")," should you so desire"),(0,o.kt)("li",{parentName:"ul"},"GraphQL query batching"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"orderBy")," more than one column"),(0,o.kt)("li",{parentName:"ul"},"GraphiQL improvements around watch mode"),(0,o.kt)("li",{parentName:"ul"},"Introspection cache (",(0,o.kt)("inlineCode",{parentName:"li"},"--read-cache")," / ",(0,o.kt)("inlineCode",{parentName:"li"},"--write-cache"),")"),(0,o.kt)("li",{parentName:"ul"},"Better errors - with details on why it's occurred and often hints on how to\nfix!"),(0,o.kt)("li",{parentName:"ul"},"Support for PostgreSQL v10 identity columns"),(0,o.kt)("li",{parentName:"ul"},"Support for actually starting against PostgreSQL v11"),(0,o.kt)("li",{parentName:"ul"},"Support for ",(0,o.kt)("inlineCode",{parentName:"li"},"pg@7.x")," npm module"),(0,o.kt)("li",{parentName:"ul"},"Support for ",(0,o.kt)("inlineCode",{parentName:"li"},"graphql@0.13.x")),(0,o.kt)("li",{parentName:"ul"},"PostGraphileRC configuration file"),(0,o.kt)("li",{parentName:"ul"},"CLI ",(0,o.kt)("inlineCode",{parentName:"li"},"--no-server")," option for writing out GraphQL schema and exiting"),(0,o.kt)("li",{parentName:"ul"},"Better support for common envvars"),(0,o.kt)("li",{parentName:"ul"},"TypeScript typings bundled"),(0,o.kt)("li",{parentName:"ul"},"Lots more hidden features"),(0,o.kt)("li",{parentName:"ul"},"Many many many many fixes"),(0,o.kt)("li",{parentName:"ul"},"Much better PostgreSQL feature support")),(0,o.kt)("hr",null),(0,o.kt)("h3",{id:"performance-goodbye-n1-queries"},"Performance: goodbye N+1 queries!"),(0,o.kt)("p",null,"The performance of PostGraphile has massively increased over PostGraphQL v3; and\nthe memory usage has decreased too! If you run your database and PostGraphile on\ndifferent servers then you should find query times are improved even further by\nthe (significant!) reduction in the number of SQL queries that we generate."),(0,o.kt)("p",null,"I created an\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/graphile/postgraphile_changes/blob/master/db/reset.sh"},"example database schema"),"\nbased on the forum example (but with some bells and whistles), filled it with\nsome data, and then benchmarked a\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/graphile/postgraphile_changes/tree/master/graphql"},"number of queries"),"\nagainst it (running everything locally on my machine (a 2011 iMac), using the\nlatest LTS release of Node.js for both v3 and v4)."),(0,o.kt)("p",null,"The most extreme improvements came in the form of\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/graphile/postgraphile_changes/blob/master/graphql/ThreadViewWithEmoji.graphql"},"ThreadViewWithEmoji.graphql"),".\nThis is a query that emulates loading the data to show a single thread page\nwithin a complex forum - the thread itself (and its author), plus the first 20\nposts within that thread, their authors, and the emoji responses that each of\nthe posts have received. It uses a computed column for the user ",(0,o.kt)("inlineCode",{parentName:"p"},"fullName"),"s, but\nother than that it's just regular relations. Here's the results of v4 vs v3 for\nthis query:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"at concurrency = 1: 12x more requests/second, 90% reduction in RAM usage, and\nless than 1/10th the latency"),(0,o.kt)("li",{parentName:"ul"},"at concurrency = 10: 17x more requests/second, 92% reduction in RAM usage, and\nnearly 1/20th the latency"),(0,o.kt)("li",{parentName:"ul"},"at concurrency = 100: 55x more requests/second, 91% reduction in RAM usage,\nand around 1/40th the latency")),(0,o.kt)("p",null,"Simpler queries still reveal good performance improvements. All in all,\nPostGraphile v4 is capable of scaling much better than v3. There's still lots of\nperformance improvements to be made - we're not resting on our laurels!"),(0,o.kt)("h3",{id:"plugins-plugins-plugins"},"Plugins plugins plugins"),(0,o.kt)("p",null,"PostGraphile's schema generation (and even the introspection itself!) are now\nprovided by a number of Graphile Engine plugins. Graphile Engine was invented\nfor PostGraphile (though it is also suitable for use in other GraphQL projects)\nto enable easy extensibility of the core system. This means we can now have\ncommunity led feature development such as\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/mattbretl/postgraphile-plugin-connection-filter"},"postgraphile-plugin-connection-filter"),"\n(which adds a much more powerful filter engine to PostGraphile that the built in\n",(0,o.kt)("inlineCode",{parentName:"p"},"condition")," argument) without having to have users maintain forks of the\nproject. These plugins can be maintained separately, and might be merged into\ncore at a later point."),(0,o.kt)("p",null,"It's also possible to turn off, or even replace, built in plugins - and of\ncourse to add your own. So you can really customise PostGraphile now! See\n",(0,o.kt)("a",{parentName:"p",href:"./extending/"},"Schema Plugins")," for more information."),(0,o.kt)("h3",{id:"tidier-schema"},"Tidier schema"),(0,o.kt)("p",null,"PostGraphile no longer includes resources from extensions automatically, so your\nschema by default only includes the functionality you've added yourself. (Go\nback to the old behaviour with ",(0,o.kt)("inlineCode",{parentName:"p"},"--include-extension-resources"),".)"),(0,o.kt)("p",null,"We highly recommend you enable the new ",(0,o.kt)("inlineCode",{parentName:"p"},"--no-ignore-rbac")," option which tells\nPostGraphile to omit anything from your GraphQL schema that you do not have\naccess to. This means that if you only do\n",(0,o.kt)("inlineCode",{parentName:"p"},"GRANT UPDATE (name, bio) ON users TO graphql_visitor;")," then the update mutation\nwill only expose the ",(0,o.kt)("inlineCode",{parentName:"p"},"name")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"bio")," fields. No more useless GraphQL fields\nthat throw errors when you attempt to use them! This option will probably be\nenabled by default in v5."),(0,o.kt)("h3",{id:"omitting-things"},"Omitting things"),(0,o.kt)("p",null,"If there's something (a column, table, function, filter, relation) that you\ndon't want to express to GraphQL you can now remove it using our\n",(0,o.kt)("a",{parentName:"p",href:"./smart-comments/"},"smart comments")," feature. This feature is highly flexible, so\nget in touch if you can think of more ways for it to help you build your perfect\nschema!"),(0,o.kt)("h3",{id:"deprecating-tablescolumnsfunctions"},"Deprecating tables/columns/functions"),(0,o.kt)("p",null,'It\'s also possible to deprecate fields, tables, functions, etc by adding a\n"smart comment"; e.g.'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"comment on column c.person.site is E'@deprecated Use `website` instead\\nThe user''s homepage';\n")),(0,o.kt)("h3",{id:"naming-things"},"Naming things"),(0,o.kt)("p",null,"You no longer have to trust us to come up with the best names for your fields.\nYou can override individual fields using our ",(0,o.kt)("a",{parentName:"p",href:"./smart-comments/"},"smart comments"),"\nfeature, or override the names that we auto-generate by using a plugin to\n",(0,o.kt)("a",{parentName:"p",href:"./inflection/"},"override our inflectors")," with your own."),(0,o.kt)("p",null,"These naming overrides can be shared like other plugins, for example I've\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/graphile-contrib/pg-simplify-inflector"},"written ",(0,o.kt)("inlineCode",{parentName:"a"},"@graphile-contrib/pg-simplify-inflector")),"\nwhich changes fields like ",(0,o.kt)("inlineCode",{parentName:"p"},"userByAuthorId: User")," into simply ",(0,o.kt)("inlineCode",{parentName:"p"},"author: User")," - I\nrecommend you check it out."),(0,o.kt)("h3",{id:"one-to-one-relationships"},"One-to-one relationships"),(0,o.kt)("p",null,"If you have tables like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"create table foo (\n  id serial primary key\n);\n\ncreate table bar (\n  foo_id int not null primary key references foo,\n  name text\n);\n")),(0,o.kt)("p",null,"in V3 the one-to-one nature of the relationship was not accounted for, so you\nwould have to query like:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-graphql",metastring:"{5-7,9-11}","{5-7,9-11}":!0},"{\n  fooById(id: 1) {\n    # Due to this being one-to-one, at most one row would ever be returned,\n    # however we didn't account for this and returned a connection anyway\n    barsByFooId {\n      edges {\n        node {\n          name\n        }\n      }\n    }\n  }\n}\n")),(0,o.kt)("p",null,"with v4's native support for these relations you can now use this much neater\nquery:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-graphql",metastring:"{3,5}","{3,5}":!0},"{\n  fooById(id: 1) {\n    barByFooId {\n      name\n    }\n  }\n}\n")),(0,o.kt)("p",null,"No more unnecessary indirection!"),(0,o.kt)("p",null,"Don't worry though, we still have the old relation too (to prevent this being a\nbreaking change), we've just deprecated it so it won't show up by default in\nautocomplete/documentation/etc."),(0,o.kt)("h3",{id:"simple-collections"},"Simple collections"),(0,o.kt)("p",null,"PostGraphile has long supported Relay-compatible connections, but it now\nsupports simple list-based collections too. They're disabled by default, but you\ncan enable both interfaces with ",(0,o.kt)("inlineCode",{parentName:"p"},"--simple-collections both")," or use the simpler\ninterface exclusively with ",(0,o.kt)("inlineCode",{parentName:"p"},"--simple-collections only"),"."),(0,o.kt)("h3",{id:"graphql-query-batching"},"GraphQL query batching"),(0,o.kt)("p",null,"With the ",(0,o.kt)("inlineCode",{parentName:"p"},"--enable-query-batching")," option for ",(0,o.kt)("a",{parentName:"p",href:"./usage-cli/"},"the CLI"),"; or\n",(0,o.kt)("inlineCode",{parentName:"p"},"enableQueryBatching: true")," for the ",(0,o.kt)("a",{parentName:"p",href:"./usage-library/"},"library")," you can enable\nour experimental Query Batching support."),(0,o.kt)("p",null,"Your GraphQL client will need query batching support to make use of this\n(non-batched queries still work fine)."),(0,o.kt)("p",null,"For Apollo, you can use the\n",(0,o.kt)("a",{parentName:"p",href:"https://www.apollographql.com/docs/link/links/batch-http.html"},"BatchHttpLink"),"\nlink - something like:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'import { ApolloClient } from "apollo-client";\nimport { BatchHttpLink } from "apollo-link-batch-http";\n\nconst link = new BatchHttpLink({ uri: "/graphql" });\n\nconst client = new ApolloClient({\n  link,\n  // other options like cache\n});\n')),(0,o.kt)("p",null,"If you manually build the payload of your http request, you should provide an\narray of queries to be executed as a batch. Example for a batch of 3 queries:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'[\n  {\n    "query": "...",\n    "operationName": "...",\n    "variables": {\n      "someVariable": "..."\n    }\n  },\n  {\n    "query": "...",\n    "operationName": "...",\n    "variables": {\n      "someVariable": "..."\n    }\n  },\n  {\n    "query": "...",\n    "operationName": "...",\n    "variables": {\n      "someVariable": "..."\n    }\n  }\n]\n')),(0,o.kt)("p",null,"The response returned by PostGraphile is an array of the response of each query.\nExample for a batch of 3 queries including one error:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'[\n  {\n    "data": [...]\n  },\n  {\n    "data": [...]\n  },\n  {\n    "errors": [...]\n  }\n]\n')),(0,o.kt)("h3",{id:"order-order"},"Order! Order!"),(0,o.kt)("p",null,"Connections now support ordering by an array of columns rather than just one - a\nmuch requested feature!"),(0,o.kt)("h3",{id:"cache-invalidation-serverless"},"Cache invalidation (Serverless)"),(0,o.kt)("p",null,"People have been running PostGraphile on AWS Lambda and similar environments,\nand one of the common issues that I hear is that boot up time is too slow. V4\naddresses this in two ways:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"we offer the ",(0,o.kt)("inlineCode",{parentName:"li"},"--read-cache")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"--write-cache")," options that allow plugins\n(including the introspection plugin!) to cache work that they do up front -\nnote that we do ",(0,o.kt)("em",{parentName:"li"},"not")," handle invalidating this cache, so that remains your\nresponsibility."),(0,o.kt)("li",{parentName:"ol"},"by changing the minimum requirements of PostGraphile to Node.js 8.6 we can\nmake use of native async/await support, resulting in much less code for Node\nto parse and execute.")),(0,o.kt)("h3",{id:"better-support-better-errors"},"Better support, better errors"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Many previously invalid enums are now made valid"),(0,o.kt)("li",{parentName:"ul"},"When the introspection results in an empty name, an error is thrown explaining\nwhy"),(0,o.kt)("li",{parentName:"ul"},"When schema building results in a naming clash, an error it thrown explaining\nwhere the two names originated, and even hinting how to fix the issue"),(0,o.kt)("li",{parentName:"ul"},"When you specify ",(0,o.kt)("inlineCode",{parentName:"li"},"--schema")," and that schema doesn't exist, you will be warned"),(0,o.kt)("li",{parentName:"ul"},"Tables that end in ",(0,o.kt)("inlineCode",{parentName:"li"},"_input")," or ",(0,o.kt)("inlineCode",{parentName:"li"},"_patch")," are renamed to FooInputRecord or\nsimilar to avoid clashes with mutation types on other tables"),(0,o.kt)("li",{parentName:"ul"},"Support ",(0,o.kt)("inlineCode",{parentName:"li"},"point"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"hstore")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"inet")," types")),(0,o.kt)("h3",{id:"column-level-select-grants-may-now-work"},"Column-level SELECT grants may now work"),(0,o.kt)("p",null,"As part of the performance work, we now select only the fields we need (and we\nalso inline computed columns, in case you're interested!). As such, if you have\ncolumn-level SELECT grants you may find that this works with PostGraphile now.\nNote, however, that this will not work with PostGraphile's default mutations,\nnor with some computed columns. We do not recommend using column-level SELECT\ngrants - instead split your concerns into multiple tables and use the one-to-one\nrelationship feature to link them."),(0,o.kt)("h3",{id:"pg7x-and-duck-typed-pg"},(0,o.kt)("a",{parentName:"h3",href:"mailto:pg@7.x"},"pg@7.x")," and duck-typed pg"),(0,o.kt)("p",null,"In v3 it was quite common to have conflicts with ",(0,o.kt)("inlineCode",{parentName:"p"},"pg")," - where you had your own\nversion installed, and PostGraphile installed it's own version, and when you\npassed a pgPool over to PostGraphile it would throw an error. Well no more! We\nnow look at the pgPool you've handed us and if it quacks like ",(0,o.kt)("del",{parentName:"p"},"a duck"),"\n",(0,o.kt)("inlineCode",{parentName:"p"},"pg.Pool")," then we'll trust you and treat it as a pg.Pool."),(0,o.kt)("h3",{id:"lots-of-hidden-features"},"Lots of hidden features"),(0,o.kt)("p",null,"There's absolutely loads of things going on under the hood that we've not\nofficially exposed yet. You can use some of this goodness (e.g.\n",(0,o.kt)("inlineCode",{parentName:"p"},"pgColumnFilter"),") by tapping into the ",(0,o.kt)("inlineCode",{parentName:"p"},"graphileBuildOptions")," setting, but you'll\ncurrently have to go digging to see what they are and how they work; and until\nthey're documented they're seen as experimental so there's no guarantees that\nthey won't be removed or modified."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"handleErrors")," for overriding how errors are output"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"X-GraphQL-Event-Stream")," header support"),(0,o.kt)("li",{parentName:"ul"},"using variables in JSON subfields"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"prettier")," for code formatting")))}m.isMDXComponent=!0}}]);