"use strict";(self.webpackChunk_localrepo_postgraphile_website=self.webpackChunk_localrepo_postgraphile_website||[]).push([[4074],{30876:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var a=n(2784);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},c="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),c=p(n),d=o,m=c["".concat(l,".").concat(d)]||c[d]||h[d]||i;return n?a.createElement(m,r(r({ref:t},u),{},{components:n})):a.createElement(m,r({ref:t},u))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,r=new Array(i);r[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[c]="string"==typeof e?e:o,r[1]=s;for(var p=2;p<i;p++)r[p]=n[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},71438:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var a=n(7896),o=(n(2784),n(30876));const i={layout:"page",path:"/postgraphile/v3-migration/",title:"Migrating from PostGraphQL v3"},r=void 0,s={unversionedId:"v3-migration",id:"version-4.x/v3-migration",title:"Migrating from PostGraphQL v3",description:"Despite the fact that PostGraphile v4 has rewritten the entire GraphQL schema",source:"@site/versioned_docs/version-4.x/v3-migration.md",sourceDirName:".",slug:"/v3-migration",permalink:"/postgraphile/current/v3-migration",draft:!1,editUrl:"https://github.com/graphile/crystal/tree/main/postgraphile/website/versioned_docs/version-4.x/v3-migration.md",tags:[],version:"4.x",frontMatter:{layout:"page",path:"/postgraphile/v3-migration/",title:"Migrating from PostGraphQL v3"},sidebar:"docs",previous:{title:"v4 Feature Guide",permalink:"/postgraphile/current/v4-new-features"},next:{title:"Testing with Jest",permalink:"/postgraphile/current/testing-jest"}},l={},p=[{value:"Short list of breaking changes",id:"short-list-of-breaking-changes",level:3},{value:"Aside: project financial status",id:"aside-project-financial-status",level:3},{value:"Deprecations",id:"deprecations",level:3},{value:"One-to-one backward relations",id:"one-to-one-backward-relations",level:4},{value:"Breakdown of issues you might face",id:"breakdown-of-issues-you-might-face",level:3},{value:"New minimum requirements",id:"new-minimum-requirements",level:4},{value:"Type &#39;Json&#39; or &#39;Uuid&#39; is not recognized",id:"type-json-or-uuid-is-not-recognized",level:4},{value:"Connection <code>orderBy</code> is now an array",id:"connection-orderby-is-now-an-array",level:4},{value:"Expected &#39;UUID&#39; but received &#39;String&#39;",id:"expected-uuid-but-received-string",level:4},{value:"JWTs now have audience &#39;postgraphile&#39; / issuer &#39;postgraphile&#39;",id:"jwts-now-have-audience-postgraphile--issuer-postgraphile",level:4},{value:"Functions now use table connections where possible (again!)",id:"functions-now-use-table-connections-where-possible-again",level:4},{value:"Issues with nullables",id:"issues-with-nullables",level:4},{value:"Fields in create mutations now respect defaults",id:"fields-in-create-mutations-now-respect-defaults",level:4},{value:"Query procedures that <code>returns setof &lt;scalar&gt;</code> no longer have <code>pageInfo</code> nor <code>totalCount</code>",id:"query-procedures-that-returns-setof-scalar-no-longer-have-pageinfo-nor-totalcount",level:4},{value:"Watch schema has changed",id:"watch-schema-has-changed",level:4},{value:"Other changes that may affect you",id:"other-changes-that-may-affect-you",level:3},{value:"Introspection query has changed",id:"introspection-query-has-changed",level:4},{value:"Field descriptions have changed a little",id:"field-descriptions-have-changed-a-little",level:4},{value:"Case changing library has changed",id:"case-changing-library-has-changed",level:4},{value:"Procedures that only supported <code>orderBy: NATURAL</code> now <strong>do not have <code>orderBy</code> at all</strong>.",id:"procedures-that-only-supported-orderby-natural-now-do-not-have-orderby-at-all",level:4},{value:"Using a return type PostGraphile user can&#39;t access",id:"using-a-return-type-postgraphile-user-cant-access",level:4},{value:"Conflicting tables names - <code>*_input</code>, <code>*_patch</code>",id:"conflicting-tables-names---_input-_patch",level:4},{value:"Very large numbers",id:"very-large-numbers",level:4}],u={toc:p},c="wrapper";function h(e){let{components:t,...n}=e;return(0,o.kt)(c,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Despite the fact that PostGraphile v4 has rewritten the ",(0,o.kt)("em",{parentName:"p"},"entire")," GraphQL schema\ngeneration from scratch it is still broadly compatible with version 3. This\ndocument aims to outline solutions to issues you might face whilst upgrading. If\nyou face issues that you cannot solve, please do reach out!"),(0,o.kt)("h3",{id:"short-list-of-breaking-changes"},"Short list of breaking changes"),(0,o.kt)("p",null,"These are things that can't be easily solved by just adding a command-line\nswitch or configuration parameter - if these are a problem for you then please\nget in touch and we'll discuss how one might go about fixing them (please read\nthe below first though!)"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Per-function ",(0,o.kt)("inlineCode",{parentName:"li"},"returns setof <table>")," connection names have been removed in\nfavour of a shared connection with the tables themselves - only affects you if\nyou have referenced the type name in queries/fragments"),(0,o.kt)("li",{parentName:"ul"},"What's nullable and what isn't has changed slightly - shouldn't cause an issue\nin most cases (please read ",(0,o.kt)("a",{parentName:"li",href:"./why-nullable/"},"Why is it nullable?")," for an\nexplanation of why each thing is nullable)"),(0,o.kt)("li",{parentName:"ul"},"JWTs now have an audience of 'postgraphile' rather than 'postgraphql', but you\ncan change this with the ",(0,o.kt)("inlineCode",{parentName:"li"},"--jwt-verify-audience")," option"),(0,o.kt)("li",{parentName:"ul"},"If you have any tables ending with ",(0,o.kt)("inlineCode",{parentName:"li"},"_input"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"_patch"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"Input")," or ",(0,o.kt)("inlineCode",{parentName:"li"},"Patch")," they\nwill be renamed (see bottom of this article)")),(0,o.kt)("h3",{id:"aside-project-financial-status"},"Aside: project financial status"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"If your business uses PostGraphile, please invest in\n",(0,o.kt)("a",{parentName:"strong",href:"https://www.patreon.com/benjie"},"our Patreon"))," - you'll benefit from faster\nfixes, more features, and better performance. If you need a more commercially\njustifiable way of funding the project then please\n",(0,o.kt)("a",{parentName:"p",href:"mailto:team@graphile.org?subject=Giving%20back"},"get in touch"),"."),(0,o.kt)("h3",{id:"deprecations"},"Deprecations"),(0,o.kt)("h4",{id:"one-to-one-backward-relations"},"One-to-one backward relations"),(0,o.kt)("p",null,"These are now supported, so the previous one-to-many approximation for them has\nbeen deprecated. If you can do so we encourage you to remove the old API via\n",(0,o.kt)("inlineCode",{parentName:"p"},"--legacy-relations=omit")," (or ",(0,o.kt)("inlineCode",{parentName:"p"},"legacyRelations: 'omit'")," in the library version);\nhowever by default we include both relations. If for some reason you don't want\nthe deprecation and you don't want the new behaviour (why?! It's so much\nbetter!) then you can enable the old behaviour only via\n",(0,o.kt)("inlineCode",{parentName:"p"},"--legacy-relations=only"),"."),(0,o.kt)("p",null,"Example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"create table foo (\n  id serial primary key\n);\n\ncreate table bar (\n  foo_id int not null primary key references foo,\n  name text\n);\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-graphql"},"{\n  fooById(id: 1) {\n    # Old interface - deprecated\n    # Note: this connection can only return at most one result so doesn't\n    # deserve a connection\n    barsByFooId {\n      edges {\n        node {\n          name\n        }\n      }\n    }\n\n    # New interface - no more indirection!\n    barByFooId {\n      name\n    }\n  }\n}\n")),(0,o.kt)("h3",{id:"breakdown-of-issues-you-might-face"},"Breakdown of issues you might face"),(0,o.kt)("h4",{id:"new-minimum-requirements"},"New minimum requirements"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Problem"),": the system fails to start (or even install) because the\nrequirements are not met."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Solution"),": upgrade your software"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Node.js v8.6+ required"),(0,o.kt)("li",{parentName:"ul"},"PostgreSQL 9.4+ required (v9.6+ recommended)"),(0,o.kt)("li",{parentName:"ul"},"GraphQL v0.9+ required")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Reasoning"),": Node.js v8 is the current active LTS, v6 will be leaving active\nLTS status for maintenance mode in April 2018 (next month at time of writing),\nand supporting 8.6+ as the base level gives us longevity whilst also allowing us\nto leverage native support for some of the powerful features of ES2017 and\nES2018."),(0,o.kt)("h4",{id:"type-json-or-uuid-is-not-recognized"},"Type 'Json' or 'Uuid' is not recognized"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Problem"),": ",(0,o.kt)("inlineCode",{parentName:"p"},"Json")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"Uuid")," have been renamed to ",(0,o.kt)("inlineCode",{parentName:"p"},"JSON")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"UUID"),"\nrespectively"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Solution"),": either modify your queries, or if you cannot do that then use the\n",(0,o.kt)("inlineCode",{parentName:"p"},"--legacy-json-uuid")," command line flag (or ",(0,o.kt)("inlineCode",{parentName:"p"},"legacyJsonUuid: true")," library\noption) to change back to the old naming."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Reasoning"),": purely correctness/aesthetic. Sorry. \ud83d\ude05"),(0,o.kt)("h4",{id:"connection-orderby-is-now-an-array"},"Connection ",(0,o.kt)("inlineCode",{parentName:"h4"},"orderBy")," is now an array"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Problem"),": ",(0,o.kt)("inlineCode",{parentName:"p"},"orderBy")," in connection fields now allows an array of order\nspecifications, so you can order by multiple things (like in SQL). However\ncertain clients might have a problem with this?"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Solution"),": in most cases this should ",(0,o.kt)("em",{parentName:"p"},"not")," cause an issue for existing\nqueries - according to\n",(0,o.kt)("a",{parentName:"p",href:"https://graphql.github.io/graphql-spec/October2016/#sec-Lists"},"3.1.7 in the GraphQL specification"),":"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"If the value passed as an input to a list type is not a list and not the null\nvalue, it should be coerced as though the input was a list of size one, where\nthe value passed is the only item in the list.")),(0,o.kt)("p",null,"So any spec-compliant client should ",(0,o.kt)("strong",{parentName:"p"},"not")," have an issue with this."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Reasoning"),": people want to sort by multiple columns and since we could do it\nwith a non-breaking change (according to the above) we did!"),(0,o.kt)("h4",{id:"expected-uuid-but-received-string"},"Expected 'UUID' but received 'String'"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Problem"),": 'UUID' is enabled by default"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Solution"),": raise an issue and we can add a toggle to not enable it by default"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Reasoning"),": named types are helpful"),(0,o.kt)("h4",{id:"jwts-now-have-audience-postgraphile--issuer-postgraphile"},"JWTs now have audience 'postgraphile' / issuer 'postgraphile'"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Problem"),": we changed the audience with the rename of the library"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Solution"),": if you can't update your config you can make sure your token\nobjects returned in the DB have ",(0,o.kt)("inlineCode",{parentName:"p"},"aud: 'postgraphql', iss: 'postgraphql'"),"\n(solution untested - if you used this please let\n",(0,o.kt)("a",{parentName:"p",href:"https://twitter.com/benjie"},"me")," know whether it worked or not)"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Reasoning"),": we renamed the library, it'd be confusing for new users to\nreference the old name."),(0,o.kt)("h4",{id:"functions-now-use-table-connections-where-possible-again"},"Functions now use table connections where possible (again!)"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Problem"),": functions that return setof a table type now use the same\nconnection class as the tables themselves do (just like PostGraphQL v2 did)"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Solution"),": if this is a problem for you and you're unable to fix the queries,\nplease do get in touch!"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Reasoning"),": performing pagination against multiple sources of the same table\ntype is much more complex if the connection types differ."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Potential future solution"),": have the connections implement a shared\ninterface."),(0,o.kt)("h4",{id:"issues-with-nullables"},"Issues with nullables"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Problem"),": some things are nullable that weren't, some things aren't nullable\nthat were."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Solution"),": you can enable the ",(0,o.kt)("inlineCode",{parentName:"p"},"--no-setof-functions-contain-nulls")," CLI option\n(or ",(0,o.kt)("inlineCode",{parentName:"p"},"setofFunctionsContainNulls: false")," library option) to reduce the nullables\nin the generated schema."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Reasoning"),":"),(0,o.kt)("p",null,"Functions like this can exist:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"create function c.badly_behaved_function() returns setof c.person as $$\nbegin\n  return query select * from c.person order by id asc limit 1;\n  return next null;\n  return query select * from c.person order by id desc limit 1;\nend;\n$$ language plpgsql stable;\n")),(0,o.kt)("p",null,"This function returns an array of ",(0,o.kt)("inlineCode",{parentName:"p"},"[{person}, null, {person}]")," where ",(0,o.kt)("inlineCode",{parentName:"p"},"{person}"),"\nis a Person object. In PostGraphile because it is a ",(0,o.kt)("inlineCode",{parentName:"p"},"setof")," function we treat it\nas a connection. As explained above, we now (like in version 2) use the same\nconnections for functions as for tables - as such these connections now have to\nsupport that the entries within them are nullable."),(0,o.kt)("p",null,"If you don't like the nulls everywhere, I encourage you to use the ",(0,o.kt)("inlineCode",{parentName:"p"},"-N")," /\n",(0,o.kt)("inlineCode",{parentName:"p"},"--no-setof-functions-contain-nulls")," option mentioned above. Enabling this is a\nnon-breaking change, but disabling it ",(0,o.kt)("strong",{parentName:"p"},"is")," a breaking change - hence why it is\nnot the default behaviour."),(0,o.kt)("h4",{id:"fields-in-create-mutations-now-respect-defaults"},"Fields in create mutations now respect defaults"),(0,o.kt)("p",null,"In v3, omitting a field from a create mutation would cause it to be set to\n",(0,o.kt)("inlineCode",{parentName:"p"},"NULL"),", ignoring the column default. We fixed this in v4, now if you want to set\nthe column null you must specify NULL in the mutation (rather than omitting the\nkey)."),(0,o.kt)("h4",{id:"query-procedures-that-returns-setof-scalar-no-longer-have-pageinfo-nor-totalcount"},"Query procedures that ",(0,o.kt)("inlineCode",{parentName:"h4"},"returns setof <scalar>")," no longer have ",(0,o.kt)("inlineCode",{parentName:"h4"},"pageInfo")," nor ",(0,o.kt)("inlineCode",{parentName:"h4"},"totalCount")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Problem"),": as heading."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Solution"),": it's possibly to re-introduce support via a plugin - get in touch\nif you need this"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Reasoning"),": I did not feel it was particularly necessary and I've only got\nlimited time to work on the project..."),(0,o.kt)("h4",{id:"watch-schema-has-changed"},"Watch schema has changed"),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"Note that changes to the watch schema are NOT deemed to be breaking changes.")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Problem"),": watch schema has changed to fix issues with dropping objects"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Solution"),": most people shouldn't be affected by this (though they might want\nto drop the old watch schema) because ",(0,o.kt)("inlineCode",{parentName:"p"},"--watch")," is only intended for development\nuse and the new schema should install itself just fine. But if you had to\nmanually install the old watch schema, you'll need to manually install the\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/graphile/graphile-engine/blob/master/packages/graphile-build-pg/res/watch-fixtures.sql"},"new one"),"\nin the same way"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Reasoning"),": the old schema did not detect certain ",(0,o.kt)("inlineCode",{parentName:"p"},"DROP")," commands and so\nadding tables, columns, functions, etc. to your schema was fine, but removing\nthem did not result in a refresh."),(0,o.kt)("h3",{id:"other-changes-that-may-affect-you"},"Other changes that may affect you"),(0,o.kt)("p",null,"These are things that I doubt affect many people (if any) but I want to raise so\nyou can check your own applications."),(0,o.kt)("h4",{id:"introspection-query-has-changed"},"Introspection query has changed"),(0,o.kt)("p",null,"And will probably continue to change. Changes to the introspection query are not\ndeemed to be breaking changes. The introspection query is now programatically\ngenerated so that we can support PG10 and PG11 features."),(0,o.kt)("h4",{id:"field-descriptions-have-changed-a-little"},"Field descriptions have changed a little"),(0,o.kt)("p",null,"Field description changes are not deemed to be breaking changes."),(0,o.kt)("h4",{id:"case-changing-library-has-changed"},"Case changing library has changed"),(0,o.kt)("p",null,"We replaced the library but this doesn't affect any of the tests. If this causes\nyou pain please submit an issue so we can add your fields/table names/etc to the\ntests to ensure this doesn't happen again."),(0,o.kt)("p",null,"Workaround: you can change the inflection engine back to the old one with a\nplugin - ",(0,o.kt)("a",{parentName:"p",href:"./make-add-inflectors-plugin/"},"see ",(0,o.kt)("inlineCode",{parentName:"a"},"makeAddInflectorsPlugin")),"."),(0,o.kt)("h4",{id:"procedures-that-only-supported-orderby-natural-now-do-not-have-orderby-at-all"},"Procedures that only supported ",(0,o.kt)("inlineCode",{parentName:"h4"},"orderBy: NATURAL")," now ",(0,o.kt)("strong",{parentName:"h4"},"do not have ",(0,o.kt)("inlineCode",{parentName:"strong"},"orderBy")," at all"),"."),(0,o.kt)("p",null,"Though technically a breaking change, I'm not deeming it as such because I don't\nunderstand why you'd explicitly set the orderBy for a field that only has one\nvalue and that value is enabled by default."),(0,o.kt)("p",null,"If this is a problem for you please get in touch and we can add support back via\na simple plugin."),(0,o.kt)("h4",{id:"using-a-return-type-postgraphile-user-cant-access"},"Using a return type PostGraphile user can't access"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"security definer")," mutations that return a type from a schema that the\nrequesting PostgreSQL user is not allowed to view may now result in\n",(0,o.kt)("inlineCode",{parentName:"p"},"permission denied for schema xxxx"),"."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Solution"),": don't do that \ud83d\ude09"),(0,o.kt)("h4",{id:"conflicting-tables-names---_input-_patch"},"Conflicting tables names - ",(0,o.kt)("inlineCode",{parentName:"h4"},"*_input"),", ",(0,o.kt)("inlineCode",{parentName:"h4"},"*_patch")),(0,o.kt)("p",null,"Tables that end in ",(0,o.kt)("inlineCode",{parentName:"p"},"_input")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"_patch")," such as ",(0,o.kt)("inlineCode",{parentName:"p"},"foo_input")," will no longer be\nexported as ",(0,o.kt)("inlineCode",{parentName:"p"},"FooInput")," but as ",(0,o.kt)("inlineCode",{parentName:"p"},"FooInputRecord")," - this prevents collisions with\nmutation types on tables that share the prefix (e.g. table ",(0,o.kt)("inlineCode",{parentName:"p"},"foo"),"/",(0,o.kt)("inlineCode",{parentName:"p"},"foos")," requires\n",(0,o.kt)("inlineCode",{parentName:"p"},"FooInput")," for its create mutation)."),(0,o.kt)("p",null,"Even if they don't clash ",(0,o.kt)("em",{parentName:"p"},"right now")," there's a risk that they will clash in\nfuture; e.g. if you create the table ",(0,o.kt)("inlineCode",{parentName:"p"},"foo_bar_input")," then creating ",(0,o.kt)("inlineCode",{parentName:"p"},"FooBarInput"),"\nand ",(0,o.kt)("inlineCode",{parentName:"p"},"FooBarInputInput")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"FooBarInputPatch")," is fine... But if you later add\nthe table ",(0,o.kt)("inlineCode",{parentName:"p"},"foo_bar")," then ",(0,o.kt)("inlineCode",{parentName:"p"},"FooBarInput")," will clash. So renaming the tables up\nfront means that whether or not you add that table later it'll still be fine\nwithout breaking existing functionality."),(0,o.kt)("p",null,"You can rename tables directly, or if you prefer not to change your database\nlayout you can use ",(0,o.kt)("a",{parentName:"p",href:"./smart-comments/"},"smart comments")," or write a custom\n",(0,o.kt)("a",{parentName:"p",href:"./inflection/"},"inflector"),"."),(0,o.kt)("h4",{id:"very-large-numbers"},"Very large numbers"),(0,o.kt)("p",null,"Large integers (over 4 bytes) are still referred to as ",(0,o.kt)("inlineCode",{parentName:"p"},"BigInt"),", large floats\n(those beyond IEEE754) are now called ",(0,o.kt)("inlineCode",{parentName:"p"},"BigFloat"),". The specific boundaries in\nwhich these new types kick in may have changed - particularly for\n",(0,o.kt)("inlineCode",{parentName:"p"},"DECIMAL"),"/",(0,o.kt)("inlineCode",{parentName:"p"},"NUMERIC")," types. ",(0,o.kt)("inlineCode",{parentName:"p"},"DECIMAL"),"/",(0,o.kt)("inlineCode",{parentName:"p"},"NUMERIC")," are likely to change in future\n(so that smaller versions might be represented as int/float rather than\nBigInt/BigFloat)."))}h.isMDXComponent=!0}}]);