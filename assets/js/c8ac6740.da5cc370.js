"use strict";(self.webpackChunk_localrepo_postgraphile_website=self.webpackChunk_localrepo_postgraphile_website||[]).push([[5547],{30876:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>c});var n=r(2784);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),p=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},h="mdxType",g={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),h=p(r),d=a,c=h["".concat(l,".").concat(d)]||h[d]||g[d]||o;return r?n.createElement(c,i(i({ref:t},u),{},{components:r})):n.createElement(c,i({ref:t},u))}));function c(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[h]="string"==typeof e?e:a,i[1]=s;for(var p=2;p<o;p++)i[p]=r[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},11462:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>g,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var n=r(7896),a=(r(2784),r(30876));const o={layout:"page",path:"/postgraphile/debugging/",title:"Debugging"},i=void 0,s={unversionedId:"debugging",id:"debugging",title:"Debugging",description:"When something's wrong with your app it can be hugely frustrating; so we want to",source:"@site/postgraphile/debugging.md",sourceDirName:".",slug:"/debugging",permalink:"/postgraphile/next/debugging",draft:!1,editUrl:"https://github.com/graphile/crystal/tree/main/postgraphile/website/postgraphile/debugging.md",tags:[],version:"current",frontMatter:{layout:"page",path:"/postgraphile/debugging/",title:"Debugging"},sidebar:"docs",previous:{title:"Reserved keywords and table names",permalink:"/postgraphile/next/reserved-keywords"},next:{title:"Smart tags",permalink:"/postgraphile/next/smart-tags"}},l={},p=[{value:"Step 1: check you&#39;re requesting what you think you&#39;re requesting",id:"step-1-check-youre-requesting-what-you-think-youre-requesting",level:2},{value:"Step 2: try your query in Ruru or GraphiQL",id:"step-2-try-your-query-in-ruru-or-graphiql",level:2},{value:"Step 3: increase PostGraphile&#39;s logging",id:"step-3-increase-postgraphiles-logging",level:2},{value:"Step 4: viewing the generated SQL",id:"step-4-viewing-the-generated-sql",level:2},{value:"Via Ruru &#39;Explain&#39;",id:"via-ruru-explain",level:3},{value:"Via <code>DEBUG</code> envvar",id:"via-debug-envvar",level:3},{value:"Other <code>DEBUG</code> envvars",id:"other-debug-envvars",level:2},{value:"Advanced: getting your hands dirty",id:"advanced-getting-your-hands-dirty",level:2}],u={toc:p},h="wrapper";function g(e){let{components:t,...r}=e;return(0,a.kt)(h,(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"When something's wrong with your app it can be hugely frustrating; so we want to\nmake it as easy as we can for you to get to the bottom of these issues!"),(0,a.kt)("h2",{id:"step-1-check-youre-requesting-what-you-think-youre-requesting"},"Step 1: check you're requesting what you think you're requesting"),(0,a.kt)("p",null,"Often issues occur because your client code isn't doing what you think it's\ndoing. The first step here is to determine exactly what's being sent over the\nnetwork. If you're building a website you can easily use Google Chrome's Network\nDevtools to see exactly what's being sent and received."),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Open your website in Chrome"),(0,a.kt)("li",{parentName:"ol"},"Right click, and select 'Inspect'"),(0,a.kt)("li",{parentName:"ol"},"Select the 'Network' tab in the developer tools"),(0,a.kt)("li",{parentName:"ol"},"In the filter box, enter '/graphql' (or whatever path you have configured\nyour API to use)"),(0,a.kt)("li",{parentName:"ol"},"Ensure that 'All' is selected to the right of the filter box"),(0,a.kt)("li",{parentName:"ol"},"Trigger your GraphQL request (either by reloading the page or by clicking\nthe relevant element on the screen)"),(0,a.kt)("li",{parentName:"ol"},"Review the network requests that have arrived to ensure they're what you'd\nexpect, that no variables are unexpectedly null, that the relevant access\ntokens are being set in the request headers, etc")),(0,a.kt)("h2",{id:"step-2-try-your-query-in-ruru-or-graphiql"},"Step 2: try your query in Ruru or GraphiQL"),(0,a.kt)("p",null,"It sometimes helps to try doing the same thing a different way, and this is\nwhere Ruru (or any GraphiQL) comes in handy. Take the query you're running and\nexecute it via Ruru. Is it producing the same issue? Note that you can set\nheaders in Ruru via the ",(0,a.kt)("inlineCode",{parentName:"p"},"Headers")," tab at the bottom, where variables are\nentered."),(0,a.kt)("h2",{id:"step-3-increase-postgraphiles-logging"},"Step 3: increase PostGraphile's logging"),(0,a.kt)("p",null,"Note that the errors are sent through to the GraphQL client (they're not output\non the server by default) so you'll need to reproduce this from your client so\nyou can see the output (or use a network inspector such as WireShark if\nmodifying the client is not an option). If you're using PostGraphile as a\nlibrary then you can use ",(0,a.kt)("inlineCode",{parentName:"p"},"preset.grafserv.maskError")," to output the error\ndetails on the server side (and to manipulate them before they're returned to\nthe client). The default implementation of ",(0,a.kt)("inlineCode",{parentName:"p"},"maskError")," trims out a lot of\ndetails for security reasons, if you replace it be sure that you are also being\ncautious about what you're outputting to potential attackers."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="graphile.config.mjs"',title:'"graphile.config.mjs"'},'import { GraphQLError } from "postgraphile/graphql";\nimport { isSafeError } from "postgraphile/grafast";\nimport { createHash } from "node:crypto";\n\nconst sha1 = (text: string) =>\n  createHash("sha1").update(text).digest("base64url");\n\nexport default {\n  //...\n  grafserv: {\n    maskError(error) {\n      console.error("maskError was called with the following error:");\n      console.error(error);\n      console.error("which had an originalError of:");\n      console.error(error.originalError);\n\n      // You probably don\'t want this level of debugging in production as the\n      // results are sent to the client and it may leak implementation details\n      // you wish to keep private.\n      //\n      //   return error;\n\n      // Here\'s a more careful implementation:\n\n      if (error.originalError instanceof GraphQLError) {\n        return error;\n      } else if (\n        error.originalError != null &&\n        isSafeError(error.originalError)\n      ) {\n        return new GraphQLError(\n          error.originalError.message,\n          error.nodes,\n          error.source,\n          error.positions,\n          error.path,\n          error.originalError,\n          error.originalError.extensions ?? null,\n        );\n      } else {\n        // Hash so that similar errors can easily be grouped\n        const hash = sha1(String(error));\n        console.error(`Masked GraphQL error (hash: \'${hash}\')`, error);\n        return new GraphQLError(\n          `An error occurred (logged with hash: \'${hash}\')`,\n          error.nodes,\n          error.source,\n          error.positions,\n          error.path,\n          error.originalError,\n          // Deliberately wipe the extensions\n          {},\n        );\n      }\n    },\n  },\n};\n')),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"GraphQLError instances have an ",(0,a.kt)("inlineCode",{parentName:"p"},"error.originalError")," property that can be used\nto retrieve the underlying error, this typically contains more actionable\ninformation than the GraphQL error itself.")),(0,a.kt)("h2",{id:"step-4-viewing-the-generated-sql"},"Step 4: viewing the generated SQL"),(0,a.kt)("p",null,"Assuming that the error is coming from within the database, you can see what SQL\nstatements PostGraphile is generating."),(0,a.kt)("h3",{id:"via-ruru-explain"},"Via Ruru 'Explain'"),(0,a.kt)("p",null,'One way to do so is via the "Explain" feature available in Ruru. To use this,\nyou must ensure that ',(0,a.kt)("inlineCode",{parentName:"p"},"preset.grafast.explain")," is enabled in your configuration:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="graphile.config.mjs"',title:'"graphile.config.mjs"'},"export default {\n  // ...\n  grafast: {\n    explain: true,\n  },\n};\n")),(0,a.kt)("admonition",{type:"warning"},(0,a.kt)("p",{parentName:"admonition"},"Explain should be disabled in production since it could leak information about\nthe internals of your schema that would be useful to an attacker.")),(0,a.kt)("p",null,"Once enabled, visit Ruru (by default this will be at\nhttp://localhost:5678/graphiql) and open the ",(0,a.kt)("inlineCode",{parentName:"p"},"Explain")," tab on the left - the\nicon looks like a magnifying glass \ud83d\udd0d. You should see the query that was\nexecuted and the associated Gra",(0,a.kt)("em",{parentName:"p"},"fast")," operation plan, and from the dropdown you\ncan select the various SQL queries and their explain results."),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"Currently SQL ",(0,a.kt)("inlineCode",{parentName:"p"},"EXPLAIN")," can only be enabled via ",(0,a.kt)("inlineCode",{parentName:"p"},"DEBUG")," envvar. This is a known\nissue that should be fixed before the release of PostGraphile v5.0.0.")),(0,a.kt)("h3",{id:"via-debug-envvar"},"Via ",(0,a.kt)("inlineCode",{parentName:"h3"},"DEBUG")," envvar"),(0,a.kt)("p",null,"Another way is to set the relevant ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/visionmedia/debug"},"DEBUG"),"\nenvironmental variable before running PostGraphile. For example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"# Bash (Linux, macOS, etc)\nexport DEBUG=\"@dataplan/pg:PgExecutor:explain\"\npostgraphile -c postgres://...\n\n# Windows Console\nset DEBUG=@dataplan/pg:PgExecutor:explain & postgraphile -c postgres://...\n\n# Windows PowerShell\n$env:DEBUG='@dataplan/pg:PgExecutor:explain'; postgraphile -c postgres://...\n")),(0,a.kt)("h2",{id:"other-debug-envvars"},"Other ",(0,a.kt)("inlineCode",{parentName:"h2"},"DEBUG")," envvars"),(0,a.kt)("p",null,"We use a lot of DEBUG envvars for different parts of the system. Here's some of\nthe ones you might care about:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"graphile-build:warn"),' - details of "recoverable" errors that occurred during\nschema construction. Often include details of how to fix the issue.'),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"graphile-build:SchemaBuilder")," - this hook is useful for understanding the\norder in which hooks execute, and how hook executions can nest - a must for\npeople getting started with graphile-build plugins"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"@dataplan/pg:PgExecutor:verbose")," - details of the SQL queries being executed, their inputs, and their results"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"@dataplan/pg:PgExecutor:explain")," - as above, but also their EXPLAIN results")),(0,a.kt)("p",null,"To enable these DEBUG modes, join them with commas when setting a DEBUG envvar,\nthen run PostGraphile or your Node.js server in the same terminal:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'# Bash (Linux, macOS, etc)\nexport DEBUG="graphile-build:warn,@dataplan/pg:*"\npostgraphile -c postgres://...\n\n# Windows Console\nset DEBUG=graphile-build:warn,@dataplan/pg:* & postgraphile -c postgres://...\n\n# Windows PowerShell\n$env:DEBUG = "graphile-build:warn,@dataplan/pg:*"; postgraphile -c postgres://...\n')),(0,a.kt)("h2",{id:"advanced-getting-your-hands-dirty"},"Advanced: getting your hands dirty"),(0,a.kt)("p",null,"If you're a plugin author, you think you've discovered an issue in PostGraphile,\nor you just like seeing how things work, you can use the Chrome Debug tools to\ndebug the node process - add breakpoints, break on exceptions, and step through\ncode execution."),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Visit ",(0,a.kt)("inlineCode",{parentName:"li"},"chrome://inspect")," in Google Chrome (we can't hyperlink it for\nsecurity reasons)."),(0,a.kt)("li",{parentName:"ol"},"Select 'Open dedicated DevTools for Node', a new devtools window should\nopen - don't close this!"),(0,a.kt)("li",{parentName:"ol"},"Run your server or PostGraphile via Node.js directly, in ",(0,a.kt)("inlineCode",{parentName:"li"},"--inspect")," mode,\ne.g.:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"# For globally installed PostGraphile:\nnode --inspect `which postgraphile` -c postgres://...\n\n# or for locally installed PostGraphile:\nnode --inspect node_modules/.bin/postgraphile -c postgres://...\n\n# or, if you have your own Node.js app in `server.js`:\nnode --inspect server.js\n")))}g.isMDXComponent=!0}}]);